{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material-x/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/Monaco.ttf","path":"fonts/Monaco.ttf","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/js/volantis.js","path":"js/volantis.js","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","path":"fonts/Skranji-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","path":"fonts/Ubuntu-Regular.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"576dac0fd2dad5b7cd65e5caed39a1499e3d69fd","modified":1561474027897},{"_id":"themes/material-x/_config.yml","hash":"949035aad16383112b0b089fc32eb97d557dd9b8","modified":1561787917836},{"_id":"source/categories/index.md","hash":"012d8b570fc0aa028fdb6fbd550b68c93c17df4a","modified":1561474027953},{"_id":"source/about/index.md","hash":"cb43042ffd6dccd77d8da29bc8fdba7cd4b9518d","modified":1561786208887},{"_id":"source/mylist/index.md","hash":"a5ffb153388ce5deb2c7bdb4aac5886012c272e7","modified":1561474027955},{"_id":"source/friends/index.md","hash":"ddf8cee376a5251d21f2a0a2678a393b3ae9a391","modified":1561474027954},{"_id":"themes/material-x/languages/en.yml","hash":"c44a0ca9ed1b9d756d74f07d197697bafa5419af","modified":1561474028017},{"_id":"themes/material-x/languages/zh-CN.yml","hash":"39b5cb1b74ee199e105b91693fceca86fd21e303","modified":1561779082487},{"_id":"themes/material-x/languages/zh-HK.yml","hash":"27d5cbfff335535fcfed5786f1cd715b72f164c7","modified":1561474028019},{"_id":"themes/material-x/layout/index.ejs","hash":"004a2d7e0fff53cb7907e4acd76d1d8a88385fbd","modified":1561474028051},{"_id":"themes/material-x/layout/archive.ejs","hash":"36325688339c59d3c615e7f76558518a854b6448","modified":1561474028050},{"_id":"themes/material-x/layout/links.ejs","hash":"f2e13b3571d30647deca7fe760de670f65f48e9d","modified":1561474028053},{"_id":"themes/material-x/layout/category.ejs","hash":"ef7b8f73351625877312305e0bc09b52d6dcbb53","modified":1561474028051},{"_id":"source/tags/index.md","hash":"62c5b86c7986b58ed3e5ded7114799f287a32930","modified":1561474027957},{"_id":"themes/material-x/layout/page.ejs","hash":"460679d01c1ede4a8cb951150bc15cb69a285638","modified":1561474028054},{"_id":"themes/material-x/layout/post.ejs","hash":"460679d01c1ede4a8cb951150bc15cb69a285638","modified":1561474028054},{"_id":"themes/material-x/layout/list.ejs","hash":"b1cdf7bf3328c6864730b7f96745485d0c53c73f","modified":1561474028053},{"_id":"themes/material-x/source/style.less","hash":"ad83c432a6093d8c66998fa211192076943372be","modified":1561474028078},{"_id":"themes/material-x/languages/zh-TW.yml","hash":"903a3fb9c425da7b19ecdaad9ccda9b873a7175f","modified":1561474028019},{"_id":"source/_posts/ABP/ABP代码生成器.md","hash":"1ccc729055926c346e1ac02aba4c23bd016b1fbb","modified":1561474027903},{"_id":"source/_posts/ABP/ABP使用文档.md","hash":"498515243be90acf0e005761f36d8681e98b175d","modified":1561476470247},{"_id":"source/_posts/ABP/ABP源码解析.md","hash":"8e7257c81237e61e6e3d2ab88ddb8a019f5368af","modified":1561476470248},{"_id":"source/_posts/ABP/记一次.NET 与R语言交互.md","hash":"b4717a3e9901da4c7ee66a651470e905bc874fc3","modified":1561474027901},{"_id":"source/_posts/大前端/TypeScript学习记录- 数据类型基础.md","hash":"44d0156d597e36d9cd3a7441f4bc24f6b71af3ec","modified":1561474027913},{"_id":"source/_posts/命令行专题/Git的使用学习.md","hash":"6a00b0b78763cbb97b48f231f63642940419addb","modified":1561474027910},{"_id":"source/_posts/大前端/hexo-theme-material-x-gitalk.md","hash":"5ab4c2298ca6bac05eb76f0f25207eef26ab00d4","modified":1561474027914},{"_id":"source/_posts/大前端/好用的前后端类库及安装包整合下载.md","hash":"06e1d8bff13e2e40e4414a5bff404488cc1fc5f5","modified":1561474027914},{"_id":"themes/material-x/layout/tag.ejs","hash":"3a39810164a52646e8b7dfde5d1e2218d108d641","modified":1561474028055},{"_id":"source/_posts/命令行专题/收集文档.md","hash":"496c683c65c6dcb1be89881f76482a95ebcc26a7","modified":1561474027912},{"_id":"source/_posts/大后端/ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker.md","hash":"026ccd84a41cdbde78bd27073653fb89cfed4bc7","modified":1561474027915},{"_id":"source/_posts/大后端/Docker 、nginx 学习记录.md","hash":"8c6b47f0697da41747f4536d7c1f1b0fc59a05d7","modified":1561474027916},{"_id":"source/_posts/命令行专题/博客记录Rabbitmq、Mongodb.md","hash":"2fe7076cd608958ad4f6677f7bae75bd7656bf9a","modified":1561474027911},{"_id":"source/_posts/命令行专题/日常命令行记录.md","hash":"2c75cc0e21d2942cae039ab7de1d34383a462ff4","modified":1561474027912},{"_id":"source/_posts/大后端/Navicat Premium 12  破解版免费下载.md","hash":"e92e368166940ef71d0fe07ffefb775c6cdbcad2","modified":1561474027919},{"_id":"source/_posts/大后端/MySQL学习记录.md","hash":"6a50b6337e4c8cc8807d0e64f2bf0ec30d2381df","modified":1561477783353},{"_id":"themes/material-x/layout/layout.ejs","hash":"95914e8b45fc2463db79f45bf5d1aa849fc503c7","modified":1561474028052},{"_id":"source/_posts/大后端/RazorEngine代码生成原理介绍.md","hash":"42356e5f28eeaefb4c2ddb06e60cc009f62bf88e","modified":1561474027924},{"_id":"source/_posts/大后端/工作内容Rshiny框架使用.md","hash":"db7b128d0990c9db2cb02d56edb76b165069032b","modified":1561474027925},{"_id":"source/_posts/大后端/Visual Studio如何增加版权信息.md","hash":"e82357e6b51965b88e1a52a0f02781aee4045d97","modified":1561474027925},{"_id":"source/_posts/重新出发/2. 重新出发-learn webpack.md","hash":"0c033ebcc143f6101e62024546ef9fdd3e024180","modified":1561474027928},{"_id":"source/_posts/大后端/Node.js  功能点树形结构操作.md","hash":"4cd3cfb6e8a0d7d1b9ad7a60f0fba4d0530603f2","modified":1561474027920},{"_id":"themes/material-x/layout/_meta/author.ejs","hash":"91065b00d1750c4bf8c2a3d7088dc6e4ae552ad5","modified":1561474028022},{"_id":"themes/material-x/layout/_meta/categories.ejs","hash":"f2ad0cda938967adc5b1e39df3a4aec957d2eb04","modified":1561474028023},{"_id":"themes/material-x/layout/_meta/counter.ejs","hash":"ea502a888621527bc29f354309045d6c1dacdccb","modified":1561474028023},{"_id":"themes/material-x/layout/_meta/date.ejs","hash":"d6d4f289112635ea09666194346ef490996f3649","modified":1561474028024},{"_id":"themes/material-x/layout/_meta/music.ejs","hash":"a7e2b092a0f393642eb5c5802f24ec77ea205e74","modified":1561474028024},{"_id":"themes/material-x/layout/_meta/share.ejs","hash":"aab1d38c29a430aaaa65646b4d675759cf38c411","modified":1561474028025},{"_id":"themes/material-x/layout/_meta/tags.ejs","hash":"dbf843e6ccdfcd97bf574b7f551a163296b732ed","modified":1561474028026},{"_id":"themes/material-x/layout/_meta/thumbnail.ejs","hash":"8b64ad50296ba8cbf629fed9c2943ea32439114f","modified":1561474028027},{"_id":"themes/material-x/layout/_meta/title.ejs","hash":"ac91fc41d59a7e93ab6f30a13ea5dd05c33e6131","modified":1561474028027},{"_id":"themes/material-x/layout/_meta/top.ejs","hash":"2f323ca76d6bacd14e4799bcf3b6e0c2ffe2f8c5","modified":1561474028028},{"_id":"themes/material-x/layout/_meta/updated.ejs","hash":"ba49cba21102dd77b0e6dd68787dc153163fe8cf","modified":1561474028029},{"_id":"themes/material-x/layout/_cover/search.ejs","hash":"05814a2f4b0867d811988eefdd4900f522146c6c","modified":1561474028021},{"_id":"themes/material-x/layout/_partial/archive.ejs","hash":"2ce63582ac3b9730aa7f62acee992df04c080d44","modified":1561474028030},{"_id":"themes/material-x/layout/_partial/categories.ejs","hash":"7c7b6cc39e1aa8d01cc2e94d1195bb7620bb68ea","modified":1561474028031},{"_id":"themes/material-x/layout/_partial/cover.ejs","hash":"324bcfe643a8aceaf8044c3295643a0bbee4671b","modified":1561474028031},{"_id":"source/_posts/重新出发/1.重新出发-起航.md","hash":"c190a6d3851b92904173514155162556a3e01475","modified":1561786138619},{"_id":"themes/material-x/layout/_partial/article.ejs","hash":"97b6abd08ca0754dce4ec140c64ecf45fb6dc065","modified":1561474028030},{"_id":"source/_posts/工作/现阶段的痛点.md","hash":"1fba3c1f7782fb7572f9a0f09799d6de6f6d29ac","modified":1561474027927},{"_id":"themes/material-x/layout/_partial/head.ejs","hash":"0f0200815e4893620c92008fe2a1d8f87f7dbcb0","modified":1561474028033},{"_id":"themes/material-x/layout/_partial/header.ejs","hash":"6b3c544d208803fe6f0b1f8ebda08fed7eba44d7","modified":1561474028035},{"_id":"themes/material-x/layout/_partial/mathjax.ejs","hash":"25f3253d4bcfe32bc0d291901f00213b199dd635","modified":1561474028035},{"_id":"themes/material-x/layout/_partial/post.ejs","hash":"95c718b34d13a0117ae005ea500e86d8a505376a","modified":1561474028036},{"_id":"themes/material-x/layout/_partial/meta.ejs","hash":"c0dea734faf8fbb6ce6b2abccfa95ba8be80bdec","modified":1561474028036},{"_id":"themes/material-x/layout/_partial/footer.ejs","hash":"9488d10289ddf772b2a24ef9dfdd5e67f83cab8c","modified":1561785878707},{"_id":"themes/material-x/layout/_widget/category.ejs","hash":"7a6b395793ec15199b439ee64284d34e9305389c","modified":1561474028044},{"_id":"themes/material-x/layout/_partial/scripts.ejs","hash":"b1604a087bbbf30d89c808d117292457d2d56db4","modified":1561474028038},{"_id":"themes/material-x/layout/_partial/side.ejs","hash":"a7cdcb1f67cda9983f6ab6f8d39e407228b1620d","modified":1561474028039},{"_id":"themes/material-x/layout/_widget/grid.ejs","hash":"a025672a7095c758f546d336c8d62f7c3e6e92a0","modified":1561474028044},{"_id":"themes/material-x/layout/_widget/header.ejs","hash":"5f900f079934857adc6b4fece5603bd8c3dc9369","modified":1561474028045},{"_id":"themes/material-x/layout/_widget/plain.ejs","hash":"0e93657baa1ff8afde49cf2b7cb2d148c047f5a7","modified":1561474028047},{"_id":"themes/material-x/layout/_widget/related_posts.ejs","hash":"ba7a6c17ed2518fda0af30ae7f5c32836909505a","modified":1561474028048},{"_id":"themes/material-x/layout/_widget/tagcloud.ejs","hash":"71c35757c14e384b32561e0f81d212ad374f2a06","modified":1561474028049},{"_id":"themes/material-x/layout/_widget/toc.ejs","hash":"79c7329cc161b9409d5cac6ccd1158827db7ca68","modified":1561474028049},{"_id":"themes/material-x/layout/_widget/music.ejs","hash":"1e252f962126d233adff8645d47f372bda7f8439","modified":1561474028046},{"_id":"themes/material-x/layout/_widget/list.ejs","hash":"c137ee3ef1c5233d724dc84ab7543e88391656f5","modified":1561474028046},{"_id":"themes/material-x/layout/_third-party/comments.ejs","hash":"1c6afb5fb685066301c2be1d27b1b32a805efb37","modified":1561474028041},{"_id":"themes/material-x/layout/_third-party/clipboard.ejs","hash":"b160a4f594421409ad2fcd81b79746664e85cfe9","modified":1561474028040},{"_id":"themes/material-x/layout/_third-party/aplayer.ejs","hash":"5f555babdf7ea58e536c203f1351536598e68e7f","modified":1561474028040},{"_id":"themes/material-x/layout/_third-party/fancybox.ejs","hash":"b60b8006bbcf31223c6cc28d9794f101c492a1c0","modified":1561474028042},{"_id":"themes/material-x/layout/_third-party/share.ejs","hash":"b553039a4fb38c9dfbe87fe61034a81f685bd590","modified":1561474028042},{"_id":"themes/material-x/layout/_widget/author.ejs","hash":"3f1a15fb55ac9a08b259c9de66e9d40f2dbb2b47","modified":1561785892853},{"_id":"themes/material-x/source/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1561474028057},{"_id":"themes/material-x/source/js/search.js","hash":"8ed18241a931a2e9903105383fcb2c281c3a7640","modified":1561474028064},{"_id":"themes/material-x/source/js/app.js","hash":"9effa2ff626244de1418c6ecbe3fdf39cde5f3f8","modified":1561474028063},{"_id":"themes/material-x/source/less/_archive.less","hash":"d46a24a227c7506e848a0637de34a0ad45af4493","modified":1561474028066},{"_id":"themes/material-x/source/less/_article.less","hash":"e934577e73da0ab228e049408a9908ea347c1a1f","modified":1561474028067},{"_id":"themes/material-x/source/less/_base.less","hash":"49e0e524ad192f8c40e8b99bf16fbb487d925954","modified":1561474028067},{"_id":"themes/material-x/source/less/_footer.less","hash":"cab4b448dd6e03979a40205b0f99ff6656c2b32d","modified":1561474028070},{"_id":"themes/material-x/source/less/_color.less","hash":"c799d70aeb10e759e918377bcce856d1d5929b71","modified":1561474028068},{"_id":"themes/material-x/source/less/_defines.less","hash":"0233cb515429823a4d8fad339d44d71b14295550","modified":1561474028069},{"_id":"themes/material-x/source/less/_header.less","hash":"da6a5ba4ed9dc53fa971ff118db962e1fe0b004b","modified":1561474028071},{"_id":"themes/material-x/source/less/_layout.less","hash":"081ef4c14d7069ea8bb2fb9f939176c21781ac54","modified":1561474028072},{"_id":"themes/material-x/source/less/_fonts.less","hash":"cd172af2904b6e2d0d8a92a92811d060d7e292d2","modified":1561474028069},{"_id":"themes/material-x/source/less/_pagination.less","hash":"616db8447e79e902bf7b207d1fe3c2fd6a4785b9","modified":1561474028074},{"_id":"themes/material-x/source/less/_main.less","hash":"9f2b99d48eadefb45af0746619758eedcddbf19f","modified":1561474028073},{"_id":"themes/material-x/source/less/_search.less","hash":"8abe118f822150ff5ebc1a905621c95f11598530","modified":1561474028075},{"_id":"themes/material-x/source/less/_normalize.less","hash":"9c4040f1c8668fdcf2c7798c1f51b3f658ddbadf","modified":1561474028073},{"_id":"themes/material-x/source/less/_side.less","hash":"5a23fa0d9d939dd1a20ce982a4d28e495fb8168c","modified":1561474028075},{"_id":"themes/material-x/source/less/_links.less","hash":"006a47bf55b0db09fff1b71effe719ec394eec51","modified":1561474028072},{"_id":"themes/material-x/source/less/_toc.less","hash":"74270e16434e66105cd7ac2b2822d83bd19930ec","modified":1561474028076},{"_id":"themes/material-x/layout/_partial/post/word.ejs","hash":"8ea350c23258bc3108fdad5bb6d0c2367a7816dd","modified":1561474028037},{"_id":"themes/material-x/source/js/volantis.js","hash":"4406cbf00d15eae61d0a3822796612f01cdd101f","modified":1561474028065},{"_id":"themes/material-x/source/less/_typo.less","hash":"f597c0213ff6d10d86f1bd8d71018a2a604dde71","modified":1561474028077},{"_id":"themes/material-x/source/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1561474028059},{"_id":"themes/material-x/source/less/_tog.less","hash":"142a6697abe2f423aae365e7c799a4a78b519a28","modified":1561474028077},{"_id":"themes/material-x/source/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1561474028062},{"_id":"public/atom.xml","hash":"20385742227016c51ce0690de089a257bb4acea4","modified":1561524932655},{"_id":"public/search.xml","hash":"ab0bb799adfc3cf2e185cd227fc1aff8bc79fb89","modified":1561524932655},{"_id":"public/content.json","hash":"cfd4c4e981b816b742a450efb8b9ee1feb515035","modified":1561524932924},{"_id":"public/about/index.html","hash":"8567115d28012aebc69a8f4bc2f2de56c1629053","modified":1561524933664},{"_id":"public/categories/index.html","hash":"e0df26c5970c5ad5c5de547c8416cdae1f8782a7","modified":1561524933665},{"_id":"public/mylist/index.html","hash":"1cc918e750e38331ea1549008f491a6fd6cfd599","modified":1561524933904},{"_id":"public/404.html","hash":"18ba3a888265842b8a2f3836e5bee80fd3d00367","modified":1561524933904},{"_id":"public/friends/index.html","hash":"4bafbc4035eafb83100214a72fb3b187f54a17d4","modified":1561524933913},{"_id":"public/tags/index.html","hash":"3e5d2dfe9e682c7e39fbe36f5d4c9f6737f70d54","modified":1561524933913},{"_id":"public/2019/06/25/命令行专题/Git的使用学习/index.html","hash":"ef9256c528f99666dc4a29689ca7f4b0bac03ed6","modified":1561524933913},{"_id":"public/2019/06/25/大前端/hexo-theme-material-x-gitalk/index.html","hash":"bd6f501ded7c31f3398acf7b92b0b17d530e6478","modified":1561524933913},{"_id":"public/2019/06/24/重新出发/2. 重新出发-learn webpack/index.html","hash":"136c4cc02a5bf6c370c1963c7068490ab504883a","modified":1561524933913},{"_id":"public/2019/06/17/重新出发/1.重新出发-起航/index.html","hash":"004fa05ffb678833cb6635e76de55bd44f7a83e0","modified":1561524933913},{"_id":"public/2019/06/12/工作/现阶段的痛点/index.html","hash":"060fb210163d3e01c6051b2b0165c29214c0c9cb","modified":1561524933913},{"_id":"public/2019/06/12/ABP/ABP代码生成器/index.html","hash":"a3e6e19f504fe22663b1c4e0e72e44628a043056","modified":1561524933913},{"_id":"public/2019/06/12/大前端/TypeScript学习记录- 数据类型基础/index.html","hash":"a6e6131e497e68cc083f766e2a895d80426c84ba","modified":1561524933913},{"_id":"public/2019/06/12/大后端/Visual Studio如何增加版权信息/index.html","hash":"af9d504280f4cef45dce93a3e57736dd93b5549e","modified":1561524933913},{"_id":"public/2019/06/12/大后端/RazorEngine代码生成原理介绍/index.html","hash":"f4d0d12fdf332b9fd627b3cdaf1ef028f90a8ae4","modified":1561524933913},{"_id":"public/2019/06/10/大后端/Docker 、nginx 学习记录/index.html","hash":"70e096ba2f2ae7a8c9145990c14220712467e98b","modified":1561524933914},{"_id":"public/2019/06/10/大前端/好用的前后端类库及安装包整合下载/index.html","hash":"ddf51e3a818afdf75756ff3d1048bd84d650c9ab","modified":1561524933914},{"_id":"public/2019/06/09/大后端/ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker/index.html","hash":"b8b359a5f36f459ecd8d3a53bd9015fed80379f8","modified":1561524933914},{"_id":"public/2019/05/15/命令行专题/日常命令行记录/index.html","hash":"41e1b00dbaa6bce61fbd4519f1cce6b3262cfae1","modified":1561524933914},{"_id":"public/2019/05/08/命令行专题/博客记录Rabbitmq、Mongodb/index.html","hash":"9dc922bacf6953d483e5e5861a62e2bd63a73d1a","modified":1561524933914},{"_id":"public/2019/03/24/命令行专题/收集文档/index.html","hash":"9dfa021ad7c094cb81da936119469e0e5889a75a","modified":1561524933914},{"_id":"public/2019/03/12/ABP/ABP使用文档/index.html","hash":"654fddd784999a7242e28065b52bb868f4d36d11","modified":1561524933914},{"_id":"public/2019/01/09/ABP/ABP源码解析/index.html","hash":"54889ca97e28045daf79a79f3cbacd6b20c8b219","modified":1561524933914},{"_id":"public/2018/12/26/大后端/工作内容Rshiny框架使用/index.html","hash":"4f1ea5183b0680924f4d4c76b333db783cc56867","modified":1561524933914},{"_id":"public/2018/12/02/大后端/MySQL学习记录/index.html","hash":"a9d3a7e204d4431de486a1ec778eb82a370c82c3","modified":1561524933914},{"_id":"public/2018/07/03/ABP/记一次.NET 与R语言交互/index.html","hash":"f6be1bf86e0b850316a3f90c771cd66a35ced148","modified":1561524933914},{"_id":"public/2018/06/02/大后端/Navicat Premium 12  破解版免费下载/index.html","hash":"28d87f9fd216428bfb940285cb1ef308980e3e0e","modified":1561524933914},{"_id":"public/2017/01/10/大后端/Node.js  功能点树形结构操作/index.html","hash":"18b481314a13850974a35272bf74f58938256b19","modified":1561524933914},{"_id":"public/archives/index.html","hash":"26545118103c8e57b6e7ce3c96a39a2cce8d0bf4","modified":1561524933914},{"_id":"public/archives/page/2/index.html","hash":"26545118103c8e57b6e7ce3c96a39a2cce8d0bf4","modified":1561524933914},{"_id":"public/archives/page/3/index.html","hash":"26545118103c8e57b6e7ce3c96a39a2cce8d0bf4","modified":1561524933914},{"_id":"public/archives/2017/index.html","hash":"a542024feba329875dfc3de8eb762b01b328fcb4","modified":1561524933914},{"_id":"public/archives/2017/01/index.html","hash":"c62f94cf3646a05246eedf93d4b91ba294c4e72f","modified":1561524933915},{"_id":"public/archives/2018/index.html","hash":"dd36fe3c9b9d781dc28f05aae3ceaacab67bfe32","modified":1561524933915},{"_id":"public/archives/2018/06/index.html","hash":"72fc2f1932d5d90641f9cf027b478197a8292d83","modified":1561524933915},{"_id":"public/archives/2018/07/index.html","hash":"588284eca8b9625d7434160095b10bc30821ff28","modified":1561524933915},{"_id":"public/archives/2018/12/index.html","hash":"9e6dde8f02104a2cb31ce4db66079d63215d444d","modified":1561524933915},{"_id":"public/archives/2019/index.html","hash":"bbc975429b06666b21ad9a0914ecf6cb1c0e49af","modified":1561524933915},{"_id":"public/archives/2019/page/2/index.html","hash":"5a42b4fbf44cfac8b0ce6d793d0c4a1b1441d492","modified":1561524933922},{"_id":"public/archives/2019/01/index.html","hash":"fe7a8a823190add2e056634982051d2f01e1d720","modified":1561524933922},{"_id":"public/archives/2019/03/index.html","hash":"7b1eb9e46366fc0217df3e62288805c3a6f56223","modified":1561524933922},{"_id":"public/archives/2019/05/index.html","hash":"55e1f166d7a818a707da43107ffb97015ec30b9b","modified":1561524933922},{"_id":"public/archives/2019/06/index.html","hash":"216f80a88ecee39e8b802ef4fcdffe6080ff007c","modified":1561524933922},{"_id":"public/archives/2019/06/page/2/index.html","hash":"3ee1c45aabcc6baa55c1a8c88b982103fb701803","modified":1561524933922},{"_id":"public/categories/ABP/index.html","hash":"335b460361e549fe162dd3a625586243f95a89d8","modified":1561524933922},{"_id":"public/categories/大前端/index.html","hash":"1ee4a7d00153241a2821acc5a52f6737162b1da4","modified":1561524933922},{"_id":"public/categories/hexo/index.html","hash":"ea0aaede2cacd5a9ff33fd9cce27768fb7a2624c","modified":1561524933922},{"_id":"public/categories/Git/index.html","hash":"9c305c888ae7b59c0ef7823acb9fd65f28c4ec4e","modified":1561524933922},{"_id":"public/categories/日常问题/index.html","hash":"1e8cc7cd757eaef646e8061d7cec5f47405ae248","modified":1561524933922},{"_id":"public/categories/大后端/index.html","hash":"e6c24073975f3a6f868bd2cce338392597440a9e","modified":1561524933923},{"_id":"public/categories/命令行/index.html","hash":"417a7d304b7e11d8d55d965f0f9795a3948ddcb3","modified":1561524933923},{"_id":"public/categories/学习记录/index.html","hash":"ee0cec4948e6bc70a790500b1ce4ec1a4244b0ba","modified":1561524933923},{"_id":"public/categories/MySQL/index.html","hash":"95f134b3b9a0d304b244edd6eb367dd4bab95b17","modified":1561524933923},{"_id":"public/categories/NET-Framework/index.html","hash":"50079911d8b7157ff618ed606854e1433a7891bd","modified":1561524933923},{"_id":"public/categories/Visual-Studio/index.html","hash":"ca3cb363d3ab553ec4353c2ca6c762e654a271a4","modified":1561524933923},{"_id":"public/categories/重新出发/index.html","hash":"c52083b98a1bc625d38fbc9df982ac3e9d60f605","modified":1561524933923},{"_id":"public/categories/工作/index.html","hash":"087f2b75b5789d0ca0c3cd9377abf9e60a077fce","modified":1561524933923},{"_id":"public/page/2/index.html","hash":"9df5f9a72106c998eca72a8d8d1d18dd0699b26e","modified":1561524933923},{"_id":"public/page/3/index.html","hash":"fdf2e2c68686c3c8fabae0b6614e970aeca8e78f","modified":1561524933923},{"_id":"public/tags/ABP-代码生成器/index.html","hash":"b3f74a161c4e83648c5fa114f0c6eee55de31161","modified":1561524933923},{"_id":"public/tags/ABP/index.html","hash":"f1d4484f1d0047a04d0dd5c8c3c05fe11f95d93b","modified":1561524933924},{"_id":"public/tags/hexo/index.html","hash":"a75e32331cdbdc298f7d34f9015b4546dc2a97f0","modified":1561524933924},{"_id":"public/tags/material-x/index.html","hash":"16ef31ce74181153969bc1904052ca7f4cf4fdcd","modified":1561524933924},{"_id":"public/index.html","hash":"55ca825936f0c6d69dae6b7cdf7e68292682c81b","modified":1561524933924},{"_id":"public/tags/gitalk/index.html","hash":"13943a95fa33f9bbf4d8216074397c296aba16e2","modified":1561524933924},{"_id":"public/tags/Git/index.html","hash":"356ed68e0c15a1e9bee676eefb845948189f7143","modified":1561524933924},{"_id":"public/tags/TypeScript/index.html","hash":"1dc66d27fa789cea4bad3aa5f959fa38c61ed5e7","modified":1561524933924},{"_id":"public/tags/Ubuntu/index.html","hash":"f8536c6766d00d6e96683cbb05ba3d8f6798835c","modified":1561524933924},{"_id":"public/tags/Redis/index.html","hash":"c75a52994d719eacd5016746754339d78b1e052c","modified":1561524933924},{"_id":"public/tags/IIS/index.html","hash":"6fdeb5325d085a2c442e83097bef3045bda0b32b","modified":1561524933924},{"_id":"public/tags/ASP-NET-Core/index.html","hash":"29f87ba122b768f8774bb3999861083224e45765","modified":1561524933924},{"_id":"public/tags/Docker/index.html","hash":"8e3967517646fed4f436423bfa9386c11eb1390d","modified":1561524933924},{"_id":"public/tags/RabbitMQ/index.html","hash":"a09b916e2db2aa3d74c76f7e7d211d0d618ad5a4","modified":1561524933925},{"_id":"public/tags/Mongodb/index.html","hash":"7ae573e82e70925257924fa51ec9f909869174cd","modified":1561524933925},{"_id":"public/tags/MySQL/index.html","hash":"78d6a0e68d0ff376804af652fca239284635814b","modified":1561524933925},{"_id":"public/tags/nginx/index.html","hash":"f20addaefaf27f27048b27e63caa8e855cf2815d","modified":1561524933925},{"_id":"public/tags/Navicat-Premium-12/index.html","hash":"904466b97ad09eb3b097946058c41a750bb19407","modified":1561524933925},{"_id":"public/tags/NET-Framework/index.html","hash":"619b02fc3a5aba40da7ecaf86695157f6f6b542a","modified":1561524933925},{"_id":"public/tags/RazorEngine/index.html","hash":"21429d3fc3b458cee9cc7a61f0f7df1447c1bd35","modified":1561524933925},{"_id":"public/tags/代码生成器/index.html","hash":"93d56d6c13135f0e47735f86acdbaaad21286a74","modified":1561524933925},{"_id":"public/tags/Rshiny/index.html","hash":"d685a4423b6c67f07a8f6cca635332152daf3bd6","modified":1561524933925},{"_id":"public/tags/NET/index.html","hash":"592e99d391ee6d8901d039b0eb80833bd50de96f","modified":1561524933925},{"_id":"public/tags/Visual-Studio/index.html","hash":"d8b360630d27a63e33b451567381bff5ffd903ae","modified":1561524933925},{"_id":"public/tags/Node-js/index.html","hash":"80bb6aa3d8053ad9a0abd62b7f1098a29bebd72d","modified":1561524933925},{"_id":"public/tags/webpack/index.html","hash":"dc5d897687b0e5c235f51d945625c213e09afa4c","modified":1561524933926},{"_id":"public/tags/NET-Core/index.html","hash":"3ca013c9c6cf218a6af8fbdb89b72b40c373af0a","modified":1561524933926},{"_id":"public/tags/账号安全/index.html","hash":"e75495d716c748bf515fba8c4e435839f066e36a","modified":1561524933926},{"_id":"public/tags/隐私/index.html","hash":"b0e367ba7a09150bf5e68de7392b32b6cefad596","modified":1561524933926},{"_id":"public/tags/R-NET/index.html","hash":"ff051fee594cedd22c8392625bd84d78067916e0","modified":1561524933926},{"_id":"public/fonts/Monaco.ttf","hash":"d4de9305ce9e916ece179c3ab3b1faf80cc52bbb","modified":1561524933943},{"_id":"public/js/app.js","hash":"20ba53cc54035dd091605508155ce54f8491f34e","modified":1561524933953},{"_id":"public/fonts/Skranji-Regular.ttf","hash":"485dc033e34a5a92a45ffe5839514f0471b18208","modified":1561524933986},{"_id":"public/js/search.js","hash":"603215c3ae9d2f3c019753dd6c9d228302505bb3","modified":1561524933991},{"_id":"public/fonts/Ubuntu-Regular.ttf","hash":"b100b2ed912a91e4d0a7c5f5309fe8ad7b3a2dd8","modified":1561524934063},{"_id":"public/style.css","hash":"73210a2a065346668b89471f55efff2d66b44d01","modified":1561524934325},{"_id":"public/js/volantis.js","hash":"28fcd2db5a696d2f327eb53d95e711c3f2574240","modified":1561524934372},{"_id":"source/_posts/devops/travis-ci 持续集成hexo至github pages、腾讯云（ESC).md","hash":"75475b0262161928992ef134d6ba6ff2ad15379e","modified":1561787774517}],"Category":[{"name":"ABP","_id":"cjxcrmitn000800uxy5hcr2sy"},{"name":"大前端","_id":"cjxcrmitx000i00uxmln0w03h"},{"name":"hexo","_id":"cjxcrmiu0000p00uxl638inyh"},{"name":"Git","_id":"cjxcrmiu3000u00ux8ja1x5nb"},{"name":"日常问题","_id":"cjxcrmiu5000z00uxsb89o0qb"},{"name":"大后端","_id":"cjxcrmiu8001700uxrwg1upv1"},{"name":"命令行","_id":"cjxcrmiua001e00ux6f6e3yjn"},{"name":"学习记录","_id":"cjxcrmiud001k00uxz6e55p79"},{"name":"MySQL","_id":"cjxcrmiue001o00ux0an7vw01"},{"name":".NET Framework","_id":"cjxcrmiug001u00uxjj2mgwe9"},{"name":"Visual Studio","_id":"cjxcrmiui002200uxyj2f05d7"},{"name":"重新出发","_id":"cjxcrmiuj002700ux1izhwc81"},{"name":"工作","_id":"cjxcrmiuk002f00ux3ekzvo4s"},{"name":"DevOps","_id":"cjxgyeoqd0001hsuxbf2bzmqn"}],"Data":[],"Page":[{"layout":"page","title":"404 Not Found","body":["article","comments"],"meta":{"header":false,"footer":false},"sidebar":false,"valine":{"path":"/404.html","placeholder":"请留言告诉我您要访问哪个页面找不到了"},"gitalk":{"id":"/404"},"_content":"\n# <center>**404 Not Found**</center>\n\n<br>\n\n# <center>很抱歉，您访问的页面不存在</center>\n\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>","source":"404.md","raw":"---\nlayout: page\ntitle: 404 Not Found\nbody: [article, comments]\nmeta:\n  header: false\n  footer: false\nsidebar: false\nvaline:\n  path: /404.html\n  placeholder: 请留言告诉我您要访问哪个页面找不到了\ngitalk:\n  id: /404\n---\n\n# <center>**404 Not Found**</center>\n\n<br>\n\n# <center>很抱歉，您访问的页面不存在</center>\n\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>","date":"2019-06-25T14:47:07.897Z","updated":"2019-06-25T14:47:07.897Z","path":"404.html","comments":1,"_id":"cjxcrmis3000000uxq8p2ph5u","content":"<h1 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center><strong>404 Not Found</strong></center></h1><br>\n\n<h1 id=\"很抱歉，您访问的页面不存在\"><a href=\"#很抱歉，您访问的页面不存在\" class=\"headerlink\" title=\"很抱歉，您访问的页面不存在\"></a><center>很抱歉，您访问的页面不存在</center></h1><center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center><strong>404 Not Found</strong></center></h1><br>\n\n<h1 id=\"很抱歉，您访问的页面不存在\"><a href=\"#很抱歉，您访问的页面不存在\" class=\"headerlink\" title=\"很抱歉，您访问的页面不存在\"></a><center>很抱歉，您访问的页面不存在</center></h1><center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>"},{"layout":"page","title":"关于","valine":{"placeholder":"有什么想对我说的呢？"},"_content":"\n## 言论\n\n- 你如今的气质里，藏着你走过的路，读过的书，和爱过的人\n- 了不起的盖茨比\n\n\n\n## Github打磨\n 我的github还没什么特别有价值的东西，我需要不断地打磨自己的技术\n \n - 开源主页 [https://github.com/luoyunchong](https://github.com/luoyunchong)\n - 一个博客，.NET 版本，[http://igeekfan.cn/](http://igeekfan.cn/)\n - 一个ABP的代码生成器，使用 **.NET Core2.2**、Razor Pages、RazorEngine的cshtml的模板，配置生成相应的代码 [https://github.com/i542873057/SJNScaffolding]https://github.com/i542873057/SJNScaffolding)\n - 基于abp (.NET版本)的前端js、结合easyui的前端js，可打包成bower，之前为了统一不同项目下的前端基础类库。 [https://luoyunchong.github.io/staticfiles/](https://luoyunchong.github.io/staticfiles/)\n - 基于 ABP vNext  的MicroserviceDemo、增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能 \n - 一个使用hexo的博客,采用Material X主题，docs分支为博客源文件，发布github Pages [https://luoyunchong.github.io/](https://luoyunchong.github.io/)\n - 一个基于 ASP **.NET Core 2.2** 的基础集成方案 [https://github.com/luoyunchong/BasicTemplate](https://github.com/luoyunchong/BasicTemplate)\n    *  JWT集成\n    *  EF实现事务一致性\n    *  统一的创建人、创建时间、删除人、删除时间，软删除\n    *  集成 EF Core MySQL版本\n    *  AutoMapper集成 \n","source":"about/index.md","raw":"---\nlayout: page\ntitle: 关于\n# body: [article, grid, comments]\nvaline:\n  placeholder: 有什么想对我说的呢？\n# sidebar: false\n---\n\n## 言论\n\n- 你如今的气质里，藏着你走过的路，读过的书，和爱过的人\n- 了不起的盖茨比\n\n\n\n## Github打磨\n 我的github还没什么特别有价值的东西，我需要不断地打磨自己的技术\n \n - 开源主页 [https://github.com/luoyunchong](https://github.com/luoyunchong)\n - 一个博客，.NET 版本，[http://igeekfan.cn/](http://igeekfan.cn/)\n - 一个ABP的代码生成器，使用 **.NET Core2.2**、Razor Pages、RazorEngine的cshtml的模板，配置生成相应的代码 [https://github.com/i542873057/SJNScaffolding]https://github.com/i542873057/SJNScaffolding)\n - 基于abp (.NET版本)的前端js、结合easyui的前端js，可打包成bower，之前为了统一不同项目下的前端基础类库。 [https://luoyunchong.github.io/staticfiles/](https://luoyunchong.github.io/staticfiles/)\n - 基于 ABP vNext  的MicroserviceDemo、增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能 \n - 一个使用hexo的博客,采用Material X主题，docs分支为博客源文件，发布github Pages [https://luoyunchong.github.io/](https://luoyunchong.github.io/)\n - 一个基于 ASP **.NET Core 2.2** 的基础集成方案 [https://github.com/luoyunchong/BasicTemplate](https://github.com/luoyunchong/BasicTemplate)\n    *  JWT集成\n    *  EF实现事务一致性\n    *  统一的创建人、创建时间、删除人、删除时间，软删除\n    *  集成 EF Core MySQL版本\n    *  AutoMapper集成 \n","date":"2019-06-29T05:30:08.887Z","updated":"2019-06-29T05:30:08.887Z","path":"about/index.html","_id":"cjxcrmist000100uxc6j00he3","comments":1,"content":"<h2 id=\"言论\"><a href=\"#言论\" class=\"headerlink\" title=\"言论\"></a>言论</h2><ul>\n<li>你如今的气质里，藏着你走过的路，读过的书，和爱过的人</li>\n<li>了不起的盖茨比</li>\n</ul>\n<h2 id=\"Github打磨\"><a href=\"#Github打磨\" class=\"headerlink\" title=\"Github打磨\"></a>Github打磨</h2><p> 我的github还没什么特别有价值的东西，我需要不断地打磨自己的技术</p>\n<ul>\n<li>开源主页 <a href=\"https://github.com/luoyunchong\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong</a></li>\n<li>一个博客，.NET 版本，<a href=\"http://igeekfan.cn/\" target=\"_blank\" rel=\"noopener\">http://igeekfan.cn/</a></li>\n<li>一个ABP的代码生成器，使用 <strong>.NET Core2.2</strong>、Razor Pages、RazorEngine的cshtml的模板，配置生成相应的代码 [<a href=\"https://github.com/i542873057/SJNScaffolding]https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding]https://github.com/i542873057/SJNScaffolding</a>)</li>\n<li>基于abp (.NET版本)的前端js、结合easyui的前端js，可打包成bower，之前为了统一不同项目下的前端基础类库。 <a href=\"https://luoyunchong.github.io/staticfiles/\">https://luoyunchong.github.io/staticfiles/</a></li>\n<li>基于 ABP vNext  的MicroserviceDemo、增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能 </li>\n<li>一个使用hexo的博客,采用Material X主题，docs分支为博客源文件，发布github Pages <a href=\"https://luoyunchong.github.io/\">https://luoyunchong.github.io/</a></li>\n<li>一个基于 ASP <strong>.NET Core 2.2</strong> 的基础集成方案 <a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/BasicTemplate</a><ul>\n<li>JWT集成</li>\n<li>EF实现事务一致性</li>\n<li>统一的创建人、创建时间、删除人、删除时间，软删除</li>\n<li>集成 EF Core MySQL版本</li>\n<li>AutoMapper集成 </li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"言论\"><a href=\"#言论\" class=\"headerlink\" title=\"言论\"></a>言论</h2><ul>\n<li>你如今的气质里，藏着你走过的路，读过的书，和爱过的人</li>\n<li>了不起的盖茨比</li>\n</ul>\n<h2 id=\"Github打磨\"><a href=\"#Github打磨\" class=\"headerlink\" title=\"Github打磨\"></a>Github打磨</h2><p> 我的github还没什么特别有价值的东西，我需要不断地打磨自己的技术</p>\n<ul>\n<li>开源主页 <a href=\"https://github.com/luoyunchong\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong</a></li>\n<li>一个博客，.NET 版本，<a href=\"http://igeekfan.cn/\" target=\"_blank\" rel=\"noopener\">http://igeekfan.cn/</a></li>\n<li>一个ABP的代码生成器，使用 <strong>.NET Core2.2</strong>、Razor Pages、RazorEngine的cshtml的模板，配置生成相应的代码 [<a href=\"https://github.com/i542873057/SJNScaffolding]https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding]https://github.com/i542873057/SJNScaffolding</a>)</li>\n<li>基于abp (.NET版本)的前端js、结合easyui的前端js，可打包成bower，之前为了统一不同项目下的前端基础类库。 <a href=\"https://luoyunchong.github.io/staticfiles/\">https://luoyunchong.github.io/staticfiles/</a></li>\n<li>基于 ABP vNext  的MicroserviceDemo、增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能 </li>\n<li>一个使用hexo的博客,采用Material X主题，docs分支为博客源文件，发布github Pages <a href=\"https://luoyunchong.github.io/\">https://luoyunchong.github.io/</a></li>\n<li>一个基于 ASP <strong>.NET Core 2.2</strong> 的基础集成方案 <a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/BasicTemplate</a><ul>\n<li>JWT集成</li>\n<li>EF实现事务一致性</li>\n<li>统一的创建人、创建时间、删除人、删除时间，软删除</li>\n<li>集成 EF Core MySQL版本</li>\n<li>AutoMapper集成 </li>\n</ul>\n</li>\n</ul>\n"},{"layout":"category","index":true,"title":"所有分类","_content":"","source":"categories/index.md","raw":"---\nlayout: category\nindex: true\ntitle:   所有分类\n---","date":"2019-06-25T14:47:07.953Z","updated":"2019-06-25T14:47:07.953Z","path":"categories/index.html","comments":1,"_id":"cjxcrmisu000200uxhp7xxp2w","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"list","type":"mylist","index":true,"_content":"","source":"mylist/index.md","raw":"---\nlayout: list\ntype: mylist\nindex: true\n---\n","date":"2019-06-25T14:47:07.955Z","updated":"2019-06-25T14:47:07.955Z","path":"mylist/index.html","title":"","comments":1,"_id":"cjxcrmisu000300ux5b3fp6aw","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"links","title":"我的朋友们","links":[{"group":"欢迎各行各业的朋友","icon":"fas fa-handshake","items":[{"name":"<i class=\"fas fa-comment fa-fw\" aria-hidden=\"true\"></i> 赶快留言吧","avatar":"https://cdn.jsdelivr.net/gh/xaoxuu/assets@18.12.27/avatar/avatar.png","url":"#comments","backgroundColor":"#869929","textColor":"#FFFD","tags":["1~4个标签","两个最佳"]},{"name":"<i class=\"fas fa-comment fa-fw\" aria-hidden=\"true\"></i> 赶快留言吧","avatar":"https://cdn.jsdelivr.net/gh/xaoxuu/assets@18.12.27/avatar/avatar.png","url":"#comments","backgroundColor":"#669929","textColor":"#FFFD","tags":["1~4个标签","两个最佳"]}]}],"_content":"\n<br>\n\n各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～\n\n> 名称： xaoxuu's blog\n头像： https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg\n网址： https://xaoxuu.com/blog/\n标签： iOS\n","source":"friends/index.md","raw":"---\nlayout: links\ntitle: 我的朋友们\n\nlinks:\n  - group: 欢迎各行各业的朋友\n    icon: fas fa-handshake\n    items:\n    - name: '<i class=\"fas fa-comment fa-fw\" aria-hidden=\"true\"></i> 赶快留言吧'\n      avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@18.12.27/avatar/avatar.png\n      url: '#comments'\n      backgroundColor: '#869929'\n      textColor: '#FFFD'\n      tags:\n      - 1~4个标签\n      - 两个最佳\n    - name: '<i class=\"fas fa-comment fa-fw\" aria-hidden=\"true\"></i> 赶快留言吧'\n      avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@18.12.27/avatar/avatar.png\n      url: '#comments'\n      backgroundColor: '#669929'\n      textColor: '#FFFD'\n      tags:\n      - 1~4个标签\n      - 两个最佳\n---\n\n<br>\n\n各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～\n\n> 名称： xaoxuu's blog\n头像： https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg\n网址： https://xaoxuu.com/blog/\n标签： iOS\n","date":"2019-06-25T14:47:07.954Z","updated":"2019-06-25T14:47:07.954Z","path":"friends/index.html","comments":1,"_id":"cjxcrmisv000400ux5q2yng4m","content":"<br>\n\n<p>各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～</p>\n<blockquote>\n<p>名称： xaoxuu’s blog<br>头像： <a href=\"https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg\" target=\"_blank\" rel=\"noopener\">https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg</a><br>网址： <a href=\"https://xaoxuu.com/blog/\" target=\"_blank\" rel=\"noopener\">https://xaoxuu.com/blog/</a><br>标签： iOS</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<br>\n\n<p>各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～</p>\n<blockquote>\n<p>名称： xaoxuu’s blog<br>头像： <a href=\"https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg\" target=\"_blank\" rel=\"noopener\">https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg</a><br>网址： <a href=\"https://xaoxuu.com/blog/\" target=\"_blank\" rel=\"noopener\">https://xaoxuu.com/blog/</a><br>标签： iOS</p>\n</blockquote>\n"},{"layout":"tag","index":true,"title":"所有标签","_content":"","source":"tags/index.md","raw":"---\nlayout: tag\nindex: true\ntitle: 所有标签\n---","date":"2019-06-25T14:47:07.957Z","updated":"2019-06-25T14:47:07.957Z","path":"tags/index.html","comments":1,"_id":"cjxcrmisw000500ux2h960kqz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ABP代码生成器","date":"2019-06-12T06:40:26.000Z","description":"基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。","_content":"\n\n### ABP代码生成器\n基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。\ngithub地址如下：\n* https://github.com/i542873057/SJNScaffolding\n\n### 代码生成器计划\n\n- 1、中文转英文字段，自动起名字，主要关键字段转换。\n- 2、主分表代码生成\n- 3、下拉代码自动生成，勾选\n- 4、代码生成器部署到某一服务器中，生成后可下载生成后的代码，复制至项目中即可。\n    - 文档：[csdn/部署至linux.md](https://blog.csdn.net/q710777720/article/details/91358307) 、[github/docs/部署至linux.md](https://github.com/i542873057/SJNScaffolding/blob/master/docs/%E9%83%A8%E7%BD%B2%E8%87%B3linux.md)\n    - 项目部署地址 :[http://47.106.80.39](http://47.106.80.39)、[http://www.dotnetcore.xin/](http://www.dotnetcore.xin/)\n\nCodeLF帮程序员起变量名的网站:[https://unbug.github.io/codelf/](https://unbug.github.io/codelf/)\n\n----------\n\n**这里主要介绍的是SJNScaffolding.RazorPage新项目的使用，他使用了. NET Core下的Microsoft.AspNetCore.Mvc.Razor类库，对于熟悉razor语法的开发者来说是非常容易的。**\n\n## 使用方法\n准备一个这样格式的数据字典\n\n<fancybox>\n\n  ![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png)\n\n</fancybox>\n\n运行程序，然后首先来到配置界面，这里可以配置你要生成的表名，以及项目名称等，配置完成之后点击**保存配置**\n\n<fancybox>\n\n  ![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/3.png)\n\n</fancybox>\n\n表结构设置：在这里将你需要生成的字段从数据字典里面复制进来如图：\n  注意：ID，IsDeleted，DeleterUserId，DeletionTime等字段是ABP自动生成的字段这里不必复制进来\n  \n<fancybox>\n\n  ![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/4.png)\n\n</fancybox>\n字段复制进来后点击导入字段，生成如下图列表，自行确定每个字段是否需要后点击*生成代码*\n<fancybox>\n\n  ![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/5.png)\n\n</fancybox>\n代码生成之后会在对应的目录下面生成对应的文件，只需要手动添加到项目中即可使用（这里还有待改进）\n\n<fancybox>\n\n  ![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/6.png)\n</fancybox>","source":"_posts/ABP/ABP代码生成器.md","raw":"---\ntitle: ABP代码生成器\ndate: 2019-06-12 14:40:26\ntags: ABP 代码生成器\ndescription: 基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。\ncategory:\n- ABP\n---\n\n\n### ABP代码生成器\n基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。\ngithub地址如下：\n* https://github.com/i542873057/SJNScaffolding\n\n### 代码生成器计划\n\n- 1、中文转英文字段，自动起名字，主要关键字段转换。\n- 2、主分表代码生成\n- 3、下拉代码自动生成，勾选\n- 4、代码生成器部署到某一服务器中，生成后可下载生成后的代码，复制至项目中即可。\n    - 文档：[csdn/部署至linux.md](https://blog.csdn.net/q710777720/article/details/91358307) 、[github/docs/部署至linux.md](https://github.com/i542873057/SJNScaffolding/blob/master/docs/%E9%83%A8%E7%BD%B2%E8%87%B3linux.md)\n    - 项目部署地址 :[http://47.106.80.39](http://47.106.80.39)、[http://www.dotnetcore.xin/](http://www.dotnetcore.xin/)\n\nCodeLF帮程序员起变量名的网站:[https://unbug.github.io/codelf/](https://unbug.github.io/codelf/)\n\n----------\n\n**这里主要介绍的是SJNScaffolding.RazorPage新项目的使用，他使用了. NET Core下的Microsoft.AspNetCore.Mvc.Razor类库，对于熟悉razor语法的开发者来说是非常容易的。**\n\n## 使用方法\n准备一个这样格式的数据字典\n\n<fancybox>\n\n  ![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png)\n\n</fancybox>\n\n运行程序，然后首先来到配置界面，这里可以配置你要生成的表名，以及项目名称等，配置完成之后点击**保存配置**\n\n<fancybox>\n\n  ![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/3.png)\n\n</fancybox>\n\n表结构设置：在这里将你需要生成的字段从数据字典里面复制进来如图：\n  注意：ID，IsDeleted，DeleterUserId，DeletionTime等字段是ABP自动生成的字段这里不必复制进来\n  \n<fancybox>\n\n  ![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/4.png)\n\n</fancybox>\n字段复制进来后点击导入字段，生成如下图列表，自行确定每个字段是否需要后点击*生成代码*\n<fancybox>\n\n  ![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/5.png)\n\n</fancybox>\n代码生成之后会在对应的目录下面生成对应的文件，只需要手动添加到项目中即可使用（这里还有待改进）\n\n<fancybox>\n\n  ![avatar](https://github.com/i542873057/SJNScaffolding/raw/master/Img/6.png)\n</fancybox>","slug":"ABP/ABP代码生成器","published":1,"updated":"2019-06-25T14:47:07.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiti000600uxejm2r7ox","content":"<h3 id=\"ABP代码生成器\"><a href=\"#ABP代码生成器\" class=\"headerlink\" title=\"ABP代码生成器\"></a>ABP代码生成器</h3><p>基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。<br>github地址如下：</p>\n<ul>\n<li><a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a></li>\n</ul>\n<h3 id=\"代码生成器计划\"><a href=\"#代码生成器计划\" class=\"headerlink\" title=\"代码生成器计划\"></a>代码生成器计划</h3><ul>\n<li>1、中文转英文字段，自动起名字，主要关键字段转换。</li>\n<li>2、主分表代码生成</li>\n<li>3、下拉代码自动生成，勾选</li>\n<li>4、代码生成器部署到某一服务器中，生成后可下载生成后的代码，复制至项目中即可。<ul>\n<li>文档：<a href=\"https://blog.csdn.net/q710777720/article/details/91358307\" target=\"_blank\" rel=\"noopener\">csdn/部署至linux.md</a> 、<a href=\"https://github.com/i542873057/SJNScaffolding/blob/master/docs/%E9%83%A8%E7%BD%B2%E8%87%B3linux.md\" target=\"_blank\" rel=\"noopener\">github/docs/部署至linux.md</a></li>\n<li>项目部署地址 :<a href=\"http://47.106.80.39\" target=\"_blank\" rel=\"noopener\">http://47.106.80.39</a>、<a href=\"http://www.dotnetcore.xin/\" target=\"_blank\" rel=\"noopener\">http://www.dotnetcore.xin/</a></li>\n</ul>\n</li>\n</ul>\n<p>CodeLF帮程序员起变量名的网站:<a href=\"https://unbug.github.io/codelf/\" target=\"_blank\" rel=\"noopener\">https://unbug.github.io/codelf/</a></p>\n<hr>\n<p><strong>这里主要介绍的是SJNScaffolding.RazorPage新项目的使用，他使用了. NET Core下的Microsoft.AspNetCore.Mvc.Razor类库，对于熟悉razor语法的开发者来说是非常容易的。</strong></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>准备一个这样格式的数据字典</p>\n<fancybox>\n\n<p>  <img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png\" alt=\"avatar\"></p>\n</fancybox>\n\n<p>运行程序，然后首先来到配置界面，这里可以配置你要生成的表名，以及项目名称等，配置完成之后点击<strong>保存配置</strong></p>\n<fancybox>\n\n<p>  <img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/3.png\" alt=\"avatar\"></p>\n</fancybox>\n\n<p>表结构设置：在这里将你需要生成的字段从数据字典里面复制进来如图：<br>  注意：ID，IsDeleted，DeleterUserId，DeletionTime等字段是ABP自动生成的字段这里不必复制进来</p>\n<fancybox>\n\n<p>  <img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/4.png\" alt=\"avatar\"></p>\n</fancybox>\n字段复制进来后点击导入字段，生成如下图列表，自行确定每个字段是否需要后点击*生成代码*\n<fancybox>\n\n<p>  <img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/5.png\" alt=\"avatar\"></p>\n</fancybox>\n代码生成之后会在对应的目录下面生成对应的文件，只需要手动添加到项目中即可使用（这里还有待改进）\n\n<fancybox>\n\n<p>  <img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/6.png\" alt=\"avatar\"><br></p></fancybox><p></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ABP代码生成器\"><a href=\"#ABP代码生成器\" class=\"headerlink\" title=\"ABP代码生成器\"></a>ABP代码生成器</h3><p>基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。<br>github地址如下：</p>\n<ul>\n<li><a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a></li>\n</ul>\n<h3 id=\"代码生成器计划\"><a href=\"#代码生成器计划\" class=\"headerlink\" title=\"代码生成器计划\"></a>代码生成器计划</h3><ul>\n<li>1、中文转英文字段，自动起名字，主要关键字段转换。</li>\n<li>2、主分表代码生成</li>\n<li>3、下拉代码自动生成，勾选</li>\n<li>4、代码生成器部署到某一服务器中，生成后可下载生成后的代码，复制至项目中即可。<ul>\n<li>文档：<a href=\"https://blog.csdn.net/q710777720/article/details/91358307\" target=\"_blank\" rel=\"noopener\">csdn/部署至linux.md</a> 、<a href=\"https://github.com/i542873057/SJNScaffolding/blob/master/docs/%E9%83%A8%E7%BD%B2%E8%87%B3linux.md\" target=\"_blank\" rel=\"noopener\">github/docs/部署至linux.md</a></li>\n<li>项目部署地址 :<a href=\"http://47.106.80.39\" target=\"_blank\" rel=\"noopener\">http://47.106.80.39</a>、<a href=\"http://www.dotnetcore.xin/\" target=\"_blank\" rel=\"noopener\">http://www.dotnetcore.xin/</a></li>\n</ul>\n</li>\n</ul>\n<p>CodeLF帮程序员起变量名的网站:<a href=\"https://unbug.github.io/codelf/\" target=\"_blank\" rel=\"noopener\">https://unbug.github.io/codelf/</a></p>\n<hr>\n<p><strong>这里主要介绍的是SJNScaffolding.RazorPage新项目的使用，他使用了. NET Core下的Microsoft.AspNetCore.Mvc.Razor类库，对于熟悉razor语法的开发者来说是非常容易的。</strong></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>准备一个这样格式的数据字典</p>\n<fancybox>\n\n<p>  <img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png\" alt=\"avatar\"></p>\n</fancybox>\n\n<p>运行程序，然后首先来到配置界面，这里可以配置你要生成的表名，以及项目名称等，配置完成之后点击<strong>保存配置</strong></p>\n<fancybox>\n\n<p>  <img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/3.png\" alt=\"avatar\"></p>\n</fancybox>\n\n<p>表结构设置：在这里将你需要生成的字段从数据字典里面复制进来如图：<br>  注意：ID，IsDeleted，DeleterUserId，DeletionTime等字段是ABP自动生成的字段这里不必复制进来</p>\n<fancybox>\n\n<p>  <img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/4.png\" alt=\"avatar\"></p>\n</fancybox>\n字段复制进来后点击导入字段，生成如下图列表，自行确定每个字段是否需要后点击*生成代码*\n<fancybox>\n\n<p>  <img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/5.png\" alt=\"avatar\"></p>\n</fancybox>\n代码生成之后会在对应的目录下面生成对应的文件，只需要手动添加到项目中即可使用（这里还有待改进）\n\n<fancybox>\n\n<p>  <img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/6.png\" alt=\"avatar\"><br></p></fancybox><p></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png","popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"ABP代码生成器","path":"2019/06/12/ABP/ABP代码生成器/","eyeCatchImage":"https://github.com/i542873057/SJNScaffolding/raw/master/Img/2.png","excerpt":"基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。","date":"2019-06-12T06:40:26.000Z","pv":0,"totalPV":0,"categories":"ABP","tags":["ABP 代码生成器"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ABP源码解析","date":"2019-01-09T06:40:26.000Z","description":"旧项目使用ABP框架时，对基础的ABP源码、框架、架构的简单介绍","_content":"\n\n## 2.Abp简介\n>**ABP是“ASP.NET Boilerplate Project (ASP.NET样板项目)”的简称。**\nASP.NET Boilerplate是一个用最佳实践和流行技术开发现代WEB应用程序的新起点，它旨在成为一个通用的WEB应用程序框架和项目模板。\n\n**框架**\nABP是基于最新的ASP.NET CORE，ASP.NET MVC和Web API技术的应用程序框架。并使用流行的框架和库，它提供了便于使用的授权，依赖注入，验证，异常处理，本地化，日志记录，缓存等常用功能。\n\n**架构**\nABP实现了多层架构（领域层，应用层，基础设施层和表示层），以及领域驱动设计（实体，存储库，领域服务，应用程序服务，DTO等）。还实现和提供了良好的基础设施来实现最佳实践，如依赖注入。\n\n**模板**\nABP轻松地为您的项目创建启动模板。它默认包括最常用的框架和库。还允许您选择单页（Angularjs）或多页架构，EntityFramework或NHibernate作为ORM。\n访问官网，了解更多。\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/2799767-02ef1335c8674fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n![image](http://upload-images.jianshu.io/upload_images/2799767-4b13da08e87060d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n* 用户接口层（Presentation）：提供一个界面，实现用户交互操作。\n* 应用 层（Application):进行展现层与领域层之间的协调，协调业务对象来执行特定的应用 程序的任务。不包含业务逻辑。\n* 领域层（Domain)：包括业务对象和业务规则，这是应用程序的核心层。\n* 基础设计层：（Infrastructure）:提供通用技术来支持更高的层。仓储可通过ORM来实现数据库的交互\n\n> ABP基础原则：\n\n\t 应用层不包含业务逻辑\n\t 领域服务处理业务逻辑\n\t 应用服务(AppLIcationService)VS领域服务（Manager)\n\n\n> 在什么情况下应使用领域服务\n\n\t 执行某个具体的业务操作。\n\t 领域对象的转换\n\t 以多个领域对象为输入，返回一个值对象\n\n* [参考此文档](https://www.cnblogs.com/sheng-jie/p/6943213.html)\n\n![image](https://upload-images.jianshu.io/upload_images/2799767-550ec13d4df50f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n > 总结：\n 1. 领域服务和应用服务的区别在于只有领域服务才处理业务逻辑。应用服务作为领域服务的消费方，是很薄的一层。\n 2. 过度使用领域服务会导致贫血领域模型（即所有的业务逻辑都位于领域服务中，而不是实体和值对象中）。\n\n ### 领域服务（Domain Service）\n > 摘要： 当处理的业务规则跨越两个（及以上）实体时，应该写在 领域服务方法里\n\n ### 领域事件 (Domain Event)\n> 领域事件用来定义特定于领域的事件，领域服务与实体一起实现了不属于单个实体的业务规则\n","source":"_posts/ABP/ABP源码解析.md","raw":"---\ntitle: ABP源码解析\ndate: 2019-01-09 14:40:26\ntags: ABP\ndescription: 旧项目使用ABP框架时，对基础的ABP源码、框架、架构的简单介绍\ncategory:\n- ABP\n---\n\n\n## 2.Abp简介\n>**ABP是“ASP.NET Boilerplate Project (ASP.NET样板项目)”的简称。**\nASP.NET Boilerplate是一个用最佳实践和流行技术开发现代WEB应用程序的新起点，它旨在成为一个通用的WEB应用程序框架和项目模板。\n\n**框架**\nABP是基于最新的ASP.NET CORE，ASP.NET MVC和Web API技术的应用程序框架。并使用流行的框架和库，它提供了便于使用的授权，依赖注入，验证，异常处理，本地化，日志记录，缓存等常用功能。\n\n**架构**\nABP实现了多层架构（领域层，应用层，基础设施层和表示层），以及领域驱动设计（实体，存储库，领域服务，应用程序服务，DTO等）。还实现和提供了良好的基础设施来实现最佳实践，如依赖注入。\n\n**模板**\nABP轻松地为您的项目创建启动模板。它默认包括最常用的框架和库。还允许您选择单页（Angularjs）或多页架构，EntityFramework或NHibernate作为ORM。\n访问官网，了解更多。\n\n\n\n![image](http://upload-images.jianshu.io/upload_images/2799767-02ef1335c8674fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n![image](http://upload-images.jianshu.io/upload_images/2799767-4b13da08e87060d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n* 用户接口层（Presentation）：提供一个界面，实现用户交互操作。\n* 应用 层（Application):进行展现层与领域层之间的协调，协调业务对象来执行特定的应用 程序的任务。不包含业务逻辑。\n* 领域层（Domain)：包括业务对象和业务规则，这是应用程序的核心层。\n* 基础设计层：（Infrastructure）:提供通用技术来支持更高的层。仓储可通过ORM来实现数据库的交互\n\n> ABP基础原则：\n\n\t 应用层不包含业务逻辑\n\t 领域服务处理业务逻辑\n\t 应用服务(AppLIcationService)VS领域服务（Manager)\n\n\n> 在什么情况下应使用领域服务\n\n\t 执行某个具体的业务操作。\n\t 领域对象的转换\n\t 以多个领域对象为输入，返回一个值对象\n\n* [参考此文档](https://www.cnblogs.com/sheng-jie/p/6943213.html)\n\n![image](https://upload-images.jianshu.io/upload_images/2799767-550ec13d4df50f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n > 总结：\n 1. 领域服务和应用服务的区别在于只有领域服务才处理业务逻辑。应用服务作为领域服务的消费方，是很薄的一层。\n 2. 过度使用领域服务会导致贫血领域模型（即所有的业务逻辑都位于领域服务中，而不是实体和值对象中）。\n\n ### 领域服务（Domain Service）\n > 摘要： 当处理的业务规则跨越两个（及以上）实体时，应该写在 领域服务方法里\n\n ### 领域事件 (Domain Event)\n> 领域事件用来定义特定于领域的事件，领域服务与实体一起实现了不属于单个实体的业务规则\n","slug":"ABP/ABP源码解析","published":1,"updated":"2019-06-25T15:27:50.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmitl000700uxmyml0u3j","content":"<h2 id=\"2-Abp简介\"><a href=\"#2-Abp简介\" class=\"headerlink\" title=\"2.Abp简介\"></a>2.Abp简介</h2><blockquote>\n<p><strong>ABP是“ASP.NET Boilerplate Project (ASP.NET样板项目)”的简称。</strong><br>ASP.NET Boilerplate是一个用最佳实践和流行技术开发现代WEB应用程序的新起点，它旨在成为一个通用的WEB应用程序框架和项目模板。</p>\n</blockquote>\n<p><strong>框架</strong><br>ABP是基于最新的ASP.NET CORE，ASP.NET MVC和Web API技术的应用程序框架。并使用流行的框架和库，它提供了便于使用的授权，依赖注入，验证，异常处理，本地化，日志记录，缓存等常用功能。</p>\n<p><strong>架构</strong><br>ABP实现了多层架构（领域层，应用层，基础设施层和表示层），以及领域驱动设计（实体，存储库，领域服务，应用程序服务，DTO等）。还实现和提供了良好的基础设施来实现最佳实践，如依赖注入。</p>\n<p><strong>模板</strong><br>ABP轻松地为您的项目创建启动模板。它默认包括最常用的框架和库。还允许您选择单页（Angularjs）或多页架构，EntityFramework或NHibernate作为ORM。<br>访问官网，了解更多。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2799767-02ef1335c8674fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"image\"><br><img src=\"http://upload-images.jianshu.io/upload_images/2799767-4b13da08e87060d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"image\"></p>\n<ul>\n<li>用户接口层（Presentation）：提供一个界面，实现用户交互操作。</li>\n<li>应用 层（Application):进行展现层与领域层之间的协调，协调业务对象来执行特定的应用 程序的任务。不包含业务逻辑。</li>\n<li>领域层（Domain)：包括业务对象和业务规则，这是应用程序的核心层。</li>\n<li>基础设计层：（Infrastructure）:提供通用技术来支持更高的层。仓储可通过ORM来实现数据库的交互</li>\n</ul>\n<blockquote>\n<p>ABP基础原则：</p>\n</blockquote>\n<pre><code>应用层不包含业务逻辑\n领域服务处理业务逻辑\n应用服务(AppLIcationService)VS领域服务（Manager)</code></pre><blockquote>\n<p>在什么情况下应使用领域服务</p>\n</blockquote>\n<pre><code>执行某个具体的业务操作。\n领域对象的转换\n以多个领域对象为输入，返回一个值对象</code></pre><ul>\n<li><a href=\"https://www.cnblogs.com/sheng-jie/p/6943213.html\" target=\"_blank\" rel=\"noopener\">参考此文档</a></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2799767-550ec13d4df50f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>领域服务和应用服务的区别在于只有领域服务才处理业务逻辑。应用服务作为领域服务的消费方，是很薄的一层。</li>\n<li>过度使用领域服务会导致贫血领域模型（即所有的业务逻辑都位于领域服务中，而不是实体和值对象中）。</li>\n</ol>\n</blockquote>\n<h3 id=\"领域服务（Domain-Service）\"><a href=\"#领域服务（Domain-Service）\" class=\"headerlink\" title=\"领域服务（Domain Service）\"></a>领域服务（Domain Service）</h3><blockquote>\n<p>摘要： 当处理的业务规则跨越两个（及以上）实体时，应该写在 领域服务方法里</p>\n</blockquote>\n<h3 id=\"领域事件-Domain-Event\"><a href=\"#领域事件-Domain-Event\" class=\"headerlink\" title=\"领域事件 (Domain Event)\"></a>领域事件 (Domain Event)</h3><blockquote>\n<p>领域事件用来定义特定于领域的事件，领域服务与实体一起实现了不属于单个实体的业务规则</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2-Abp简介\"><a href=\"#2-Abp简介\" class=\"headerlink\" title=\"2.Abp简介\"></a>2.Abp简介</h2><blockquote>\n<p><strong>ABP是“ASP.NET Boilerplate Project (ASP.NET样板项目)”的简称。</strong><br>ASP.NET Boilerplate是一个用最佳实践和流行技术开发现代WEB应用程序的新起点，它旨在成为一个通用的WEB应用程序框架和项目模板。</p>\n</blockquote>\n<p><strong>框架</strong><br>ABP是基于最新的ASP.NET CORE，ASP.NET MVC和Web API技术的应用程序框架。并使用流行的框架和库，它提供了便于使用的授权，依赖注入，验证，异常处理，本地化，日志记录，缓存等常用功能。</p>\n<p><strong>架构</strong><br>ABP实现了多层架构（领域层，应用层，基础设施层和表示层），以及领域驱动设计（实体，存储库，领域服务，应用程序服务，DTO等）。还实现和提供了良好的基础设施来实现最佳实践，如依赖注入。</p>\n<p><strong>模板</strong><br>ABP轻松地为您的项目创建启动模板。它默认包括最常用的框架和库。还允许您选择单页（Angularjs）或多页架构，EntityFramework或NHibernate作为ORM。<br>访问官网，了解更多。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2799767-02ef1335c8674fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"image\"><br><img src=\"http://upload-images.jianshu.io/upload_images/2799767-4b13da08e87060d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700\" alt=\"image\"></p>\n<ul>\n<li>用户接口层（Presentation）：提供一个界面，实现用户交互操作。</li>\n<li>应用 层（Application):进行展现层与领域层之间的协调，协调业务对象来执行特定的应用 程序的任务。不包含业务逻辑。</li>\n<li>领域层（Domain)：包括业务对象和业务规则，这是应用程序的核心层。</li>\n<li>基础设计层：（Infrastructure）:提供通用技术来支持更高的层。仓储可通过ORM来实现数据库的交互</li>\n</ul>\n<blockquote>\n<p>ABP基础原则：</p>\n</blockquote>\n<pre><code>应用层不包含业务逻辑\n领域服务处理业务逻辑\n应用服务(AppLIcationService)VS领域服务（Manager)</code></pre><blockquote>\n<p>在什么情况下应使用领域服务</p>\n</blockquote>\n<pre><code>执行某个具体的业务操作。\n领域对象的转换\n以多个领域对象为输入，返回一个值对象</code></pre><ul>\n<li><a href=\"https://www.cnblogs.com/sheng-jie/p/6943213.html\" target=\"_blank\" rel=\"noopener\">参考此文档</a></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2799767-550ec13d4df50f8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>领域服务和应用服务的区别在于只有领域服务才处理业务逻辑。应用服务作为领域服务的消费方，是很薄的一层。</li>\n<li>过度使用领域服务会导致贫血领域模型（即所有的业务逻辑都位于领域服务中，而不是实体和值对象中）。</li>\n</ol>\n</blockquote>\n<h3 id=\"领域服务（Domain-Service）\"><a href=\"#领域服务（Domain-Service）\" class=\"headerlink\" title=\"领域服务（Domain Service）\"></a>领域服务（Domain Service）</h3><blockquote>\n<p>摘要： 当处理的业务规则跨越两个（及以上）实体时，应该写在 领域服务方法里</p>\n</blockquote>\n<h3 id=\"领域事件-Domain-Event\"><a href=\"#领域事件-Domain-Event\" class=\"headerlink\" title=\"领域事件 (Domain Event)\"></a>领域事件 (Domain Event)</h3><blockquote>\n<p>领域事件用来定义特定于领域的事件，领域服务与实体一起实现了不属于单个实体的业务规则</p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://upload-images.jianshu.io/upload_images/2799767-02ef1335c8674fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700","popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 23:27:50 GMT+0800 (GMT+08:00)","title":"ABP源码解析","path":"2019/01/09/ABP/ABP源码解析/","eyeCatchImage":"http://upload-images.jianshu.io/upload_images/2799767-02ef1335c8674fd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700","excerpt":"旧项目使用ABP框架时，对基础的ABP源码、框架、架构的简单介绍","date":"2019-01-09T06:40:26.000Z","pv":0,"totalPV":0,"categories":"ABP","tags":["ABP"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"好用的前后端类库及安装包整合下载","date":"2019-06-09T17:00:22.000Z","description":"记录平常使用的一些前端插件、安装包下载地址、插件、开源库等。","_content":"\n#### 记录平常使用的一些前端插件\n\n + [wangEditor3](http://www.wangeditor.com/) 基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、易用、开源免费\n + [webuploader](http://fex.baidu.com/webuploader/) 上传控件，flash+H5 兼容IE6+，Andorid 4+，IOS 6+\n +  [docsify.js](https://docsify.js.org/#/)   一个基础markdown的文档生成器，可以写API接口文档。A magical documentation site generator.\n + cropper 头像上传，裁剪，旋转等，blueimp-canvas-to-blob 解决部分浏览器兼容性\n +  [JQuery-EasyUI-insdep](https://www.insdep.com/) 基于Easyui的样式扩展UI，变得更好看，多了许多插件。\n +  jquery-extensions　[源文件下载地址](https://pan.baidu.com/s/1EDYwfHgGcQEA6S5N8-j_jg) 已无人维护，开源地址已经找不到了，该扩展基于easyui1.3.6，在本项目中不可直接引用发布后的压缩文件，必须拆分引用,按照依赖顺序引用该目录下的扩展:bower_components\\jquery-extensions\\jeasyui-extensions,部分bug已解决，有些扩展在新版本的easyui已经有了，所以在extensions中，有些可删除。\n* jquery.jdirk.js 为js扩展了许多通用的方法,extensions-master依赖此js,完整的代码都在extensions-master中\n* \n#### 安装包下载\n\n+ redis.msi文件  [安装包](https://pan.baidu.com/s/1Hb0nQCm5gCIJsFi__ppQSw) 缓存使用redis\n+ redis-desktop-manager.exe 文件 链接：https://pan.baidu.com/s/1c3ra73E 密码：k81k\n+ SQL Server 2012 链接：https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ 密码：g8av  \n+  Visual Studio 2017 直接从官网下载，安装时，只选择ASP.NET和Web开发即可。\n+  TortoiseSVN [官网](https://tortoisesvn.net/downloads.html)\n+  MYSQL 官网下载即可，选择5.7.22版本\n+  Navicat for mysql [百度网盘地址](https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q) 密码：mi2p\n\n#### 另外vs2017中的插件(可选)\n* visualsvn for visual studio 2017\n* resharper \n\n#### staticfiles开源库介绍、通用js\n\n> 维护地址为 http://ip/summary/libs/staticfiles.git\n> bower 静态资源地址 http://ip:5678/\n\n* easyui.default-extension.js为easyui增加默认属性，扩展jquery方法\n* base.js 大多数项目通用的com对象，\n* passwordComplexityHelper.js 让密码也可以在后台配置\n* libs 这个文件夹下的js是Abp自带的通用js，改了abp.jquery.js，增加了abp.easyui.js,abp.layer.js，统一的调用接口，可以实现不同的弹框效果\n\n>根目录新建.bowerrc文件，实现自定义bower仓库\n~~~\n{\n    \"registry\": \"http://ip:5678\",\n    \"timeout\": 30000\n}\n~~~\n> 在web项目目录执行以下命令\n~~~\n    bower install staticfiles --save\n~~~\n\n### 后端技术\n> 后端使用语言为C#,访问数据库技术主要采用EntityFrameWork6,复杂sql可使用dapper，数据库使用SQL server ,可切换成mysql,框架使用的ABP   [官网](http://www.aspnetboilerplate.com/)\n* ABP框架有哪些好处，可以参考如下文章[ABP的一些优点](https://www.cnblogs.com/farb/p/ABPIntro.html)\n+ 在使用框架时，我们会发现，代码会更加规范，系统也更加稳定，\n \n#### ABP 后端已完成的功能\n> 后端系统基本功能已经完善,还差一些，如:导入excel,导出excel,工作流。\n\n * 用户-角色-权限-日志-设置-文件-组织-登录-注册-找回密码-注册邮件激活-短信-双身份登录验证-通用增删改查-集成Dapper-自动迁移-svn提交后自动发布-缓存redis-字典管理-错误处理（跳404，403等）-兼容性差跳下载浏览器页面-不同开发模式下，使用不同的配置\n *\n","source":"_posts/大前端/好用的前后端类库及安装包整合下载.md","raw":"---\ntitle: 好用的前后端类库及安装包整合下载\ndate: 2019-06-10 01:00:22\ndescription: 记录平常使用的一些前端插件、安装包下载地址、插件、开源库等。\ntags:\ncategory:\n- 大前端\n---\n\n#### 记录平常使用的一些前端插件\n\n + [wangEditor3](http://www.wangeditor.com/) 基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、易用、开源免费\n + [webuploader](http://fex.baidu.com/webuploader/) 上传控件，flash+H5 兼容IE6+，Andorid 4+，IOS 6+\n +  [docsify.js](https://docsify.js.org/#/)   一个基础markdown的文档生成器，可以写API接口文档。A magical documentation site generator.\n + cropper 头像上传，裁剪，旋转等，blueimp-canvas-to-blob 解决部分浏览器兼容性\n +  [JQuery-EasyUI-insdep](https://www.insdep.com/) 基于Easyui的样式扩展UI，变得更好看，多了许多插件。\n +  jquery-extensions　[源文件下载地址](https://pan.baidu.com/s/1EDYwfHgGcQEA6S5N8-j_jg) 已无人维护，开源地址已经找不到了，该扩展基于easyui1.3.6，在本项目中不可直接引用发布后的压缩文件，必须拆分引用,按照依赖顺序引用该目录下的扩展:bower_components\\jquery-extensions\\jeasyui-extensions,部分bug已解决，有些扩展在新版本的easyui已经有了，所以在extensions中，有些可删除。\n* jquery.jdirk.js 为js扩展了许多通用的方法,extensions-master依赖此js,完整的代码都在extensions-master中\n* \n#### 安装包下载\n\n+ redis.msi文件  [安装包](https://pan.baidu.com/s/1Hb0nQCm5gCIJsFi__ppQSw) 缓存使用redis\n+ redis-desktop-manager.exe 文件 链接：https://pan.baidu.com/s/1c3ra73E 密码：k81k\n+ SQL Server 2012 链接：https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ 密码：g8av  \n+  Visual Studio 2017 直接从官网下载，安装时，只选择ASP.NET和Web开发即可。\n+  TortoiseSVN [官网](https://tortoisesvn.net/downloads.html)\n+  MYSQL 官网下载即可，选择5.7.22版本\n+  Navicat for mysql [百度网盘地址](https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q) 密码：mi2p\n\n#### 另外vs2017中的插件(可选)\n* visualsvn for visual studio 2017\n* resharper \n\n#### staticfiles开源库介绍、通用js\n\n> 维护地址为 http://ip/summary/libs/staticfiles.git\n> bower 静态资源地址 http://ip:5678/\n\n* easyui.default-extension.js为easyui增加默认属性，扩展jquery方法\n* base.js 大多数项目通用的com对象，\n* passwordComplexityHelper.js 让密码也可以在后台配置\n* libs 这个文件夹下的js是Abp自带的通用js，改了abp.jquery.js，增加了abp.easyui.js,abp.layer.js，统一的调用接口，可以实现不同的弹框效果\n\n>根目录新建.bowerrc文件，实现自定义bower仓库\n~~~\n{\n    \"registry\": \"http://ip:5678\",\n    \"timeout\": 30000\n}\n~~~\n> 在web项目目录执行以下命令\n~~~\n    bower install staticfiles --save\n~~~\n\n### 后端技术\n> 后端使用语言为C#,访问数据库技术主要采用EntityFrameWork6,复杂sql可使用dapper，数据库使用SQL server ,可切换成mysql,框架使用的ABP   [官网](http://www.aspnetboilerplate.com/)\n* ABP框架有哪些好处，可以参考如下文章[ABP的一些优点](https://www.cnblogs.com/farb/p/ABPIntro.html)\n+ 在使用框架时，我们会发现，代码会更加规范，系统也更加稳定，\n \n#### ABP 后端已完成的功能\n> 后端系统基本功能已经完善,还差一些，如:导入excel,导出excel,工作流。\n\n * 用户-角色-权限-日志-设置-文件-组织-登录-注册-找回密码-注册邮件激活-短信-双身份登录验证-通用增删改查-集成Dapper-自动迁移-svn提交后自动发布-缓存redis-字典管理-错误处理（跳404，403等）-兼容性差跳下载浏览器页面-不同开发模式下，使用不同的配置\n *\n","slug":"大前端/好用的前后端类库及安装包整合下载","published":1,"updated":"2019-06-25T14:47:07.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmitp000a00uxyxrxv7rm","content":"<h4 id=\"记录平常使用的一些前端插件\"><a href=\"#记录平常使用的一些前端插件\" class=\"headerlink\" title=\"记录平常使用的一些前端插件\"></a>记录平常使用的一些前端插件</h4><ul>\n<li><a href=\"http://www.wangeditor.com/\" target=\"_blank\" rel=\"noopener\">wangEditor3</a> 基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、易用、开源免费</li>\n<li><a href=\"http://fex.baidu.com/webuploader/\" target=\"_blank\" rel=\"noopener\">webuploader</a> 上传控件，flash+H5 兼容IE6+，Andorid 4+，IOS 6+</li>\n<li><a href=\"https://docsify.js.org/#/\" target=\"_blank\" rel=\"noopener\">docsify.js</a>   一个基础markdown的文档生成器，可以写API接口文档。A magical documentation site generator.</li>\n<li>cropper 头像上传，裁剪，旋转等，blueimp-canvas-to-blob 解决部分浏览器兼容性</li>\n<li><a href=\"https://www.insdep.com/\" target=\"_blank\" rel=\"noopener\">JQuery-EasyUI-insdep</a> 基于Easyui的样式扩展UI，变得更好看，多了许多插件。</li>\n<li>jquery-extensions　<a href=\"https://pan.baidu.com/s/1EDYwfHgGcQEA6S5N8-j_jg\" target=\"_blank\" rel=\"noopener\">源文件下载地址</a> 已无人维护，开源地址已经找不到了，该扩展基于easyui1.3.6，在本项目中不可直接引用发布后的压缩文件，必须拆分引用,按照依赖顺序引用该目录下的扩展:bower_components\\jquery-extensions\\jeasyui-extensions,部分bug已解决，有些扩展在新版本的easyui已经有了，所以在extensions中，有些可删除。<ul>\n<li>jquery.jdirk.js 为js扩展了许多通用的方法,extensions-master依赖此js,完整的代码都在extensions-master中</li>\n<li><h4 id=\"安装包下载\"><a href=\"#安装包下载\" class=\"headerlink\" title=\"安装包下载\"></a>安装包下载</h4></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>redis.msi文件  <a href=\"https://pan.baidu.com/s/1Hb0nQCm5gCIJsFi__ppQSw\" target=\"_blank\" rel=\"noopener\">安装包</a> 缓存使用redis</li>\n<li>redis-desktop-manager.exe 文件 链接：<a href=\"https://pan.baidu.com/s/1c3ra73E\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1c3ra73E</a> 密码：k81k</li>\n<li>SQL Server 2012 链接：<a href=\"https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ</a> 密码：g8av  </li>\n<li>Visual Studio 2017 直接从官网下载，安装时，只选择ASP.NET和Web开发即可。</li>\n<li>TortoiseSVN <a href=\"https://tortoisesvn.net/downloads.html\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li>MYSQL 官网下载即可，选择5.7.22版本</li>\n<li>Navicat for mysql <a href=\"https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q\" target=\"_blank\" rel=\"noopener\">百度网盘地址</a> 密码：mi2p</li>\n</ul>\n<h4 id=\"另外vs2017中的插件-可选\"><a href=\"#另外vs2017中的插件-可选\" class=\"headerlink\" title=\"另外vs2017中的插件(可选)\"></a>另外vs2017中的插件(可选)</h4><ul>\n<li>visualsvn for visual studio 2017</li>\n<li>resharper </li>\n</ul>\n<h4 id=\"staticfiles开源库介绍、通用js\"><a href=\"#staticfiles开源库介绍、通用js\" class=\"headerlink\" title=\"staticfiles开源库介绍、通用js\"></a>staticfiles开源库介绍、通用js</h4><blockquote>\n<p>维护地址为 <a href=\"http://ip/summary/libs/staticfiles.git\" target=\"_blank\" rel=\"noopener\">http://ip/summary/libs/staticfiles.git</a><br>bower 静态资源地址 <a href=\"http://ip:5678/\" target=\"_blank\" rel=\"noopener\">http://ip:5678/</a></p>\n</blockquote>\n<ul>\n<li>easyui.default-extension.js为easyui增加默认属性，扩展jquery方法</li>\n<li>base.js 大多数项目通用的com对象，</li>\n<li>passwordComplexityHelper.js 让密码也可以在后台配置</li>\n<li>libs 这个文件夹下的js是Abp自带的通用js，改了abp.jquery.js，增加了abp.easyui.js,abp.layer.js，统一的调用接口，可以实现不同的弹框效果</li>\n</ul>\n<blockquote>\n<p>根目录新建.bowerrc文件，实现自定义bower仓库</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry&quot;: &quot;http://ip:5678&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;: 30000</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在web项目目录执行以下命令</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install staticfiles --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后端技术\"><a href=\"#后端技术\" class=\"headerlink\" title=\"后端技术\"></a>后端技术</h3><blockquote>\n<p>后端使用语言为C#,访问数据库技术主要采用EntityFrameWork6,复杂sql可使用dapper，数据库使用SQL server ,可切换成mysql,框架使用的ABP   <a href=\"http://www.aspnetboilerplate.com/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<ul>\n<li>ABP框架有哪些好处，可以参考如下文章<a href=\"https://www.cnblogs.com/farb/p/ABPIntro.html\" target=\"_blank\" rel=\"noopener\">ABP的一些优点</a></li>\n</ul>\n<ul>\n<li>在使用框架时，我们会发现，代码会更加规范，系统也更加稳定，</li>\n</ul>\n</blockquote>\n<h4 id=\"ABP-后端已完成的功能\"><a href=\"#ABP-后端已完成的功能\" class=\"headerlink\" title=\"ABP 后端已完成的功能\"></a>ABP 后端已完成的功能</h4><blockquote>\n<p>后端系统基本功能已经完善,还差一些，如:导入excel,导出excel,工作流。</p>\n</blockquote>\n<ul>\n<li>用户-角色-权限-日志-设置-文件-组织-登录-注册-找回密码-注册邮件激活-短信-双身份登录验证-通用增删改查-集成Dapper-自动迁移-svn提交后自动发布-缓存redis-字典管理-错误处理（跳404，403等）-兼容性差跳下载浏览器页面-不同开发模式下，使用不同的配置</li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"记录平常使用的一些前端插件\"><a href=\"#记录平常使用的一些前端插件\" class=\"headerlink\" title=\"记录平常使用的一些前端插件\"></a>记录平常使用的一些前端插件</h4><ul>\n<li><a href=\"http://www.wangeditor.com/\" target=\"_blank\" rel=\"noopener\">wangEditor3</a> 基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、易用、开源免费</li>\n<li><a href=\"http://fex.baidu.com/webuploader/\" target=\"_blank\" rel=\"noopener\">webuploader</a> 上传控件，flash+H5 兼容IE6+，Andorid 4+，IOS 6+</li>\n<li><a href=\"https://docsify.js.org/#/\" target=\"_blank\" rel=\"noopener\">docsify.js</a>   一个基础markdown的文档生成器，可以写API接口文档。A magical documentation site generator.</li>\n<li>cropper 头像上传，裁剪，旋转等，blueimp-canvas-to-blob 解决部分浏览器兼容性</li>\n<li><a href=\"https://www.insdep.com/\" target=\"_blank\" rel=\"noopener\">JQuery-EasyUI-insdep</a> 基于Easyui的样式扩展UI，变得更好看，多了许多插件。</li>\n<li>jquery-extensions　<a href=\"https://pan.baidu.com/s/1EDYwfHgGcQEA6S5N8-j_jg\" target=\"_blank\" rel=\"noopener\">源文件下载地址</a> 已无人维护，开源地址已经找不到了，该扩展基于easyui1.3.6，在本项目中不可直接引用发布后的压缩文件，必须拆分引用,按照依赖顺序引用该目录下的扩展:bower_components\\jquery-extensions\\jeasyui-extensions,部分bug已解决，有些扩展在新版本的easyui已经有了，所以在extensions中，有些可删除。<ul>\n<li>jquery.jdirk.js 为js扩展了许多通用的方法,extensions-master依赖此js,完整的代码都在extensions-master中</li>\n<li><h4 id=\"安装包下载\"><a href=\"#安装包下载\" class=\"headerlink\" title=\"安装包下载\"></a>安装包下载</h4></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>redis.msi文件  <a href=\"https://pan.baidu.com/s/1Hb0nQCm5gCIJsFi__ppQSw\" target=\"_blank\" rel=\"noopener\">安装包</a> 缓存使用redis</li>\n<li>redis-desktop-manager.exe 文件 链接：<a href=\"https://pan.baidu.com/s/1c3ra73E\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1c3ra73E</a> 密码：k81k</li>\n<li>SQL Server 2012 链接：<a href=\"https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ</a> 密码：g8av  </li>\n<li>Visual Studio 2017 直接从官网下载，安装时，只选择ASP.NET和Web开发即可。</li>\n<li>TortoiseSVN <a href=\"https://tortoisesvn.net/downloads.html\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li>MYSQL 官网下载即可，选择5.7.22版本</li>\n<li>Navicat for mysql <a href=\"https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q\" target=\"_blank\" rel=\"noopener\">百度网盘地址</a> 密码：mi2p</li>\n</ul>\n<h4 id=\"另外vs2017中的插件-可选\"><a href=\"#另外vs2017中的插件-可选\" class=\"headerlink\" title=\"另外vs2017中的插件(可选)\"></a>另外vs2017中的插件(可选)</h4><ul>\n<li>visualsvn for visual studio 2017</li>\n<li>resharper </li>\n</ul>\n<h4 id=\"staticfiles开源库介绍、通用js\"><a href=\"#staticfiles开源库介绍、通用js\" class=\"headerlink\" title=\"staticfiles开源库介绍、通用js\"></a>staticfiles开源库介绍、通用js</h4><blockquote>\n<p>维护地址为 <a href=\"http://ip/summary/libs/staticfiles.git\" target=\"_blank\" rel=\"noopener\">http://ip/summary/libs/staticfiles.git</a><br>bower 静态资源地址 <a href=\"http://ip:5678/\" target=\"_blank\" rel=\"noopener\">http://ip:5678/</a></p>\n</blockquote>\n<ul>\n<li>easyui.default-extension.js为easyui增加默认属性，扩展jquery方法</li>\n<li>base.js 大多数项目通用的com对象，</li>\n<li>passwordComplexityHelper.js 让密码也可以在后台配置</li>\n<li>libs 这个文件夹下的js是Abp自带的通用js，改了abp.jquery.js，增加了abp.easyui.js,abp.layer.js，统一的调用接口，可以实现不同的弹框效果</li>\n</ul>\n<blockquote>\n<p>根目录新建.bowerrc文件，实现自定义bower仓库</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;registry&quot;: &quot;http://ip:5678&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;: 30000</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在web项目目录执行以下命令</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install staticfiles --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后端技术\"><a href=\"#后端技术\" class=\"headerlink\" title=\"后端技术\"></a>后端技术</h3><blockquote>\n<p>后端使用语言为C#,访问数据库技术主要采用EntityFrameWork6,复杂sql可使用dapper，数据库使用SQL server ,可切换成mysql,框架使用的ABP   <a href=\"http://www.aspnetboilerplate.com/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<ul>\n<li>ABP框架有哪些好处，可以参考如下文章<a href=\"https://www.cnblogs.com/farb/p/ABPIntro.html\" target=\"_blank\" rel=\"noopener\">ABP的一些优点</a></li>\n</ul>\n<ul>\n<li>在使用框架时，我们会发现，代码会更加规范，系统也更加稳定，</li>\n</ul>\n</blockquote>\n<h4 id=\"ABP-后端已完成的功能\"><a href=\"#ABP-后端已完成的功能\" class=\"headerlink\" title=\"ABP 后端已完成的功能\"></a>ABP 后端已完成的功能</h4><blockquote>\n<p>后端系统基本功能已经完善,还差一些，如:导入excel,导出excel,工作流。</p>\n</blockquote>\n<ul>\n<li>用户-角色-权限-日志-设置-文件-组织-登录-注册-找回密码-注册邮件激活-短信-双身份登录验证-通用增删改查-集成Dapper-自动迁移-svn提交后自动发布-缓存redis-字典管理-错误处理（跳404，403等）-兼容性差跳下载浏览器页面-不同开发模式下，使用不同的配置</li>\n<li></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"好用的前后端类库及安装包整合下载","path":"2019/06/10/大前端/好用的前后端类库及安装包整合下载/","eyeCatchImage":null,"excerpt":"记录平常使用的一些前端插件、安装包下载地址、插件、开源库等。","date":"2019-06-09T17:00:22.000Z","pv":0,"totalPV":0,"categories":"大前端","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"hexo-theme-material-x+gitalk","date":"2019-06-25T05:57:09.000Z","_content":"\n### hexo-theme-material-x +gitalk 实现评论系统集成\n关于hexo 中使用Material-x为主题时，增加评论系统 gitalk\n\n* material-x 主题  https://xaoxuu.com/wiki/material-x/third-party-services/index.html\n* gitalk开源地址 https://github.com/gitalk/gitalk\n\n<!-- more -->\n\n根目录的配置项\n~~~yml\ngitalk: 要使用哪个请复制到根目录配置文件！\n  clientID: 你的clientID\n  clientSecret: 你的clientSecret\n  repo: 你的repo名  #这个直接就是仓储名\n  owner: 你的GitHub名\n  admin: [] 至少填写你的GitHub名\n~~~\n\nclientID和clientSecret如何得到：\n1. 先要有github账号， 点击 New OAuth App（后面这个链接）： https://github.com/settings/applications/new\n2. 填写信息：\nApplication name 随便填，\nHomepage URL 和 Authorization callback URL 都写你的 网址，我的是：https://luoyunchong.github.io/hexo-blog/\n\n生成后，就会有clientID和clientSecret\n\n> 参考我的配置项\n\nhttps://github.com/luoyunchong/hexo-blog/blob/docs/_config.yml\n\n\n~~~\ngitalk: \n  clientID: 70ba179c7cf0f158ad7d\n  clientSecret: 76bea5d6863b98331709de2d6220bf439426d957\n  repo: hexo-blog\n  owner: luoyunchong\n  admin: [luoyunchong]\n~~~\n\n这个repo一定要是仓储名，而不是仓储地址，不然，会一直返回404 NOT FOUND\n\n\n\n* 报错出现 Error: Validation Failed.\n[https://github.com/gitalk/gitalk/issues/102](https://github.com/gitalk/gitalk/issues/102)\n总结主要的原因是\n> 由于label太长导致的无法评论,label的长度上限是50个字符，所以文章名有些长的都会生成label失败,也就没办法评论了.\n\n解决办法 ：文章名经URL编码后转MD5，然后再生成label，MD5值是固定长度的。引用md5的js,然后，给location.pathname使用md5加密\n\n我使用的material-x，打开themes/material-x/layout/_partial/scripts.ejs文件，修改成如下内容\n~~~javascript\n  <script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script>\n  <script type=\"text/javascript\">\n    var gitalk = new Gitalk({\n      clientID: \"<%- config.gitalk.clientID %>\",\n      clientSecret: \"<%- config.gitalk.clientSecret %>\",\n      repo: \"<%- config.gitalk.repo %>\",\n      owner: \"<%- config.gitalk.owner %>\",\n      admin: \"<%- config.gitalk.admin %>\",\n      <% if(page.gitalk && page.gitalk.id) { %>\n        id: \"<%= page.gitalk.id %>\",\n      <% } else { %>\n        id: md5(location.pathname),      // Ensure uniqueness and length less than 50\n      <% } %>\n      distractionFreeMode: false  // Facebook-like distraction free mode\n    });\n    gitalk.render('gitalk-container');\n  </script>\n~~~\n最重要的是引用\n\n~~~\n  <script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script> \n~~~\n和\n~~~\nid: md5(location.pathname)\n~~~\n\n* 当浏览到一个不存在的地址时，会跳转至404，然后，由于没有给404增加gitalk设置id，所以会出现多个404NOT FOUND issues，所以在404.md中增加如下配置 （“/404”为任意唯一字符串值）\n~~~\ngitalk:\n  id: /404\n~~~\n\n完整title\n~~~\n---\nlayout: page\ntitle: 404 Not Found\nbody: [article, comments]\nmeta:\n  header: false\n  footer: false\nsidebar: false\nvaline:\n  path: /404.html\n  placeholder: 请留言告诉我您要访问哪个页面找不到了\n---\n\n# <center>**404 Not Found**</center>\n\n<br>\n\n# <center>很抱歉，您访问的页面不存在</center>\n\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>\n~~~","source":"_posts/大前端/hexo-theme-material-x-gitalk.md","raw":"---\ntitle: hexo-theme-material-x+gitalk\ndate: 2019-06-25 13:57:09\ntags: \n- hexo\n- material-x\n- gitalk\ncategory: hexo\n---\n\n### hexo-theme-material-x +gitalk 实现评论系统集成\n关于hexo 中使用Material-x为主题时，增加评论系统 gitalk\n\n* material-x 主题  https://xaoxuu.com/wiki/material-x/third-party-services/index.html\n* gitalk开源地址 https://github.com/gitalk/gitalk\n\n<!-- more -->\n\n根目录的配置项\n~~~yml\ngitalk: 要使用哪个请复制到根目录配置文件！\n  clientID: 你的clientID\n  clientSecret: 你的clientSecret\n  repo: 你的repo名  #这个直接就是仓储名\n  owner: 你的GitHub名\n  admin: [] 至少填写你的GitHub名\n~~~\n\nclientID和clientSecret如何得到：\n1. 先要有github账号， 点击 New OAuth App（后面这个链接）： https://github.com/settings/applications/new\n2. 填写信息：\nApplication name 随便填，\nHomepage URL 和 Authorization callback URL 都写你的 网址，我的是：https://luoyunchong.github.io/hexo-blog/\n\n生成后，就会有clientID和clientSecret\n\n> 参考我的配置项\n\nhttps://github.com/luoyunchong/hexo-blog/blob/docs/_config.yml\n\n\n~~~\ngitalk: \n  clientID: 70ba179c7cf0f158ad7d\n  clientSecret: 76bea5d6863b98331709de2d6220bf439426d957\n  repo: hexo-blog\n  owner: luoyunchong\n  admin: [luoyunchong]\n~~~\n\n这个repo一定要是仓储名，而不是仓储地址，不然，会一直返回404 NOT FOUND\n\n\n\n* 报错出现 Error: Validation Failed.\n[https://github.com/gitalk/gitalk/issues/102](https://github.com/gitalk/gitalk/issues/102)\n总结主要的原因是\n> 由于label太长导致的无法评论,label的长度上限是50个字符，所以文章名有些长的都会生成label失败,也就没办法评论了.\n\n解决办法 ：文章名经URL编码后转MD5，然后再生成label，MD5值是固定长度的。引用md5的js,然后，给location.pathname使用md5加密\n\n我使用的material-x，打开themes/material-x/layout/_partial/scripts.ejs文件，修改成如下内容\n~~~javascript\n  <script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script>\n  <script type=\"text/javascript\">\n    var gitalk = new Gitalk({\n      clientID: \"<%- config.gitalk.clientID %>\",\n      clientSecret: \"<%- config.gitalk.clientSecret %>\",\n      repo: \"<%- config.gitalk.repo %>\",\n      owner: \"<%- config.gitalk.owner %>\",\n      admin: \"<%- config.gitalk.admin %>\",\n      <% if(page.gitalk && page.gitalk.id) { %>\n        id: \"<%= page.gitalk.id %>\",\n      <% } else { %>\n        id: md5(location.pathname),      // Ensure uniqueness and length less than 50\n      <% } %>\n      distractionFreeMode: false  // Facebook-like distraction free mode\n    });\n    gitalk.render('gitalk-container');\n  </script>\n~~~\n最重要的是引用\n\n~~~\n  <script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script> \n~~~\n和\n~~~\nid: md5(location.pathname)\n~~~\n\n* 当浏览到一个不存在的地址时，会跳转至404，然后，由于没有给404增加gitalk设置id，所以会出现多个404NOT FOUND issues，所以在404.md中增加如下配置 （“/404”为任意唯一字符串值）\n~~~\ngitalk:\n  id: /404\n~~~\n\n完整title\n~~~\n---\nlayout: page\ntitle: 404 Not Found\nbody: [article, comments]\nmeta:\n  header: false\n  footer: false\nsidebar: false\nvaline:\n  path: /404.html\n  placeholder: 请留言告诉我您要访问哪个页面找不到了\n---\n\n# <center>**404 Not Found**</center>\n\n<br>\n\n# <center>很抱歉，您访问的页面不存在</center>\n\n<center>可能是输入地址有误或该地址已被删除</center>\n\n<br>\n<br>\n~~~","slug":"大前端/hexo-theme-material-x-gitalk","published":1,"updated":"2019-06-25T14:47:07.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmitq000b00ux9fmpf5kl","content":"<h3 id=\"hexo-theme-material-x-gitalk-实现评论系统集成\"><a href=\"#hexo-theme-material-x-gitalk-实现评论系统集成\" class=\"headerlink\" title=\"hexo-theme-material-x +gitalk 实现评论系统集成\"></a>hexo-theme-material-x +gitalk 实现评论系统集成</h3><p>关于hexo 中使用Material-x为主题时，增加评论系统 gitalk</p>\n<ul>\n<li>material-x 主题  <a href=\"https://xaoxuu.com/wiki/material-x/third-party-services/index.html\" target=\"_blank\" rel=\"noopener\">https://xaoxuu.com/wiki/material-x/third-party-services/index.html</a></li>\n<li>gitalk开源地址 <a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk</a></li>\n</ul>\n<a id=\"more\"></a>\n\n<p>根目录的配置项</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">gitalk:</span> <span class=\"string\">要使用哪个请复制到根目录配置文件！</span></span><br><span class=\"line\"><span class=\"attr\">  clientID:</span> <span class=\"string\">你的clientID</span></span><br><span class=\"line\"><span class=\"attr\">  clientSecret:</span> <span class=\"string\">你的clientSecret</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">你的repo名</span>  <span class=\"comment\">#这个直接就是仓储名</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">你的GitHub名</span></span><br><span class=\"line\"><span class=\"attr\">  admin:</span> <span class=\"string\">[]</span> <span class=\"string\">至少填写你的GitHub名</span></span><br></pre></td></tr></table></figure>\n\n<p>clientID和clientSecret如何得到：</p>\n<ol>\n<li>先要有github账号， 点击 New OAuth App（后面这个链接）： <a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications/new</a></li>\n<li>填写信息：<br>Application name 随便填，<br>Homepage URL 和 Authorization callback URL 都写你的 网址，我的是：<a href=\"https://luoyunchong.github.io/hexo-blog/\">https://luoyunchong.github.io/hexo-blog/</a></li>\n</ol>\n<p>生成后，就会有clientID和clientSecret</p>\n<blockquote>\n<p>参考我的配置项</p>\n</blockquote>\n<p><a href=\"https://github.com/luoyunchong/hexo-blog/blob/docs/_config.yml\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/hexo-blog/blob/docs/_config.yml</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitalk: </span><br><span class=\"line\">  clientID: 70ba179c7cf0f158ad7d</span><br><span class=\"line\">  clientSecret: 76bea5d6863b98331709de2d6220bf439426d957</span><br><span class=\"line\">  repo: hexo-blog</span><br><span class=\"line\">  owner: luoyunchong</span><br><span class=\"line\">  admin: [luoyunchong]</span><br></pre></td></tr></table></figure>\n\n<p>这个repo一定要是仓储名，而不是仓储地址，不然，会一直返回404 NOT FOUND</p>\n<ul>\n<li>报错出现 Error: Validation Failed.<br><a href=\"https://github.com/gitalk/gitalk/issues/102\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk/issues/102</a><br>总结主要的原因是<blockquote>\n<p>由于label太长导致的无法评论,label的长度上限是50个字符，所以文章名有些长的都会生成label失败,也就没办法评论了.</p>\n</blockquote>\n</li>\n</ul>\n<p>解决办法 ：文章名经URL编码后转MD5，然后再生成label，MD5值是固定长度的。引用md5的js,然后，给location.pathname使用md5加密</p>\n<p>我使用的material-x，打开themes/material-x/layout/_partial/scripts.ejs文件，修改成如下内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> gitalk = <span class=\"keyword\">new</span> Gitalk(&#123;</span><br><span class=\"line\">    clientID: <span class=\"string\">\"&lt;%- config.gitalk.clientID %&gt;\"</span>,</span><br><span class=\"line\">    clientSecret: <span class=\"string\">\"&lt;%- config.gitalk.clientSecret %&gt;\"</span>,</span><br><span class=\"line\">    repo: <span class=\"string\">\"&lt;%- config.gitalk.repo %&gt;\"</span>,</span><br><span class=\"line\">    owner: <span class=\"string\">\"&lt;%- config.gitalk.owner %&gt;\"</span>,</span><br><span class=\"line\">    admin: <span class=\"string\">\"&lt;%- config.gitalk.admin %&gt;\"</span>,</span><br><span class=\"line\">    &lt;% <span class=\"keyword\">if</span>(page.gitalk &amp;&amp; page.gitalk.id) &#123; %&gt;</span><br><span class=\"line\">      id: <span class=\"string\">\"&lt;%= page.gitalk.id %&gt;\"</span>,</span><br><span class=\"line\">    &lt;% &#125; <span class=\"keyword\">else</span> &#123; %&gt;</span><br><span class=\"line\">      id: md5(location.pathname),      <span class=\"comment\">// Ensure uniqueness and length less than 50</span></span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">    distractionFreeMode: <span class=\"literal\">false</span>  <span class=\"comment\">// Facebook-like distraction free mode</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  gitalk.render(<span class=\"string\">'gitalk-container'</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最重要的是引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>和</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id: md5(location.pathname)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当浏览到一个不存在的地址时，会跳转至404，然后，由于没有给404增加gitalk设置id，所以会出现多个404NOT FOUND issues，所以在404.md中增加如下配置 （“/404”为任意唯一字符串值）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitalk:</span><br><span class=\"line\">  id: /404</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>完整title</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: page</span><br><span class=\"line\">title: 404 Not Found</span><br><span class=\"line\">body: [article, comments]</span><br><span class=\"line\">meta:</span><br><span class=\"line\">  header: false</span><br><span class=\"line\">  footer: false</span><br><span class=\"line\">sidebar: false</span><br><span class=\"line\">valine:</span><br><span class=\"line\">  path: /404.html</span><br><span class=\"line\">  placeholder: 请留言告诉我您要访问哪个页面找不到了</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"># &lt;center&gt;**404 Not Found**&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># &lt;center&gt;很抱歉，您访问的页面不存在&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;center&gt;可能是输入地址有误或该地址已被删除&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"hexo-theme-material-x-gitalk-实现评论系统集成\"><a href=\"#hexo-theme-material-x-gitalk-实现评论系统集成\" class=\"headerlink\" title=\"hexo-theme-material-x +gitalk 实现评论系统集成\"></a>hexo-theme-material-x +gitalk 实现评论系统集成</h3><p>关于hexo 中使用Material-x为主题时，增加评论系统 gitalk</p>\n<ul>\n<li>material-x 主题  <a href=\"https://xaoxuu.com/wiki/material-x/third-party-services/index.html\" target=\"_blank\" rel=\"noopener\">https://xaoxuu.com/wiki/material-x/third-party-services/index.html</a></li>\n<li>gitalk开源地址 <a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk</a></li>\n</ul>","more":"<p>根目录的配置项</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">gitalk:</span> <span class=\"string\">要使用哪个请复制到根目录配置文件！</span></span><br><span class=\"line\"><span class=\"attr\">  clientID:</span> <span class=\"string\">你的clientID</span></span><br><span class=\"line\"><span class=\"attr\">  clientSecret:</span> <span class=\"string\">你的clientSecret</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">你的repo名</span>  <span class=\"comment\">#这个直接就是仓储名</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">你的GitHub名</span></span><br><span class=\"line\"><span class=\"attr\">  admin:</span> <span class=\"string\">[]</span> <span class=\"string\">至少填写你的GitHub名</span></span><br></pre></td></tr></table></figure>\n\n<p>clientID和clientSecret如何得到：</p>\n<ol>\n<li>先要有github账号， 点击 New OAuth App（后面这个链接）： <a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/applications/new</a></li>\n<li>填写信息：<br>Application name 随便填，<br>Homepage URL 和 Authorization callback URL 都写你的 网址，我的是：<a href=\"https://luoyunchong.github.io/hexo-blog/\">https://luoyunchong.github.io/hexo-blog/</a></li>\n</ol>\n<p>生成后，就会有clientID和clientSecret</p>\n<blockquote>\n<p>参考我的配置项</p>\n</blockquote>\n<p><a href=\"https://github.com/luoyunchong/hexo-blog/blob/docs/_config.yml\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/hexo-blog/blob/docs/_config.yml</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitalk: </span><br><span class=\"line\">  clientID: 70ba179c7cf0f158ad7d</span><br><span class=\"line\">  clientSecret: 76bea5d6863b98331709de2d6220bf439426d957</span><br><span class=\"line\">  repo: hexo-blog</span><br><span class=\"line\">  owner: luoyunchong</span><br><span class=\"line\">  admin: [luoyunchong]</span><br></pre></td></tr></table></figure>\n\n<p>这个repo一定要是仓储名，而不是仓储地址，不然，会一直返回404 NOT FOUND</p>\n<ul>\n<li>报错出现 Error: Validation Failed.<br><a href=\"https://github.com/gitalk/gitalk/issues/102\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk/issues/102</a><br>总结主要的原因是<blockquote>\n<p>由于label太长导致的无法评论,label的长度上限是50个字符，所以文章名有些长的都会生成label失败,也就没办法评论了.</p>\n</blockquote>\n</li>\n</ul>\n<p>解决办法 ：文章名经URL编码后转MD5，然后再生成label，MD5值是固定长度的。引用md5的js,然后，给location.pathname使用md5加密</p>\n<p>我使用的material-x，打开themes/material-x/layout/_partial/scripts.ejs文件，修改成如下内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> gitalk = <span class=\"keyword\">new</span> Gitalk(&#123;</span><br><span class=\"line\">    clientID: <span class=\"string\">\"&lt;%- config.gitalk.clientID %&gt;\"</span>,</span><br><span class=\"line\">    clientSecret: <span class=\"string\">\"&lt;%- config.gitalk.clientSecret %&gt;\"</span>,</span><br><span class=\"line\">    repo: <span class=\"string\">\"&lt;%- config.gitalk.repo %&gt;\"</span>,</span><br><span class=\"line\">    owner: <span class=\"string\">\"&lt;%- config.gitalk.owner %&gt;\"</span>,</span><br><span class=\"line\">    admin: <span class=\"string\">\"&lt;%- config.gitalk.admin %&gt;\"</span>,</span><br><span class=\"line\">    &lt;% <span class=\"keyword\">if</span>(page.gitalk &amp;&amp; page.gitalk.id) &#123; %&gt;</span><br><span class=\"line\">      id: <span class=\"string\">\"&lt;%= page.gitalk.id %&gt;\"</span>,</span><br><span class=\"line\">    &lt;% &#125; <span class=\"keyword\">else</span> &#123; %&gt;</span><br><span class=\"line\">      id: md5(location.pathname),      <span class=\"comment\">// Ensure uniqueness and length less than 50</span></span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">    distractionFreeMode: <span class=\"literal\">false</span>  <span class=\"comment\">// Facebook-like distraction free mode</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  gitalk.render(<span class=\"string\">'gitalk-container'</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最重要的是引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>和</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id: md5(location.pathname)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当浏览到一个不存在的地址时，会跳转至404，然后，由于没有给404增加gitalk设置id，所以会出现多个404NOT FOUND issues，所以在404.md中增加如下配置 （“/404”为任意唯一字符串值）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitalk:</span><br><span class=\"line\">  id: /404</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>完整title</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: page</span><br><span class=\"line\">title: 404 Not Found</span><br><span class=\"line\">body: [article, comments]</span><br><span class=\"line\">meta:</span><br><span class=\"line\">  header: false</span><br><span class=\"line\">  footer: false</span><br><span class=\"line\">sidebar: false</span><br><span class=\"line\">valine:</span><br><span class=\"line\">  path: /404.html</span><br><span class=\"line\">  placeholder: 请留言告诉我您要访问哪个页面找不到了</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"># &lt;center&gt;**404 Not Found**&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># &lt;center&gt;很抱歉，您访问的页面不存在&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;center&gt;可能是输入地址有误或该地址已被删除&lt;/center&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;br&gt;</span><br><span class=\"line\">&lt;br&gt;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"hexo-theme-material-x+gitalk","path":"2019/06/25/大前端/hexo-theme-material-x-gitalk/","eyeCatchImage":null,"excerpt":"<h3 id=\"hexo-theme-material-x-gitalk-实现评论系统集成\"><a href=\"#hexo-theme-material-x-gitalk-实现评论系统集成\" class=\"headerlink\" title=\"hexo-theme-material-x +gitalk 实现评论系统集成\"></a>hexo-theme-material-x +gitalk 实现评论系统集成</h3><p>关于hexo 中使用Material-x为主题时，增加评论系统 gitalk</p>\n<ul>\n<li>material-x 主题  <a href=\"https://xaoxuu.com/wiki/material-x/third-party-services/index.html\" target=\"_blank\" rel=\"noopener\">https://xaoxuu.com/wiki/material-x/third-party-services/index.html</a></li>\n<li>gitalk开源地址 <a href=\"https://github.com/gitalk/gitalk\" target=\"_blank\" rel=\"noopener\">https://github.com/gitalk/gitalk</a></li>\n</ul>","date":"2019-06-25T05:57:09.000Z","pv":0,"totalPV":0,"categories":"hexo","tags":["hexo","material-x","gitalk"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Git的使用学习","date":"2019-06-25T05:58:06.000Z","_content":"\n\n- git 默认不区分文件名大小写,配置git大小写敏感\n\n~~~bash\ngit config core.ignorecase false\n~~~","source":"_posts/命令行专题/Git的使用学习.md","raw":"---\ntitle: Git的使用学习\ndate: 2019-06-25 13:58:06\ntags: Git\ncategory: Git\n---\n\n\n- git 默认不区分文件名大小写,配置git大小写敏感\n\n~~~bash\ngit config core.ignorecase false\n~~~","slug":"命令行专题/Git的使用学习","published":1,"updated":"2019-06-25T14:47:07.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmits000c00uxu6zkysd0","content":"<ul>\n<li>git 默认不区分文件名大小写,配置git大小写敏感</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.ignorecase <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>git 默认不区分文件名大小写,配置git大小写敏感</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.ignorecase <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"Git的使用学习","path":"2019/06/25/命令行专题/Git的使用学习/","eyeCatchImage":null,"excerpt":null,"date":"2019-06-25T05:58:06.000Z","pv":0,"totalPV":0,"categories":"Git","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"TypeScript学习记录- 数据类型基础","date":"2019-06-12T06:27:54.000Z","_content":"# TS 学习笔记记录\n相关文档\n- [TypeScript 入门教程-xcatliu](https://ts.xcatliu.com/)\n- [JavaScript高级程序设计（第三版）pdf的下载地址](https://blog.csdn.net/gao531162436/article/details/79087456)\n- [JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/?q=)\n- [Typescript教程_Typescript视频教程 ts入门实战视频教程](https://www.bilibili.com/video/av38379328/?p=1)\n\n<!-- more -->\n\n## 原始数据类型 \n原始数据类型包括布尔值、数值、字符串、null、undefined、Symbol。\n\n* 定义一个布尔值\n~~~\nlet isOk:boolean =false;\n~~~\n* 定义一个数值\n~~~\nlet literal:number=10;\n~~~\n\n* 定义 字符串\n~~~\nlet name:string=\"luo\";\n~~~\n\n* 空值\n~~~\n function alertName(name:string):void{\n\talert(\"my name is \"+name);\n}\n~~~\n* null 和undefined\n~~~\nlet u: undefined = undefined;\nlet n: null = null;\n~~~\n\nvoid 与null和undefined不同点在于，null和undefined是所有类型的子类型，null和undefined可赋值给他的父类型。\n\n## 任意值\n\n*   任意值类型\n~~~\n let name:any=\"1234\";\n name = 111;\n~~~\n\n如果是 any 类型，则允许被赋值为任意类型。\n\n* 未声明类型的变量\n变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：不管后来有没有被赋值，都会推断成any类型。\n~~~\nlet st;\nst=\"1111\";\nst=111;\n~~~\n\n##  类型推断\n 当定义变量时，未指定明确的类型时，TS会根据类型推论的规则推断出这个变量的类型\n\n~~~\nlet myFav=“This is a string!\";\n~~~\n等价于\n~~~\nlet myFav:string=\"This is a string!\";\n~~~\n\n## 联合类型\n表示取值可以为多种类型中的一种。\n \n* let 变量名:变量类型|变量类型;使用  **|** 分隔数据类型。\n~~~\nlet myFavoriteNumber:string|number;\nmyFavoriteNumber = 'seven';\nmyFavoriteNumber = 7;\n~~~\n \n * 访问联合类型属性或方法。\n 要注意只有当TypeScript不确定一个联合类型的变量到底是哪个类型时，只能访问联合属性中共有的属性或方法\n~~~\nfunction getLength(something: string | number): number {\n    return something.length;\n}\n\n// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.\n//   Property 'length' does not exist on type 'number'.\n~~~\n报错原因是无法知道参数是string 还是number，number类型没有length属性，所以异常。\n\n~~~\nlet myFavoriteNumber: string | number;\nmyFavoriteNumber = 'seven';\nconsole.log(myFavoriteNumber.length); // 5\nmyFavoriteNumber = 7;\nconsole.log(myFavoriteNumber.length); // 编译时报错\n\n// index.ts(5,30): error TS2339: Property 'length' does not exist on type 'number'.\n~~~\n只有console.log(myFavoriteNumber.length); // 编译时报错，第二行中 myFavoriteNumber 被推断成 **string**，所以 访问**length**时无异常，第四行 其被推断成 **number**,访问**length**会异常。\n\n\n## 对象的类型-接口\n接口是一种规范，他定义了一个事物的基础属性，规则。\n* 定义接口\n```\ninterface Person {\n    readonly id:number;\n    name: string;\n    age?: number;\n    [propName: string]:any;\n}\n```\nid 前加 **readonly** 表示该字段为只读属性，只有第一次给对象 **Person**赋值时 **id** 必须有值，后面无法给此值赋值。\nage后面加 **?** 表示该属性为可选属性。定义变量时可为空，\n[propName: string]  任意属性 ,定义属性值 为 **string** 类型的值。**当定义任意属性后，确定的属性和可选属性必须为这个类型的子集**\n\n## 数组类型\n* 「类型 + 方括号」来表示数组\n~~~\nlet fibonacci: number[] = [1, 1, 2, 3, 5];\nlet fibonacci: (number | string)[] = [1, '1', 2, 3, 5];\n// any 表示数组中可出现任意类型,也可使用默认的类型推断。去掉类型 any[]\nlet list: any[] = ['Xcat Liu', 25, { website: 'http://xcatliu.com' }];\n~~~\n\n* 数组泛型\n~~~\nArray<elemType> 来表示数组\n\nlet fibonacci: Array<number> = [1, 1, 2, 3, 5];\n~~~\n\n* 使用接口实现数组\n\n~~~\ninterface NumberArray {\n    [index: number]: number;\n}\nlet fibonacci: NumberArray = [1, 1, 2, 3, 5];\n~~~\n\n* 类数组 \n内置对象 IArguments \n~~~\nfunction sum() {\n    let args: IArguments = arguments;\n}\n~~~\n\n## 函数的类型\n * 函数声明\n~~~\nfunction sum(x: number, y: number): number {\n    return x + y;\n}\n~~~\n* 函数表达式\n\n~~~\nlet mySum=function(x:number,y:number):number{\n\treturn x+y;\n}\n~~~\nmySum其实未指定类型，而是通过类型推断实现的，手动指定mySum的类型\n~~~\nlet mySum:(x:number,y:number)=>number=function(x:number,y:number):number{\n\treturn x+y;\n}\n~~~\n在TyepScript中  **=>** 表示函数的定义，**左边是输入类型，右边是输出类型**\n\n[ES6中的箭头函数相关介绍](http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0)\n\n* 使用接口定义函数类型\n\n~~~\ninterface searchFunc{\n\t(source:string,subString:string):boolean;\n}\nlet mySearch:searchFunc;\n\nmySearch=function(source:string,subString:string):boolean{\n    return source.search(subString) !== -1;\n}\n~~~\n* 可选参数、参数默认值\n使用 **？** 表示可选择的参数，有默认值的参数为可选参数，但不受 **「可选参数必须接在必需参数后面」的限制了**\n可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了\n\n~~~\nfunction buildName(firstName: string='Tom', lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName('Tom');\n~~~\n\n## 类型断言\n断言，不是类型转换，无法将一个联合类型转换成一个不存在的类型是不可以的。\n~~~\n//定义类型:<类型>值\nlet something: string | number=\"1234\";\nlet str=<string>something;//这是正确的，可以将联合类型转换成一个更加具体的类型\nlet bol=<boolearn>something;//异常，Type 'string | number' cannot be converted to type 'boolean'\n~~~","source":"_posts/大前端/TypeScript学习记录- 数据类型基础.md","raw":"---\ntitle: TypeScript学习记录- 数据类型基础\ndate: 2019-06-12 14:27:54\ntags: TypeScript\n---\n# TS 学习笔记记录\n相关文档\n- [TypeScript 入门教程-xcatliu](https://ts.xcatliu.com/)\n- [JavaScript高级程序设计（第三版）pdf的下载地址](https://blog.csdn.net/gao531162436/article/details/79087456)\n- [JS 函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/?q=)\n- [Typescript教程_Typescript视频教程 ts入门实战视频教程](https://www.bilibili.com/video/av38379328/?p=1)\n\n<!-- more -->\n\n## 原始数据类型 \n原始数据类型包括布尔值、数值、字符串、null、undefined、Symbol。\n\n* 定义一个布尔值\n~~~\nlet isOk:boolean =false;\n~~~\n* 定义一个数值\n~~~\nlet literal:number=10;\n~~~\n\n* 定义 字符串\n~~~\nlet name:string=\"luo\";\n~~~\n\n* 空值\n~~~\n function alertName(name:string):void{\n\talert(\"my name is \"+name);\n}\n~~~\n* null 和undefined\n~~~\nlet u: undefined = undefined;\nlet n: null = null;\n~~~\n\nvoid 与null和undefined不同点在于，null和undefined是所有类型的子类型，null和undefined可赋值给他的父类型。\n\n## 任意值\n\n*   任意值类型\n~~~\n let name:any=\"1234\";\n name = 111;\n~~~\n\n如果是 any 类型，则允许被赋值为任意类型。\n\n* 未声明类型的变量\n变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：不管后来有没有被赋值，都会推断成any类型。\n~~~\nlet st;\nst=\"1111\";\nst=111;\n~~~\n\n##  类型推断\n 当定义变量时，未指定明确的类型时，TS会根据类型推论的规则推断出这个变量的类型\n\n~~~\nlet myFav=“This is a string!\";\n~~~\n等价于\n~~~\nlet myFav:string=\"This is a string!\";\n~~~\n\n## 联合类型\n表示取值可以为多种类型中的一种。\n \n* let 变量名:变量类型|变量类型;使用  **|** 分隔数据类型。\n~~~\nlet myFavoriteNumber:string|number;\nmyFavoriteNumber = 'seven';\nmyFavoriteNumber = 7;\n~~~\n \n * 访问联合类型属性或方法。\n 要注意只有当TypeScript不确定一个联合类型的变量到底是哪个类型时，只能访问联合属性中共有的属性或方法\n~~~\nfunction getLength(something: string | number): number {\n    return something.length;\n}\n\n// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.\n//   Property 'length' does not exist on type 'number'.\n~~~\n报错原因是无法知道参数是string 还是number，number类型没有length属性，所以异常。\n\n~~~\nlet myFavoriteNumber: string | number;\nmyFavoriteNumber = 'seven';\nconsole.log(myFavoriteNumber.length); // 5\nmyFavoriteNumber = 7;\nconsole.log(myFavoriteNumber.length); // 编译时报错\n\n// index.ts(5,30): error TS2339: Property 'length' does not exist on type 'number'.\n~~~\n只有console.log(myFavoriteNumber.length); // 编译时报错，第二行中 myFavoriteNumber 被推断成 **string**，所以 访问**length**时无异常，第四行 其被推断成 **number**,访问**length**会异常。\n\n\n## 对象的类型-接口\n接口是一种规范，他定义了一个事物的基础属性，规则。\n* 定义接口\n```\ninterface Person {\n    readonly id:number;\n    name: string;\n    age?: number;\n    [propName: string]:any;\n}\n```\nid 前加 **readonly** 表示该字段为只读属性，只有第一次给对象 **Person**赋值时 **id** 必须有值，后面无法给此值赋值。\nage后面加 **?** 表示该属性为可选属性。定义变量时可为空，\n[propName: string]  任意属性 ,定义属性值 为 **string** 类型的值。**当定义任意属性后，确定的属性和可选属性必须为这个类型的子集**\n\n## 数组类型\n* 「类型 + 方括号」来表示数组\n~~~\nlet fibonacci: number[] = [1, 1, 2, 3, 5];\nlet fibonacci: (number | string)[] = [1, '1', 2, 3, 5];\n// any 表示数组中可出现任意类型,也可使用默认的类型推断。去掉类型 any[]\nlet list: any[] = ['Xcat Liu', 25, { website: 'http://xcatliu.com' }];\n~~~\n\n* 数组泛型\n~~~\nArray<elemType> 来表示数组\n\nlet fibonacci: Array<number> = [1, 1, 2, 3, 5];\n~~~\n\n* 使用接口实现数组\n\n~~~\ninterface NumberArray {\n    [index: number]: number;\n}\nlet fibonacci: NumberArray = [1, 1, 2, 3, 5];\n~~~\n\n* 类数组 \n内置对象 IArguments \n~~~\nfunction sum() {\n    let args: IArguments = arguments;\n}\n~~~\n\n## 函数的类型\n * 函数声明\n~~~\nfunction sum(x: number, y: number): number {\n    return x + y;\n}\n~~~\n* 函数表达式\n\n~~~\nlet mySum=function(x:number,y:number):number{\n\treturn x+y;\n}\n~~~\nmySum其实未指定类型，而是通过类型推断实现的，手动指定mySum的类型\n~~~\nlet mySum:(x:number,y:number)=>number=function(x:number,y:number):number{\n\treturn x+y;\n}\n~~~\n在TyepScript中  **=>** 表示函数的定义，**左边是输入类型，右边是输出类型**\n\n[ES6中的箭头函数相关介绍](http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0)\n\n* 使用接口定义函数类型\n\n~~~\ninterface searchFunc{\n\t(source:string,subString:string):boolean;\n}\nlet mySearch:searchFunc;\n\nmySearch=function(source:string,subString:string):boolean{\n    return source.search(subString) !== -1;\n}\n~~~\n* 可选参数、参数默认值\n使用 **？** 表示可选择的参数，有默认值的参数为可选参数，但不受 **「可选参数必须接在必需参数后面」的限制了**\n可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了\n\n~~~\nfunction buildName(firstName: string='Tom', lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n}\nlet tomcat = buildName('Tom', 'Cat');\nlet tom = buildName('Tom');\n~~~\n\n## 类型断言\n断言，不是类型转换，无法将一个联合类型转换成一个不存在的类型是不可以的。\n~~~\n//定义类型:<类型>值\nlet something: string | number=\"1234\";\nlet str=<string>something;//这是正确的，可以将联合类型转换成一个更加具体的类型\nlet bol=<boolearn>something;//异常，Type 'string | number' cannot be converted to type 'boolean'\n~~~","slug":"大前端/TypeScript学习记录- 数据类型基础","published":1,"updated":"2019-06-25T14:47:07.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmitw000g00ux78l3w7v6","content":"<h1 id=\"TS-学习笔记记录\"><a href=\"#TS-学习笔记记录\" class=\"headerlink\" title=\"TS 学习笔记记录\"></a>TS 学习笔记记录</h1><p>相关文档</p>\n<ul>\n<li><a href=\"https://ts.xcatliu.com/\" target=\"_blank\" rel=\"noopener\">TypeScript 入门教程-xcatliu</a></li>\n<li><a href=\"https://blog.csdn.net/gao531162436/article/details/79087456\" target=\"_blank\" rel=\"noopener\">JavaScript高级程序设计（第三版）pdf的下载地址</a></li>\n<li><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/?q=\" target=\"_blank\" rel=\"noopener\">JS 函数式编程指南</a></li>\n<li><a href=\"https://www.bilibili.com/video/av38379328/?p=1\" target=\"_blank\" rel=\"noopener\">Typescript教程_Typescript视频教程 ts入门实战视频教程</a></li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h2><p>原始数据类型包括布尔值、数值、字符串、null、undefined、Symbol。</p>\n<ul>\n<li><p>定义一个布尔值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let isOk:boolean =false;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个数值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let literal:number=10;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义 字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let name:string=&quot;luo&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function alertName(name:string):void&#123;</span><br><span class=\"line\">\talert(&quot;my name is &quot;+name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>null 和undefined</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let u: undefined = undefined;</span><br><span class=\"line\">let n: null = null;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>void 与null和undefined不同点在于，null和undefined是所有类型的子类型，null和undefined可赋值给他的父类型。</p>\n<h2 id=\"任意值\"><a href=\"#任意值\" class=\"headerlink\" title=\"任意值\"></a>任意值</h2><ul>\n<li>任意值类型<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let name:any=&quot;1234&quot;;</span><br><span class=\"line\">name = 111;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果是 any 类型，则允许被赋值为任意类型。</p>\n<ul>\n<li>未声明类型的变量<br>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：不管后来有没有被赋值，都会推断成any类型。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let st;</span><br><span class=\"line\">st=&quot;1111&quot;;</span><br><span class=\"line\">st=111;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"类型推断\"><a href=\"#类型推断\" class=\"headerlink\" title=\"类型推断\"></a>类型推断</h2><p> 当定义变量时，未指定明确的类型时，TS会根据类型推论的规则推断出这个变量的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myFav=“This is a string!&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myFav:string=&quot;This is a string!&quot;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h2><p>表示取值可以为多种类型中的一种。</p>\n<ul>\n<li>let 变量名:变量类型|变量类型;使用  <strong>|</strong> 分隔数据类型。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myFavoriteNumber:string|number;</span><br><span class=\"line\">myFavoriteNumber = &apos;seven&apos;;</span><br><span class=\"line\">myFavoriteNumber = 7;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>访问联合类型属性或方法。<br>要注意只有当TypeScript不确定一个联合类型的变量到底是哪个类型时，只能访问联合属性中共有的属性或方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getLength(something: string | number): number &#123;</span><br><span class=\"line\">    return something.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(2,22): error TS2339: Property &apos;length&apos; does not exist on type &apos;string | number&apos;.</span><br><span class=\"line\">//   Property &apos;length&apos; does not exist on type &apos;number&apos;.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>报错原因是无法知道参数是string 还是number，number类型没有length属性，所以异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myFavoriteNumber: string | number;</span><br><span class=\"line\">myFavoriteNumber = &apos;seven&apos;;</span><br><span class=\"line\">console.log(myFavoriteNumber.length); // 5</span><br><span class=\"line\">myFavoriteNumber = 7;</span><br><span class=\"line\">console.log(myFavoriteNumber.length); // 编译时报错</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(5,30): error TS2339: Property &apos;length&apos; does not exist on type &apos;number&apos;.</span><br></pre></td></tr></table></figure>\n\n<p>只有console.log(myFavoriteNumber.length); // 编译时报错，第二行中 myFavoriteNumber 被推断成 <strong>string</strong>，所以 访问<strong>length</strong>时无异常，第四行 其被推断成 <strong>number</strong>,访问<strong>length</strong>会异常。</p>\n<h2 id=\"对象的类型-接口\"><a href=\"#对象的类型-接口\" class=\"headerlink\" title=\"对象的类型-接口\"></a>对象的类型-接口</h2><p>接口是一种规范，他定义了一个事物的基础属性，规则。</p>\n<ul>\n<li>定义接口<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id:number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]:any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>id 前加 <strong>readonly</strong> 表示该字段为只读属性，只有第一次给对象 <strong>Person</strong>赋值时 <strong>id</strong> 必须有值，后面无法给此值赋值。<br>age后面加 <strong>?</strong> 表示该属性为可选属性。定义变量时可为空，<br>[propName: string]  任意属性 ,定义属性值 为 <strong>string</strong> 类型的值。<strong>当定义任意属性后，确定的属性和可选属性必须为这个类型的子集</strong></p>\n<h2 id=\"数组类型\"><a href=\"#数组类型\" class=\"headerlink\" title=\"数组类型\"></a>数组类型</h2><ul>\n<li><p>「类型 + 方括号」来表示数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fibonacci: number[] = [1, 1, 2, 3, 5];</span><br><span class=\"line\">let fibonacci: (number | string)[] = [1, &apos;1&apos;, 2, 3, 5];</span><br><span class=\"line\">// any 表示数组中可出现任意类型,也可使用默认的类型推断。去掉类型 any[]</span><br><span class=\"line\">let list: any[] = [&apos;Xcat Liu&apos;, 25, &#123; website: &apos;http://xcatliu.com&apos; &#125;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组泛型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array&lt;elemType&gt; 来表示数组</span><br><span class=\"line\"></span><br><span class=\"line\">let fibonacci: Array&lt;number&gt; = [1, 1, 2, 3, 5];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用接口实现数组</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface NumberArray &#123;</span><br><span class=\"line\">    [index: number]: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let fibonacci: NumberArray = [1, 1, 2, 3, 5];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类数组<br>内置对象 IArguments <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum() &#123;</span><br><span class=\"line\">    let args: IArguments = arguments;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"函数的类型\"><a href=\"#函数的类型\" class=\"headerlink\" title=\"函数的类型\"></a>函数的类型</h2><ul>\n<li>函数声明<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(x: number, y: number): number &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li>函数表达式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let mySum=function(x:number,y:number):number&#123;</span><br><span class=\"line\">\treturn x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mySum其实未指定类型，而是通过类型推断实现的，手动指定mySum的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let mySum:(x:number,y:number)=&gt;number=function(x:number,y:number):number&#123;</span><br><span class=\"line\">\treturn x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在TyepScript中  <strong>=&gt;</strong> 表示函数的定义，<strong>左边是输入类型，右边是输出类型</strong></p>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\">ES6中的箭头函数相关介绍</a></p>\n<ul>\n<li>使用接口定义函数类型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface searchFunc&#123;</span><br><span class=\"line\">\t(source:string,subString:string):boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let mySearch:searchFunc;</span><br><span class=\"line\"></span><br><span class=\"line\">mySearch=function(source:string,subString:string):boolean&#123;</span><br><span class=\"line\">    return source.search(subString) !== -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可选参数、参数默认值<br>使用 <strong>？</strong> 表示可选择的参数，有默认值的参数为可选参数，但不受 <strong>「可选参数必须接在必需参数后面」的限制了</strong><br>可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function buildName(firstName: string=&apos;Tom&apos;, lastName?: string) &#123;</span><br><span class=\"line\">    if (lastName) &#123;</span><br><span class=\"line\">        return firstName + &apos; &apos; + lastName;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let tomcat = buildName(&apos;Tom&apos;, &apos;Cat&apos;);</span><br><span class=\"line\">let tom = buildName(&apos;Tom&apos;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>断言，不是类型转换，无法将一个联合类型转换成一个不存在的类型是不可以的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义类型:&lt;类型&gt;值</span><br><span class=\"line\">let something: string | number=&quot;1234&quot;;</span><br><span class=\"line\">let str=&lt;string&gt;something;//这是正确的，可以将联合类型转换成一个更加具体的类型</span><br><span class=\"line\">let bol=&lt;boolearn&gt;something;//异常，Type &apos;string | number&apos; cannot be converted to type &apos;boolean&apos;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"TS-学习笔记记录\"><a href=\"#TS-学习笔记记录\" class=\"headerlink\" title=\"TS 学习笔记记录\"></a>TS 学习笔记记录</h1><p>相关文档</p>\n<ul>\n<li><a href=\"https://ts.xcatliu.com/\" target=\"_blank\" rel=\"noopener\">TypeScript 入门教程-xcatliu</a></li>\n<li><a href=\"https://blog.csdn.net/gao531162436/article/details/79087456\" target=\"_blank\" rel=\"noopener\">JavaScript高级程序设计（第三版）pdf的下载地址</a></li>\n<li><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/?q=\" target=\"_blank\" rel=\"noopener\">JS 函数式编程指南</a></li>\n<li><a href=\"https://www.bilibili.com/video/av38379328/?p=1\" target=\"_blank\" rel=\"noopener\">Typescript教程_Typescript视频教程 ts入门实战视频教程</a></li>\n</ul>","more":"<h2 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h2><p>原始数据类型包括布尔值、数值、字符串、null、undefined、Symbol。</p>\n<ul>\n<li><p>定义一个布尔值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let isOk:boolean =false;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义一个数值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let literal:number=10;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义 字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let name:string=&quot;luo&quot;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function alertName(name:string):void&#123;</span><br><span class=\"line\">\talert(&quot;my name is &quot;+name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>null 和undefined</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let u: undefined = undefined;</span><br><span class=\"line\">let n: null = null;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>void 与null和undefined不同点在于，null和undefined是所有类型的子类型，null和undefined可赋值给他的父类型。</p>\n<h2 id=\"任意值\"><a href=\"#任意值\" class=\"headerlink\" title=\"任意值\"></a>任意值</h2><ul>\n<li>任意值类型<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let name:any=&quot;1234&quot;;</span><br><span class=\"line\">name = 111;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>如果是 any 类型，则允许被赋值为任意类型。</p>\n<ul>\n<li>未声明类型的变量<br>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：不管后来有没有被赋值，都会推断成any类型。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let st;</span><br><span class=\"line\">st=&quot;1111&quot;;</span><br><span class=\"line\">st=111;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"类型推断\"><a href=\"#类型推断\" class=\"headerlink\" title=\"类型推断\"></a>类型推断</h2><p> 当定义变量时，未指定明确的类型时，TS会根据类型推论的规则推断出这个变量的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myFav=“This is a string!&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myFav:string=&quot;This is a string!&quot;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h2><p>表示取值可以为多种类型中的一种。</p>\n<ul>\n<li>let 变量名:变量类型|变量类型;使用  <strong>|</strong> 分隔数据类型。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myFavoriteNumber:string|number;</span><br><span class=\"line\">myFavoriteNumber = &apos;seven&apos;;</span><br><span class=\"line\">myFavoriteNumber = 7;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>访问联合类型属性或方法。<br>要注意只有当TypeScript不确定一个联合类型的变量到底是哪个类型时，只能访问联合属性中共有的属性或方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getLength(something: string | number): number &#123;</span><br><span class=\"line\">    return something.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(2,22): error TS2339: Property &apos;length&apos; does not exist on type &apos;string | number&apos;.</span><br><span class=\"line\">//   Property &apos;length&apos; does not exist on type &apos;number&apos;.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>报错原因是无法知道参数是string 还是number，number类型没有length属性，所以异常。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myFavoriteNumber: string | number;</span><br><span class=\"line\">myFavoriteNumber = &apos;seven&apos;;</span><br><span class=\"line\">console.log(myFavoriteNumber.length); // 5</span><br><span class=\"line\">myFavoriteNumber = 7;</span><br><span class=\"line\">console.log(myFavoriteNumber.length); // 编译时报错</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(5,30): error TS2339: Property &apos;length&apos; does not exist on type &apos;number&apos;.</span><br></pre></td></tr></table></figure>\n\n<p>只有console.log(myFavoriteNumber.length); // 编译时报错，第二行中 myFavoriteNumber 被推断成 <strong>string</strong>，所以 访问<strong>length</strong>时无异常，第四行 其被推断成 <strong>number</strong>,访问<strong>length</strong>会异常。</p>\n<h2 id=\"对象的类型-接口\"><a href=\"#对象的类型-接口\" class=\"headerlink\" title=\"对象的类型-接口\"></a>对象的类型-接口</h2><p>接口是一种规范，他定义了一个事物的基础属性，规则。</p>\n<ul>\n<li>定义接口<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id:number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]:any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>id 前加 <strong>readonly</strong> 表示该字段为只读属性，只有第一次给对象 <strong>Person</strong>赋值时 <strong>id</strong> 必须有值，后面无法给此值赋值。<br>age后面加 <strong>?</strong> 表示该属性为可选属性。定义变量时可为空，<br>[propName: string]  任意属性 ,定义属性值 为 <strong>string</strong> 类型的值。<strong>当定义任意属性后，确定的属性和可选属性必须为这个类型的子集</strong></p>\n<h2 id=\"数组类型\"><a href=\"#数组类型\" class=\"headerlink\" title=\"数组类型\"></a>数组类型</h2><ul>\n<li><p>「类型 + 方括号」来表示数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let fibonacci: number[] = [1, 1, 2, 3, 5];</span><br><span class=\"line\">let fibonacci: (number | string)[] = [1, &apos;1&apos;, 2, 3, 5];</span><br><span class=\"line\">// any 表示数组中可出现任意类型,也可使用默认的类型推断。去掉类型 any[]</span><br><span class=\"line\">let list: any[] = [&apos;Xcat Liu&apos;, 25, &#123; website: &apos;http://xcatliu.com&apos; &#125;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数组泛型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array&lt;elemType&gt; 来表示数组</span><br><span class=\"line\"></span><br><span class=\"line\">let fibonacci: Array&lt;number&gt; = [1, 1, 2, 3, 5];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用接口实现数组</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface NumberArray &#123;</span><br><span class=\"line\">    [index: number]: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let fibonacci: NumberArray = [1, 1, 2, 3, 5];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类数组<br>内置对象 IArguments <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum() &#123;</span><br><span class=\"line\">    let args: IArguments = arguments;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"函数的类型\"><a href=\"#函数的类型\" class=\"headerlink\" title=\"函数的类型\"></a>函数的类型</h2><ul>\n<li>函数声明<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sum(x: number, y: number): number &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li>函数表达式</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let mySum=function(x:number,y:number):number&#123;</span><br><span class=\"line\">\treturn x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mySum其实未指定类型，而是通过类型推断实现的，手动指定mySum的类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let mySum:(x:number,y:number)=&gt;number=function(x:number,y:number):number&#123;</span><br><span class=\"line\">\treturn x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在TyepScript中  <strong>=&gt;</strong> 表示函数的定义，<strong>左边是输入类型，右边是输出类型</strong></p>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/function#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\" target=\"_blank\" rel=\"noopener\">ES6中的箭头函数相关介绍</a></p>\n<ul>\n<li>使用接口定义函数类型</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface searchFunc&#123;</span><br><span class=\"line\">\t(source:string,subString:string):boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let mySearch:searchFunc;</span><br><span class=\"line\"></span><br><span class=\"line\">mySearch=function(source:string,subString:string):boolean&#123;</span><br><span class=\"line\">    return source.search(subString) !== -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可选参数、参数默认值<br>使用 <strong>？</strong> 表示可选择的参数，有默认值的参数为可选参数，但不受 <strong>「可选参数必须接在必需参数后面」的限制了</strong><br>可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function buildName(firstName: string=&apos;Tom&apos;, lastName?: string) &#123;</span><br><span class=\"line\">    if (lastName) &#123;</span><br><span class=\"line\">        return firstName + &apos; &apos; + lastName;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let tomcat = buildName(&apos;Tom&apos;, &apos;Cat&apos;);</span><br><span class=\"line\">let tom = buildName(&apos;Tom&apos;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>断言，不是类型转换，无法将一个联合类型转换成一个不存在的类型是不可以的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义类型:&lt;类型&gt;值</span><br><span class=\"line\">let something: string | number=&quot;1234&quot;;</span><br><span class=\"line\">let str=&lt;string&gt;something;//这是正确的，可以将联合类型转换成一个更加具体的类型</span><br><span class=\"line\">let bol=&lt;boolearn&gt;something;//异常，Type &apos;string | number&apos; cannot be converted to type &apos;boolean&apos;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"TypeScript学习记录- 数据类型基础","path":"2019/06/12/大前端/TypeScript学习记录- 数据类型基础/","eyeCatchImage":null,"excerpt":"<h1 id=\"TS-学习笔记记录\"><a href=\"#TS-学习笔记记录\" class=\"headerlink\" title=\"TS 学习笔记记录\"></a>TS 学习笔记记录</h1><p>相关文档</p>\n<ul>\n<li><a href=\"https://ts.xcatliu.com/\" target=\"_blank\" rel=\"noopener\">TypeScript 入门教程-xcatliu</a></li>\n<li><a href=\"https://blog.csdn.net/gao531162436/article/details/79087456\" target=\"_blank\" rel=\"noopener\">JavaScript高级程序设计（第三版）pdf的下载地址</a></li>\n<li><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/?q=\" target=\"_blank\" rel=\"noopener\">JS 函数式编程指南</a></li>\n<li><a href=\"https://www.bilibili.com/video/av38379328/?p=1\" target=\"_blank\" rel=\"noopener\">Typescript教程_Typescript视频教程 ts入门实战视频教程</a></li>\n</ul>","date":"2019-06-12T06:27:54.000Z","pv":0,"totalPV":0,"categories":"","tags":["TypeScript"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"收集文档","date":"2019-03-24T06:42:01.000Z","description":"记录自己的日常问题找到的解决方案","_content":"\n* Ubuntu 安装redis两种方式 教程\n[解决方案](http://www.cnblogs.com/langtianya/p/5187681.html \"点我搞事情！\")\n* 在Ubuntu中安装Redis,设置密码，远程访问\n[解决方案](http://blog.csdn.net/yxwb1253587469/article/details/72466647)\n* 关于学习算法的路上，有哪些需要学习的（南阳理工的题目）\n[学习思路](http://acm.nyist.net/JudgeOnline/step.php)\n\n# IIS 7.5 部署项目解决问题\n\n* Service Unavailable HTTP Error 503. The service is unavailable \n[解决方案](http://www.cnblogs.com/fri-yu/p/4078995.html \"点我搞事情！\")\n* 出现：发布mvc报错：403.14-Forbidden Web 服务器被配置为不列出此目录的内容 \n[解决方案](http://www.cnblogs.com/youring2/p/3545175.html  \"点我搞事情！\")\n* 出现.svg .woff .woff2 文件，需要有以下配置 [解决方案](https://my.oschina.net/u/554046/blog/270689 \"点我搞事情!\")\n* 不能在此路径中使用此配置节。如果在父级别上锁定了该节,便会出现这种情况 500.19  [解决方案](http://www.cnblogs.com/cookiebin/p/5911644.html)","source":"_posts/命令行专题/收集文档.md","raw":"---\ntitle: 收集文档\ndate: 2019-03-24 14:42:01\ndescription: 记录自己的日常问题找到的解决方案\ntags: \n- Ubuntu\n- Redis \n- IIS\ncategory:\n- 日常问题\n---\n\n* Ubuntu 安装redis两种方式 教程\n[解决方案](http://www.cnblogs.com/langtianya/p/5187681.html \"点我搞事情！\")\n* 在Ubuntu中安装Redis,设置密码，远程访问\n[解决方案](http://blog.csdn.net/yxwb1253587469/article/details/72466647)\n* 关于学习算法的路上，有哪些需要学习的（南阳理工的题目）\n[学习思路](http://acm.nyist.net/JudgeOnline/step.php)\n\n# IIS 7.5 部署项目解决问题\n\n* Service Unavailable HTTP Error 503. The service is unavailable \n[解决方案](http://www.cnblogs.com/fri-yu/p/4078995.html \"点我搞事情！\")\n* 出现：发布mvc报错：403.14-Forbidden Web 服务器被配置为不列出此目录的内容 \n[解决方案](http://www.cnblogs.com/youring2/p/3545175.html  \"点我搞事情！\")\n* 出现.svg .woff .woff2 文件，需要有以下配置 [解决方案](https://my.oschina.net/u/554046/blog/270689 \"点我搞事情!\")\n* 不能在此路径中使用此配置节。如果在父级别上锁定了该节,便会出现这种情况 500.19  [解决方案](http://www.cnblogs.com/cookiebin/p/5911644.html)","slug":"命令行专题/收集文档","published":1,"updated":"2019-06-25T14:47:07.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmitx000h00uxdsve5631","content":"<ul>\n<li>Ubuntu 安装redis两种方式 教程<br><a href=\"http://www.cnblogs.com/langtianya/p/5187681.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>在Ubuntu中安装Redis,设置密码，远程访问<br><a href=\"http://blog.csdn.net/yxwb1253587469/article/details/72466647\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>关于学习算法的路上，有哪些需要学习的（南阳理工的题目）<br><a href=\"http://acm.nyist.net/JudgeOnline/step.php\" target=\"_blank\" rel=\"noopener\">学习思路</a></li>\n</ul>\n<h1 id=\"IIS-7-5-部署项目解决问题\"><a href=\"#IIS-7-5-部署项目解决问题\" class=\"headerlink\" title=\"IIS 7.5 部署项目解决问题\"></a>IIS 7.5 部署项目解决问题</h1><ul>\n<li>Service Unavailable HTTP Error 503. The service is unavailable<br><a href=\"http://www.cnblogs.com/fri-yu/p/4078995.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>出现：发布mvc报错：403.14-Forbidden Web 服务器被配置为不列出此目录的内容<br><a href=\"http://www.cnblogs.com/youring2/p/3545175.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>出现.svg .woff .woff2 文件，需要有以下配置 <a href=\"https://my.oschina.net/u/554046/blog/270689\" title=\"点我搞事情!\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>不能在此路径中使用此配置节。如果在父级别上锁定了该节,便会出现这种情况 500.19  <a href=\"http://www.cnblogs.com/cookiebin/p/5911644.html\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Ubuntu 安装redis两种方式 教程<br><a href=\"http://www.cnblogs.com/langtianya/p/5187681.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>在Ubuntu中安装Redis,设置密码，远程访问<br><a href=\"http://blog.csdn.net/yxwb1253587469/article/details/72466647\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>关于学习算法的路上，有哪些需要学习的（南阳理工的题目）<br><a href=\"http://acm.nyist.net/JudgeOnline/step.php\" target=\"_blank\" rel=\"noopener\">学习思路</a></li>\n</ul>\n<h1 id=\"IIS-7-5-部署项目解决问题\"><a href=\"#IIS-7-5-部署项目解决问题\" class=\"headerlink\" title=\"IIS 7.5 部署项目解决问题\"></a>IIS 7.5 部署项目解决问题</h1><ul>\n<li>Service Unavailable HTTP Error 503. The service is unavailable<br><a href=\"http://www.cnblogs.com/fri-yu/p/4078995.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>出现：发布mvc报错：403.14-Forbidden Web 服务器被配置为不列出此目录的内容<br><a href=\"http://www.cnblogs.com/youring2/p/3545175.html\" title=\"点我搞事情！\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>出现.svg .woff .woff2 文件，需要有以下配置 <a href=\"https://my.oschina.net/u/554046/blog/270689\" title=\"点我搞事情!\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n<li>不能在此路径中使用此配置节。如果在父级别上锁定了该节,便会出现这种情况 500.19  <a href=\"http://www.cnblogs.com/cookiebin/p/5911644.html\" target=\"_blank\" rel=\"noopener\">解决方案</a></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"收集文档","path":"2019/03/24/命令行专题/收集文档/","eyeCatchImage":null,"excerpt":"记录自己的日常问题找到的解决方案","date":"2019-03-24T06:42:01.000Z","pv":0,"totalPV":0,"categories":"日常问题","tags":["Ubuntu","Redis","IIS"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker","date":"2019-06-08T16:54:15.000Z","_content":"* 关于ABP代码 生成器的使用介绍 https://blog.csdn.net/q710777720/article/details/91358450\n\n将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： [https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding) 部署至ubuntu、Docker的记录\n> 相关技术 .NET Core2.2+Docker+Nginx+Supervisor \n\n<!-- more -->\n\n## 部署至ubuntu下\n\n可参考 [https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html](https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html)\n\n需要安装 .NET Core 2.2，直接看官网\n\n[https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current](https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current)\n### 发布\n使用VS2017或VS2019,右击SJNScaffolding.RazorPage->发布->配置后，如下图所示，点击保存后，生成发布包。\n\n![Deploy-Settingsb6cfb.png](https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png)\n\n将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。\n使用以下命令运行\n~~~\ncd /home/admin/SJNScaffolding # 先cd的项目目录 \ndotnet SJNScaffolding.RazorPage.dll #启动web项目，默认应该是http://localhost:5000\n~~~\n参考下图\n\n<fancybox>\n![https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png](https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png)\n</fancybox>\n\nip:端口是无法访问到的，\n命令行中执行，下面这行命令，是正常的，但只能服务器访问，外网无法访问。\n~~~\nwget http://localhost:5000\n~~~\n\n### 需要使用nginx反向代理\n~~~\nsudo apt-get install nginx\n~~~\n\n安装好以后，定位到 /etc/nginx/sites-available/default 文件。更改server 节点如下\n~~~\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection keep-alive;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n~~~\n\n然后重新启动 Nginx\n~~~\nsudo service nginx restart \n#sudo nginx -s reload　  #也可以使用这条命令重新加载配置项\n~~~\n \n### Supervisor 守护进程\n此时使用ctrl+c会退出项目运行状态，无法关闭shell,可使用**Supervisor**，目的是上的是服务器开机时即启动服务器上的发布的 ASP .NET Core Web项目\n\n\n[ASP.NET Core Linux下为 dotnet 创建守护进程（必备知识）\n前言](https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html)\n\n[结合Nginx将asp net core部署在Linux(Ubuntu)上[基于微软官方文档翻译并补充]](https://www.jianshu.com/p/f6d2203807ab)\n\n[Ubuntu 18.04 安装部署Net Core、Nginx全过程](https://www.cnblogs.com/xyfy/p/9881855.html)\n\n~~~\nsudo apt-get install supervisor  # 安装 守护进程 supervisor\ncd /etc/supervisor/conf.d/     # 进入配置目录 \nvim SJNScaffolding.conf        # 新建 一个配置文件 ，只要以 .conf结尾即可。\n~~~\n\n在文件SJNScaffolding.conf中配置如下内容，\n~~~\n[program:SJNScaffolding]\ncommand=dotnet /home/admin/SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.dll\ndirectory=/home/admin/SJNScaffolding.RazorPage\nenvironment=ASPNETCORE__ENVIRONMENT=Production\nuser=www-data\nstopsignal=INT\nautostart=true\nautorestart=true \nstartsecs=1\nstderr_logfile=/var/log/SJNScaffolding.RazorPage.err.log \nstdout_logfile=/var/log/SJNScaffolding.RazorPage.out.log \n\n~~~\n有相应注释的，conf不能有注释，虽然没有任何异常，但无法启动服务。\n~~~\n[program:HelloWebApp]\ncommand=dotnet HelloWebApp.dll  #要执行的命令\ndirectory=/home/yxd/Workspace/publish #命令执行的目录\nenvironment=ASPNETCORE__ENVIRONMENT=Production #环境变量\nuser=www-data  #进程执行的用户身份\nstopsignal=INT\nautostart=true #是否自动启动\nautorestart=true #是否自动重启\nstartsecs=1 #自动重启间隔\nstderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志\nstdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志\n~~~\n\n重启守护进程\n~~~\nsudo /etc/init.d/supervisor restart #或 sudo service supervisor restart\n#或\n# 暂停服务supervisor，启动服务supervisor\nsudo service supervisor stop\nsudo service supervisor start\n#查看日志\ntail -f  /var/log/SJNScaffolding.RazorPage.out.log \n~~~\n\n设置ubuntu下的supervisor开机 自启动\n\n~~~\nvi /etc/rc.local\n~~~\n在exit 0 之前加入以下命令\n~~~\n/usr/local/bin/supervisord\n~~~\n\n## 使用Docker 方式部署\n可参考此文档 ：[ASP.NET Core开发Docker部署](https://www.cnblogs.com/zxtceq/p/7403953.html)\n~~~\n#1.本地安装Docker for Windows后，可使用Docker方式运行\nFROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base\nWORKDIR /app\nEXPOSE 80\n\nFROM mcr.microsoft.com/dotnet/core/sdk:2.2-stretch AS build\nWORKDIR /src\nCOPY [\"SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj\", \"SJNScaffolding.RazorPage/\"]\nCOPY [\"SJNScaffolding/SJNScaffolding.csproj\", \"SJNScaffolding/\"]\nRUN dotnet restore \"SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj\"\nCOPY . .\nWORKDIR \"/src/SJNScaffolding.RazorPage\"\nRUN dotnet build \"SJNScaffolding.RazorPage.csproj\" -c Release -o /app\n\nFROM build AS publish\nRUN dotnet publish \"SJNScaffolding.RazorPage.csproj\" -c Release -o /app\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app .\nENTRYPOINT [\"dotnet\", \"SJNScaffolding.RazorPage.dll\"]\n\n#2. 发布时，使用此Dockerfile配置\n#FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base\n#COPY . /app\n#WORKDIR /app\n#EXPOSE 80\n#ENTRYPOINT [\"dotnet\", \"SJNScaffolding.RazorPage.dll\"]\n~~~\n\n把第\"2. 发布时，使用此Dockerfile配置“后面的注释展开，上面的全部注释。\n[![Dockerfileea151.png](https://miao.su/images/2019/06/09/Dockerfileea151.png)](https://miao.su/image/ftdf5)\n\n\n右击SJNScaffolding.RazorPage->发布->配置后，如下图所示，点击保存后，生成发布包。\n\n[![Deploy-Settingsb6cfb.png](https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png)](https://miao.su/image/ftwvM)\n\n将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。\n\n[![PXKF63RUOC5L99LPWe1367.png](https://miao.su/images/2019/06/09/PXKF63RUOC5L99LPWe1367.png)](https://miao.su/image/ftxWU)\n\n具体上传步骤就不说了。\n\n[![MYGE3MZ5BNFJQ6R476cf92.png](https://miao.su/images/2019/06/09/MYGE3MZ5BNFJQ6R476cf92.png)](https://miao.su/image/ftuw8)\n\n\n前置条件，在ubuntu上安装好了docker。并且正常运行。\n    \n**-d** 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80\n~~~\ncd /home/admin/SJNScaffolding # 先cd的项目目录 \ndocker build -t igeekfan/sjnscaffolding .     #生成images\ndocker run -d -p 5000:80 igeekfan/sjnscaffolding  # 生成 container 并运行在5000端口\n~~~\n\n此时打开 浏览器， ip+端口5000即可访问服务。","source":"_posts/大后端/ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker.md","raw":"---\ntitle: ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker\ndate: 2019-06-09 00:54:15\ntags:\n- ASP.NET Core\n- Ubuntu\n- Docker\ncategory:\n- 大后端\n---\n* 关于ABP代码 生成器的使用介绍 https://blog.csdn.net/q710777720/article/details/91358450\n\n将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： [https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding) 部署至ubuntu、Docker的记录\n> 相关技术 .NET Core2.2+Docker+Nginx+Supervisor \n\n<!-- more -->\n\n## 部署至ubuntu下\n\n可参考 [https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html](https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html)\n\n需要安装 .NET Core 2.2，直接看官网\n\n[https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current](https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current)\n### 发布\n使用VS2017或VS2019,右击SJNScaffolding.RazorPage->发布->配置后，如下图所示，点击保存后，生成发布包。\n\n![Deploy-Settingsb6cfb.png](https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png)\n\n将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。\n使用以下命令运行\n~~~\ncd /home/admin/SJNScaffolding # 先cd的项目目录 \ndotnet SJNScaffolding.RazorPage.dll #启动web项目，默认应该是http://localhost:5000\n~~~\n参考下图\n\n<fancybox>\n![https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png](https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png)\n</fancybox>\n\nip:端口是无法访问到的，\n命令行中执行，下面这行命令，是正常的，但只能服务器访问，外网无法访问。\n~~~\nwget http://localhost:5000\n~~~\n\n### 需要使用nginx反向代理\n~~~\nsudo apt-get install nginx\n~~~\n\n安装好以后，定位到 /etc/nginx/sites-available/default 文件。更改server 节点如下\n~~~\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection keep-alive;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n~~~\n\n然后重新启动 Nginx\n~~~\nsudo service nginx restart \n#sudo nginx -s reload　  #也可以使用这条命令重新加载配置项\n~~~\n \n### Supervisor 守护进程\n此时使用ctrl+c会退出项目运行状态，无法关闭shell,可使用**Supervisor**，目的是上的是服务器开机时即启动服务器上的发布的 ASP .NET Core Web项目\n\n\n[ASP.NET Core Linux下为 dotnet 创建守护进程（必备知识）\n前言](https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html)\n\n[结合Nginx将asp net core部署在Linux(Ubuntu)上[基于微软官方文档翻译并补充]](https://www.jianshu.com/p/f6d2203807ab)\n\n[Ubuntu 18.04 安装部署Net Core、Nginx全过程](https://www.cnblogs.com/xyfy/p/9881855.html)\n\n~~~\nsudo apt-get install supervisor  # 安装 守护进程 supervisor\ncd /etc/supervisor/conf.d/     # 进入配置目录 \nvim SJNScaffolding.conf        # 新建 一个配置文件 ，只要以 .conf结尾即可。\n~~~\n\n在文件SJNScaffolding.conf中配置如下内容，\n~~~\n[program:SJNScaffolding]\ncommand=dotnet /home/admin/SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.dll\ndirectory=/home/admin/SJNScaffolding.RazorPage\nenvironment=ASPNETCORE__ENVIRONMENT=Production\nuser=www-data\nstopsignal=INT\nautostart=true\nautorestart=true \nstartsecs=1\nstderr_logfile=/var/log/SJNScaffolding.RazorPage.err.log \nstdout_logfile=/var/log/SJNScaffolding.RazorPage.out.log \n\n~~~\n有相应注释的，conf不能有注释，虽然没有任何异常，但无法启动服务。\n~~~\n[program:HelloWebApp]\ncommand=dotnet HelloWebApp.dll  #要执行的命令\ndirectory=/home/yxd/Workspace/publish #命令执行的目录\nenvironment=ASPNETCORE__ENVIRONMENT=Production #环境变量\nuser=www-data  #进程执行的用户身份\nstopsignal=INT\nautostart=true #是否自动启动\nautorestart=true #是否自动重启\nstartsecs=1 #自动重启间隔\nstderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志\nstdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志\n~~~\n\n重启守护进程\n~~~\nsudo /etc/init.d/supervisor restart #或 sudo service supervisor restart\n#或\n# 暂停服务supervisor，启动服务supervisor\nsudo service supervisor stop\nsudo service supervisor start\n#查看日志\ntail -f  /var/log/SJNScaffolding.RazorPage.out.log \n~~~\n\n设置ubuntu下的supervisor开机 自启动\n\n~~~\nvi /etc/rc.local\n~~~\n在exit 0 之前加入以下命令\n~~~\n/usr/local/bin/supervisord\n~~~\n\n## 使用Docker 方式部署\n可参考此文档 ：[ASP.NET Core开发Docker部署](https://www.cnblogs.com/zxtceq/p/7403953.html)\n~~~\n#1.本地安装Docker for Windows后，可使用Docker方式运行\nFROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base\nWORKDIR /app\nEXPOSE 80\n\nFROM mcr.microsoft.com/dotnet/core/sdk:2.2-stretch AS build\nWORKDIR /src\nCOPY [\"SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj\", \"SJNScaffolding.RazorPage/\"]\nCOPY [\"SJNScaffolding/SJNScaffolding.csproj\", \"SJNScaffolding/\"]\nRUN dotnet restore \"SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj\"\nCOPY . .\nWORKDIR \"/src/SJNScaffolding.RazorPage\"\nRUN dotnet build \"SJNScaffolding.RazorPage.csproj\" -c Release -o /app\n\nFROM build AS publish\nRUN dotnet publish \"SJNScaffolding.RazorPage.csproj\" -c Release -o /app\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app .\nENTRYPOINT [\"dotnet\", \"SJNScaffolding.RazorPage.dll\"]\n\n#2. 发布时，使用此Dockerfile配置\n#FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base\n#COPY . /app\n#WORKDIR /app\n#EXPOSE 80\n#ENTRYPOINT [\"dotnet\", \"SJNScaffolding.RazorPage.dll\"]\n~~~\n\n把第\"2. 发布时，使用此Dockerfile配置“后面的注释展开，上面的全部注释。\n[![Dockerfileea151.png](https://miao.su/images/2019/06/09/Dockerfileea151.png)](https://miao.su/image/ftdf5)\n\n\n右击SJNScaffolding.RazorPage->发布->配置后，如下图所示，点击保存后，生成发布包。\n\n[![Deploy-Settingsb6cfb.png](https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png)](https://miao.su/image/ftwvM)\n\n将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。\n\n[![PXKF63RUOC5L99LPWe1367.png](https://miao.su/images/2019/06/09/PXKF63RUOC5L99LPWe1367.png)](https://miao.su/image/ftxWU)\n\n具体上传步骤就不说了。\n\n[![MYGE3MZ5BNFJQ6R476cf92.png](https://miao.su/images/2019/06/09/MYGE3MZ5BNFJQ6R476cf92.png)](https://miao.su/image/ftuw8)\n\n\n前置条件，在ubuntu上安装好了docker。并且正常运行。\n    \n**-d** 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80\n~~~\ncd /home/admin/SJNScaffolding # 先cd的项目目录 \ndocker build -t igeekfan/sjnscaffolding .     #生成images\ndocker run -d -p 5000:80 igeekfan/sjnscaffolding  # 生成 container 并运行在5000端口\n~~~\n\n此时打开 浏览器， ip+端口5000即可访问服务。","slug":"大后端/ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker","published":1,"updated":"2019-06-25T14:47:07.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmity000l00ux3nkitiq0","content":"<ul>\n<li>关于ABP代码 生成器的使用介绍 <a href=\"https://blog.csdn.net/q710777720/article/details/91358450\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/article/details/91358450</a></li>\n</ul>\n<p>将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： <a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a> 部署至ubuntu、Docker的记录</p>\n<blockquote>\n<p>相关技术 .NET Core2.2+Docker+Nginx+Supervisor </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"部署至ubuntu下\"><a href=\"#部署至ubuntu下\" class=\"headerlink\" title=\"部署至ubuntu下\"></a>部署至ubuntu下</h2><p>可参考 <a href=\"https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html</a></p>\n<p>需要安装 .NET Core 2.2，直接看官网</p>\n<p><a href=\"https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\" target=\"_blank\" rel=\"noopener\">https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current</a></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>使用VS2017或VS2019,右击SJNScaffolding.RazorPage-&gt;发布-&gt;配置后，如下图所示，点击保存后，生成发布包。</p>\n<p><img src=\"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png\" alt=\"Deploy-Settingsb6cfb.png\"></p>\n<p>将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。<br>使用以下命令运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/admin/SJNScaffolding # 先cd的项目目录 </span><br><span class=\"line\">dotnet SJNScaffolding.RazorPage.dll #启动web项目，默认应该是http://localhost:5000</span><br></pre></td></tr></table></figure>\n\n<p>参考下图</p>\n<fancybox>\n![https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png](https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png)\n</fancybox>\n\n<p>ip:端口是无法访问到的，<br>命令行中执行，下面这行命令，是正常的，但只能服务器访问，外网无法访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://localhost:5000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"需要使用nginx反向代理\"><a href=\"#需要使用nginx反向代理\" class=\"headerlink\" title=\"需要使用nginx反向代理\"></a>需要使用nginx反向代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>\n\n<p>安装好以后，定位到 /etc/nginx/sites-available/default 文件。更改server 节点如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:5000;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection keep-alive;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_cache_bypass $http_upgrade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后重新启动 Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart </span><br><span class=\"line\">#sudo nginx -s reload　  #也可以使用这条命令重新加载配置项</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Supervisor-守护进程\"><a href=\"#Supervisor-守护进程\" class=\"headerlink\" title=\"Supervisor 守护进程\"></a>Supervisor 守护进程</h3><p>此时使用ctrl+c会退出项目运行状态，无法关闭shell,可使用<strong>Supervisor</strong>，目的是上的是服务器开机时即启动服务器上的发布的 ASP .NET Core Web项目</p>\n<p><a href=\"https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core Linux下为 dotnet 创建守护进程（必备知识）<br>前言</a></p>\n<p><a href=\"https://www.jianshu.com/p/f6d2203807ab\" target=\"_blank\" rel=\"noopener\">结合Nginx将asp net core部署在Linux(Ubuntu)上[基于微软官方文档翻译并补充]</a></p>\n<p><a href=\"https://www.cnblogs.com/xyfy/p/9881855.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 18.04 安装部署Net Core、Nginx全过程</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install supervisor  # 安装 守护进程 supervisor</span><br><span class=\"line\">cd /etc/supervisor/conf.d/     # 进入配置目录 </span><br><span class=\"line\">vim SJNScaffolding.conf        # 新建 一个配置文件 ，只要以 .conf结尾即可。</span><br></pre></td></tr></table></figure>\n\n<p>在文件SJNScaffolding.conf中配置如下内容，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:SJNScaffolding]</span><br><span class=\"line\">command=dotnet /home/admin/SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.dll</span><br><span class=\"line\">directory=/home/admin/SJNScaffolding.RazorPage</span><br><span class=\"line\">environment=ASPNETCORE__ENVIRONMENT=Production</span><br><span class=\"line\">user=www-data</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true </span><br><span class=\"line\">startsecs=1</span><br><span class=\"line\">stderr_logfile=/var/log/SJNScaffolding.RazorPage.err.log </span><br><span class=\"line\">stdout_logfile=/var/log/SJNScaffolding.RazorPage.out.log</span><br></pre></td></tr></table></figure>\n\n<p>有相应注释的，conf不能有注释，虽然没有任何异常，但无法启动服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:HelloWebApp]</span><br><span class=\"line\">command=dotnet HelloWebApp.dll  #要执行的命令</span><br><span class=\"line\">directory=/home/yxd/Workspace/publish #命令执行的目录</span><br><span class=\"line\">environment=ASPNETCORE__ENVIRONMENT=Production #环境变量</span><br><span class=\"line\">user=www-data  #进程执行的用户身份</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\">autostart=true #是否自动启动</span><br><span class=\"line\">autorestart=true #是否自动重启</span><br><span class=\"line\">startsecs=1 #自动重启间隔</span><br><span class=\"line\">stderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志</span><br><span class=\"line\">stdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志</span><br></pre></td></tr></table></figure>\n\n<p>重启守护进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/supervisor restart #或 sudo service supervisor restart</span><br><span class=\"line\">#或</span><br><span class=\"line\"># 暂停服务supervisor，启动服务supervisor</span><br><span class=\"line\">sudo service supervisor stop</span><br><span class=\"line\">sudo service supervisor start</span><br><span class=\"line\">#查看日志</span><br><span class=\"line\">tail -f  /var/log/SJNScaffolding.RazorPage.out.log</span><br></pre></td></tr></table></figure>\n\n<p>设置ubuntu下的supervisor开机 自启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>在exit 0 之前加入以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/supervisord</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Docker-方式部署\"><a href=\"#使用Docker-方式部署\" class=\"headerlink\" title=\"使用Docker 方式部署\"></a>使用Docker 方式部署</h2><p>可参考此文档 ：<a href=\"https://www.cnblogs.com/zxtceq/p/7403953.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core开发Docker部署</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1.本地安装Docker for Windows后，可使用Docker方式运行</span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/sdk:2.2-stretch AS build</span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\">COPY [&quot;SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj&quot;, &quot;SJNScaffolding.RazorPage/&quot;]</span><br><span class=\"line\">COPY [&quot;SJNScaffolding/SJNScaffolding.csproj&quot;, &quot;SJNScaffolding/&quot;]</span><br><span class=\"line\">RUN dotnet restore &quot;SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj&quot;</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">WORKDIR &quot;/src/SJNScaffolding.RazorPage&quot;</span><br><span class=\"line\">RUN dotnet build &quot;SJNScaffolding.RazorPage.csproj&quot; -c Release -o /app</span><br><span class=\"line\"></span><br><span class=\"line\">FROM build AS publish</span><br><span class=\"line\">RUN dotnet publish &quot;SJNScaffolding.RazorPage.csproj&quot; -c Release -o /app</span><br><span class=\"line\"></span><br><span class=\"line\">FROM base AS final</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY --from=publish /app .</span><br><span class=\"line\">ENTRYPOINT [&quot;dotnet&quot;, &quot;SJNScaffolding.RazorPage.dll&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">#2. 发布时，使用此Dockerfile配置</span><br><span class=\"line\">#FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base</span><br><span class=\"line\">#COPY . /app</span><br><span class=\"line\">#WORKDIR /app</span><br><span class=\"line\">#EXPOSE 80</span><br><span class=\"line\">#ENTRYPOINT [&quot;dotnet&quot;, &quot;SJNScaffolding.RazorPage.dll&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>把第”2. 发布时，使用此Dockerfile配置“后面的注释展开，上面的全部注释。<br><a href=\"https://miao.su/image/ftdf5\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/Dockerfileea151.png\" alt=\"Dockerfileea151.png\"></a></p>\n<p>右击SJNScaffolding.RazorPage-&gt;发布-&gt;配置后，如下图所示，点击保存后，生成发布包。</p>\n<p><a href=\"https://miao.su/image/ftwvM\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png\" alt=\"Deploy-Settingsb6cfb.png\"></a></p>\n<p>将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。</p>\n<p><a href=\"https://miao.su/image/ftxWU\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/PXKF63RUOC5L99LPWe1367.png\" alt=\"PXKF63RUOC5L99LPWe1367.png\"></a></p>\n<p>具体上传步骤就不说了。</p>\n<p><a href=\"https://miao.su/image/ftuw8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/MYGE3MZ5BNFJQ6R476cf92.png\" alt=\"MYGE3MZ5BNFJQ6R476cf92.png\"></a></p>\n<p>前置条件，在ubuntu上安装好了docker。并且正常运行。</p>\n<p><strong>-d</strong> 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/admin/SJNScaffolding # 先cd的项目目录 </span><br><span class=\"line\">docker build -t igeekfan/sjnscaffolding .     #生成images</span><br><span class=\"line\">docker run -d -p 5000:80 igeekfan/sjnscaffolding  # 生成 container 并运行在5000端口</span><br></pre></td></tr></table></figure>\n\n<p>此时打开 浏览器， ip+端口5000即可访问服务。</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>关于ABP代码 生成器的使用介绍 <a href=\"https://blog.csdn.net/q710777720/article/details/91358450\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/article/details/91358450</a></li>\n</ul>\n<p>将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： <a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a> 部署至ubuntu、Docker的记录</p>\n<blockquote>\n<p>相关技术 .NET Core2.2+Docker+Nginx+Supervisor </p>\n</blockquote>","more":"<h2 id=\"部署至ubuntu下\"><a href=\"#部署至ubuntu下\" class=\"headerlink\" title=\"部署至ubuntu下\"></a>部署至ubuntu下</h2><p>可参考 <a href=\"https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html</a></p>\n<p>需要安装 .NET Core 2.2，直接看官网</p>\n<p><a href=\"https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\" target=\"_blank\" rel=\"noopener\">https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current</a></p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>使用VS2017或VS2019,右击SJNScaffolding.RazorPage-&gt;发布-&gt;配置后，如下图所示，点击保存后，生成发布包。</p>\n<p><img src=\"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png\" alt=\"Deploy-Settingsb6cfb.png\"></p>\n<p>将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。<br>使用以下命令运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/admin/SJNScaffolding # 先cd的项目目录 </span><br><span class=\"line\">dotnet SJNScaffolding.RazorPage.dll #启动web项目，默认应该是http://localhost:5000</span><br></pre></td></tr></table></figure>\n\n<p>参考下图</p>\n<fancybox>\n![https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png](https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png)\n</fancybox>\n\n<p>ip:端口是无法访问到的，<br>命令行中执行，下面这行命令，是正常的，但只能服务器访问，外网无法访问。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://localhost:5000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"需要使用nginx反向代理\"><a href=\"#需要使用nginx反向代理\" class=\"headerlink\" title=\"需要使用nginx反向代理\"></a>需要使用nginx反向代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>\n\n<p>安装好以后，定位到 /etc/nginx/sites-available/default 文件。更改server 节点如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://localhost:5000;</span><br><span class=\"line\">        proxy_http_version 1.1;</span><br><span class=\"line\">        proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">        proxy_set_header Connection keep-alive;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_cache_bypass $http_upgrade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后重新启动 Nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart </span><br><span class=\"line\">#sudo nginx -s reload　  #也可以使用这条命令重新加载配置项</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Supervisor-守护进程\"><a href=\"#Supervisor-守护进程\" class=\"headerlink\" title=\"Supervisor 守护进程\"></a>Supervisor 守护进程</h3><p>此时使用ctrl+c会退出项目运行状态，无法关闭shell,可使用<strong>Supervisor</strong>，目的是上的是服务器开机时即启动服务器上的发布的 ASP .NET Core Web项目</p>\n<p><a href=\"https://www.cnblogs.com/savorboard/p/dotnetcore-supervisor.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core Linux下为 dotnet 创建守护进程（必备知识）<br>前言</a></p>\n<p><a href=\"https://www.jianshu.com/p/f6d2203807ab\" target=\"_blank\" rel=\"noopener\">结合Nginx将asp net core部署在Linux(Ubuntu)上[基于微软官方文档翻译并补充]</a></p>\n<p><a href=\"https://www.cnblogs.com/xyfy/p/9881855.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 18.04 安装部署Net Core、Nginx全过程</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install supervisor  # 安装 守护进程 supervisor</span><br><span class=\"line\">cd /etc/supervisor/conf.d/     # 进入配置目录 </span><br><span class=\"line\">vim SJNScaffolding.conf        # 新建 一个配置文件 ，只要以 .conf结尾即可。</span><br></pre></td></tr></table></figure>\n\n<p>在文件SJNScaffolding.conf中配置如下内容，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:SJNScaffolding]</span><br><span class=\"line\">command=dotnet /home/admin/SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.dll</span><br><span class=\"line\">directory=/home/admin/SJNScaffolding.RazorPage</span><br><span class=\"line\">environment=ASPNETCORE__ENVIRONMENT=Production</span><br><span class=\"line\">user=www-data</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true </span><br><span class=\"line\">startsecs=1</span><br><span class=\"line\">stderr_logfile=/var/log/SJNScaffolding.RazorPage.err.log </span><br><span class=\"line\">stdout_logfile=/var/log/SJNScaffolding.RazorPage.out.log</span><br></pre></td></tr></table></figure>\n\n<p>有相应注释的，conf不能有注释，虽然没有任何异常，但无法启动服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:HelloWebApp]</span><br><span class=\"line\">command=dotnet HelloWebApp.dll  #要执行的命令</span><br><span class=\"line\">directory=/home/yxd/Workspace/publish #命令执行的目录</span><br><span class=\"line\">environment=ASPNETCORE__ENVIRONMENT=Production #环境变量</span><br><span class=\"line\">user=www-data  #进程执行的用户身份</span><br><span class=\"line\">stopsignal=INT</span><br><span class=\"line\">autostart=true #是否自动启动</span><br><span class=\"line\">autorestart=true #是否自动重启</span><br><span class=\"line\">startsecs=1 #自动重启间隔</span><br><span class=\"line\">stderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志</span><br><span class=\"line\">stdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志</span><br></pre></td></tr></table></figure>\n\n<p>重启守护进程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/supervisor restart #或 sudo service supervisor restart</span><br><span class=\"line\">#或</span><br><span class=\"line\"># 暂停服务supervisor，启动服务supervisor</span><br><span class=\"line\">sudo service supervisor stop</span><br><span class=\"line\">sudo service supervisor start</span><br><span class=\"line\">#查看日志</span><br><span class=\"line\">tail -f  /var/log/SJNScaffolding.RazorPage.out.log</span><br></pre></td></tr></table></figure>\n\n<p>设置ubuntu下的supervisor开机 自启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<p>在exit 0 之前加入以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/supervisord</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Docker-方式部署\"><a href=\"#使用Docker-方式部署\" class=\"headerlink\" title=\"使用Docker 方式部署\"></a>使用Docker 方式部署</h2><p>可参考此文档 ：<a href=\"https://www.cnblogs.com/zxtceq/p/7403953.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core开发Docker部署</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1.本地安装Docker for Windows后，可使用Docker方式运行</span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\">FROM mcr.microsoft.com/dotnet/core/sdk:2.2-stretch AS build</span><br><span class=\"line\">WORKDIR /src</span><br><span class=\"line\">COPY [&quot;SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj&quot;, &quot;SJNScaffolding.RazorPage/&quot;]</span><br><span class=\"line\">COPY [&quot;SJNScaffolding/SJNScaffolding.csproj&quot;, &quot;SJNScaffolding/&quot;]</span><br><span class=\"line\">RUN dotnet restore &quot;SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj&quot;</span><br><span class=\"line\">COPY . .</span><br><span class=\"line\">WORKDIR &quot;/src/SJNScaffolding.RazorPage&quot;</span><br><span class=\"line\">RUN dotnet build &quot;SJNScaffolding.RazorPage.csproj&quot; -c Release -o /app</span><br><span class=\"line\"></span><br><span class=\"line\">FROM build AS publish</span><br><span class=\"line\">RUN dotnet publish &quot;SJNScaffolding.RazorPage.csproj&quot; -c Release -o /app</span><br><span class=\"line\"></span><br><span class=\"line\">FROM base AS final</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">COPY --from=publish /app .</span><br><span class=\"line\">ENTRYPOINT [&quot;dotnet&quot;, &quot;SJNScaffolding.RazorPage.dll&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">#2. 发布时，使用此Dockerfile配置</span><br><span class=\"line\">#FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base</span><br><span class=\"line\">#COPY . /app</span><br><span class=\"line\">#WORKDIR /app</span><br><span class=\"line\">#EXPOSE 80</span><br><span class=\"line\">#ENTRYPOINT [&quot;dotnet&quot;, &quot;SJNScaffolding.RazorPage.dll&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>把第”2. 发布时，使用此Dockerfile配置“后面的注释展开，上面的全部注释。<br><a href=\"https://miao.su/image/ftdf5\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/Dockerfileea151.png\" alt=\"Dockerfileea151.png\"></a></p>\n<p>右击SJNScaffolding.RazorPage-&gt;发布-&gt;配置后，如下图所示，点击保存后，生成发布包。</p>\n<p><a href=\"https://miao.su/image/ftwvM\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png\" alt=\"Deploy-Settingsb6cfb.png\"></a></p>\n<p>将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。</p>\n<p><a href=\"https://miao.su/image/ftxWU\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/PXKF63RUOC5L99LPWe1367.png\" alt=\"PXKF63RUOC5L99LPWe1367.png\"></a></p>\n<p>具体上传步骤就不说了。</p>\n<p><a href=\"https://miao.su/image/ftuw8\" target=\"_blank\" rel=\"noopener\"><img src=\"https://miao.su/images/2019/06/09/MYGE3MZ5BNFJQ6R476cf92.png\" alt=\"MYGE3MZ5BNFJQ6R476cf92.png\"></a></p>\n<p>前置条件，在ubuntu上安装好了docker。并且正常运行。</p>\n<p><strong>-d</strong> 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/admin/SJNScaffolding # 先cd的项目目录 </span><br><span class=\"line\">docker build -t igeekfan/sjnscaffolding .     #生成images</span><br><span class=\"line\">docker run -d -p 5000:80 igeekfan/sjnscaffolding  # 生成 container 并运行在5000端口</span><br></pre></td></tr></table></figure>\n\n<p>此时打开 浏览器， ip+端口5000即可访问服务。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png","popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker","path":"2019/06/09/大后端/ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker/","eyeCatchImage":"https://miao.su/images/2019/06/09/Deploy-Settingsb6cfb.png","excerpt":"<ul>\n<li>关于ABP代码 生成器的使用介绍 <a href=\"https://blog.csdn.net/q710777720/article/details/91358450\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/q710777720/article/details/91358450</a></li>\n</ul>\n<p>将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： <a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a> 部署至ubuntu、Docker的记录</p>\n<blockquote>\n<p>相关技术 .NET Core2.2+Docker+Nginx+Supervisor </p>\n</blockquote>","date":"2019-06-08T16:54:15.000Z","pv":0,"totalPV":0,"categories":"大后端","tags":["Ubuntu","ASP.NET Core","Docker"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"博客记录RabbitMQ、Mongodb","date":"2019-05-08T06:41:21.000Z","description":"RabbitMQ安装后web管理、删除服务Mongodb","_content":"\n\n### Rabbitmq\n> 服务开启后，管理地址：http://localhost:15672/ \n* 帐号：guest 密码 : guest\n\nrabbitmq安装后，web管理端口http://localhost:15672/ 无法访问的解决\n\n1.\n[https://blog.csdn.net/sxf359/article/details/78239382](https://blog.csdn.net/sxf359/article/details/78239382)\n\n\n2.\n![示例](https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045)\n\n3. 此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。\n~~~\n rabbitmq-plugins enable rabbitmq_management\n~~~\n\n\n### Mongodb \n\n* 删除服务\n~~~ bash\nsc delete mongodb\n~~~\n\n\n","source":"_posts/命令行专题/博客记录Rabbitmq、Mongodb.md","raw":"---\ntitle: 博客记录RabbitMQ、Mongodb\ndate: 2019-05-8 14:41:21\ndescription: RabbitMQ安装后web管理、删除服务Mongodb\ntags: \n- RabbitMQ \n- Mongodb\n---\n\n\n### Rabbitmq\n> 服务开启后，管理地址：http://localhost:15672/ \n* 帐号：guest 密码 : guest\n\nrabbitmq安装后，web管理端口http://localhost:15672/ 无法访问的解决\n\n1.\n[https://blog.csdn.net/sxf359/article/details/78239382](https://blog.csdn.net/sxf359/article/details/78239382)\n\n\n2.\n![示例](https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045)\n\n3. 此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。\n~~~\n rabbitmq-plugins enable rabbitmq_management\n~~~\n\n\n### Mongodb \n\n* 删除服务\n~~~ bash\nsc delete mongodb\n~~~\n\n\n","slug":"命令行专题/博客记录Rabbitmq、Mongodb","published":1,"updated":"2019-06-25T14:47:07.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmitz000n00uxtxy32ivi","content":"<h3 id=\"Rabbitmq\"><a href=\"#Rabbitmq\" class=\"headerlink\" title=\"Rabbitmq\"></a>Rabbitmq</h3><blockquote>\n<p>服务开启后，管理地址：<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> </p>\n<ul>\n<li>帐号：guest 密码 : guest</li>\n</ul>\n</blockquote>\n<p>rabbitmq安装后，web管理端口<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 无法访问的解决</p>\n<p>1.<br><a href=\"https://blog.csdn.net/sxf359/article/details/78239382\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sxf359/article/details/78239382</a></p>\n<p>2.<br><img src=\"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045\" alt=\"示例\"></p>\n<ol start=\"3\">\n<li>此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h3><ul>\n<li>删除服务<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc delete mongodb</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Rabbitmq\"><a href=\"#Rabbitmq\" class=\"headerlink\" title=\"Rabbitmq\"></a>Rabbitmq</h3><blockquote>\n<p>服务开启后，管理地址：<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> </p>\n<ul>\n<li>帐号：guest 密码 : guest</li>\n</ul>\n</blockquote>\n<p>rabbitmq安装后，web管理端口<a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 无法访问的解决</p>\n<p>1.<br><a href=\"https://blog.csdn.net/sxf359/article/details/78239382\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sxf359/article/details/78239382</a></p>\n<p>2.<br><img src=\"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045\" alt=\"示例\"></p>\n<ol start=\"3\">\n<li>此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Mongodb\"><a href=\"#Mongodb\" class=\"headerlink\" title=\"Mongodb\"></a>Mongodb</h3><ul>\n<li>删除服务<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc delete mongodb</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045","popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"博客记录RabbitMQ、Mongodb","path":"2019/05/08/命令行专题/博客记录Rabbitmq、Mongodb/","eyeCatchImage":"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045","excerpt":"RabbitMQ安装后web管理、删除服务Mongodb","date":"2019-05-08T06:41:21.000Z","pv":0,"totalPV":0,"categories":"","tags":["RabbitMQ","Mongodb"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"日常命令行记录","date":"2019-05-15T06:41:21.000Z","description":"平常使用到的命令行记录","_content":"\nwindows 查看具体某一端口 是否被占用\n```\nnetstat -ano | findstr \"5000\"\n```\n\nnpm 包安装，运行项目\n```\nnpm install\nnpm run serve\nnpm run build\n```\n\n\n.ef code first 生成数据库，迁移数据库\n.net framework  /.net core code first \n```\nAdd-Migration \"name\"\nUpdate-Database \nUpdate-Database  -Force\nUpdate-Database  -Verbose\n```\n\n\ndotnet core cil\n```\ndotnet watch run\n\n```\n\nwindows 运行 打开我的电脑等图标\n```\nrundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0\n\n```\n\nMysql下载地址：https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip\n\nwindows安装Mysql，并配置密码\n```\n运行-》cmd。\n首先 cd E:/Program Files/mysql-5.7.25-winx64/bin    \n命令：mysqld --initialize   #直接初始化mysql，生成data文件夹中的文件。\n命令：mysqld -install          #安装mysql\n命令：net start mysql          #启动服务器\n\n#跳过密码验证，在my.ini文件中配置如下\n[mysqld]\nskip-grant-tables\n#cmd运行到mysql/bin目录下\nmysql -u root -p\n#进入mysql命令行\nuse mysql;\n#执行修改密码操作\nupdate user set authentication_string=password('123qwe') where user='root' and Host = 'localhost';\n#刷新数据库\nflush privileges;\n\nnet start mysql\nnet stop mysql\n\nsc.exe delete \"服务名\"\n\n\n\n```\n\nredis 密码配置\n```\n安装目录下的winodws-serve.conf\nrequirepass 123qwe    #此处注意，行前不能有空格\n\n重启redis服务、cmd进入安装目录下执行，验证密码是否配置成功\nredis-cli.exe -h 127.0.0.1 -p 6379 -a 123qwe\n\n```\n\n\nIDEA 快捷键\n```\nCtrl+Alt+L   格式化代码\nCtrl+Shfit+F 全局查询\n```\n\nVscode\n```\nALT+SHIFT+F  格式化代码\n```\n\n\nWindows server 2016激活\n```\nDISM /online /Set-Edition:ServerDatacenter /ProductKey:CB7KF-BWN84-R7R2Y-793K2-8XDDG /AcceptEula\n\n```\n\n\nidea配置激活地址\n```\nhttp://idea.merle.com.cn\n```\n\nVS2019激活码\n\n```\nVisual Studio 2019 Enterprise:BF8Y8-GN2QH-T84XB-QVY3B-RC4DF\n\nVisual Studio 2019 Professional:NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y\n\n```\n","source":"_posts/命令行专题/日常命令行记录.md","raw":"---\ntitle: 日常命令行记录\ndate: 2019-05-15 14:41:21\ndescription: 平常使用到的命令行记录\ntags: MySQL\ncategory:\n- 命令行\n---\n\nwindows 查看具体某一端口 是否被占用\n```\nnetstat -ano | findstr \"5000\"\n```\n\nnpm 包安装，运行项目\n```\nnpm install\nnpm run serve\nnpm run build\n```\n\n\n.ef code first 生成数据库，迁移数据库\n.net framework  /.net core code first \n```\nAdd-Migration \"name\"\nUpdate-Database \nUpdate-Database  -Force\nUpdate-Database  -Verbose\n```\n\n\ndotnet core cil\n```\ndotnet watch run\n\n```\n\nwindows 运行 打开我的电脑等图标\n```\nrundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0\n\n```\n\nMysql下载地址：https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip\n\nwindows安装Mysql，并配置密码\n```\n运行-》cmd。\n首先 cd E:/Program Files/mysql-5.7.25-winx64/bin    \n命令：mysqld --initialize   #直接初始化mysql，生成data文件夹中的文件。\n命令：mysqld -install          #安装mysql\n命令：net start mysql          #启动服务器\n\n#跳过密码验证，在my.ini文件中配置如下\n[mysqld]\nskip-grant-tables\n#cmd运行到mysql/bin目录下\nmysql -u root -p\n#进入mysql命令行\nuse mysql;\n#执行修改密码操作\nupdate user set authentication_string=password('123qwe') where user='root' and Host = 'localhost';\n#刷新数据库\nflush privileges;\n\nnet start mysql\nnet stop mysql\n\nsc.exe delete \"服务名\"\n\n\n\n```\n\nredis 密码配置\n```\n安装目录下的winodws-serve.conf\nrequirepass 123qwe    #此处注意，行前不能有空格\n\n重启redis服务、cmd进入安装目录下执行，验证密码是否配置成功\nredis-cli.exe -h 127.0.0.1 -p 6379 -a 123qwe\n\n```\n\n\nIDEA 快捷键\n```\nCtrl+Alt+L   格式化代码\nCtrl+Shfit+F 全局查询\n```\n\nVscode\n```\nALT+SHIFT+F  格式化代码\n```\n\n\nWindows server 2016激活\n```\nDISM /online /Set-Edition:ServerDatacenter /ProductKey:CB7KF-BWN84-R7R2Y-793K2-8XDDG /AcceptEula\n\n```\n\n\nidea配置激活地址\n```\nhttp://idea.merle.com.cn\n```\n\nVS2019激活码\n\n```\nVisual Studio 2019 Enterprise:BF8Y8-GN2QH-T84XB-QVY3B-RC4DF\n\nVisual Studio 2019 Professional:NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y\n\n```\n","slug":"命令行专题/日常命令行记录","published":1,"updated":"2019-06-25T14:47:07.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiu1000r00uxurdfb3yd","content":"<p>windows 查看具体某一端口 是否被占用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano | findstr &quot;5000&quot;</span><br></pre></td></tr></table></figure>\n\n<p>npm 包安装，运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run serve</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<p>.ef code first 生成数据库，迁移数据库<br>.net framework  /.net core code first </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add-Migration &quot;name&quot;</span><br><span class=\"line\">Update-Database </span><br><span class=\"line\">Update-Database  -Force</span><br><span class=\"line\">Update-Database  -Verbose</span><br></pre></td></tr></table></figure>\n\n<p>dotnet core cil</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet watch run</span><br></pre></td></tr></table></figure>\n\n<p>windows 运行 打开我的电脑等图标</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0</span><br></pre></td></tr></table></figure>\n\n<p>Mysql下载地址：<a href=\"https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip\" target=\"_blank\" rel=\"noopener\">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip</a></p>\n<p>windows安装Mysql，并配置密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行-》cmd。</span><br><span class=\"line\">首先 cd E:/Program Files/mysql-5.7.25-winx64/bin    </span><br><span class=\"line\">命令：mysqld --initialize   #直接初始化mysql，生成data文件夹中的文件。</span><br><span class=\"line\">命令：mysqld -install          #安装mysql</span><br><span class=\"line\">命令：net start mysql          #启动服务器</span><br><span class=\"line\"></span><br><span class=\"line\">#跳过密码验证，在my.ini文件中配置如下</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">skip-grant-tables</span><br><span class=\"line\">#cmd运行到mysql/bin目录下</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">#进入mysql命令行</span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">#执行修改密码操作</span><br><span class=\"line\">update user set authentication_string=password(&apos;123qwe&apos;) where user=&apos;root&apos; and Host = &apos;localhost&apos;;</span><br><span class=\"line\">#刷新数据库</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">net start mysql</span><br><span class=\"line\">net stop mysql</span><br><span class=\"line\"></span><br><span class=\"line\">sc.exe delete &quot;服务名&quot;</span><br></pre></td></tr></table></figure>\n\n<p>redis 密码配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装目录下的winodws-serve.conf</span><br><span class=\"line\">requirepass 123qwe    #此处注意，行前不能有空格</span><br><span class=\"line\"></span><br><span class=\"line\">重启redis服务、cmd进入安装目录下执行，验证密码是否配置成功</span><br><span class=\"line\">redis-cli.exe -h 127.0.0.1 -p 6379 -a 123qwe</span><br></pre></td></tr></table></figure>\n\n<p>IDEA 快捷键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+Alt+L   格式化代码</span><br><span class=\"line\">Ctrl+Shfit+F 全局查询</span><br></pre></td></tr></table></figure>\n\n<p>Vscode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALT+SHIFT+F  格式化代码</span><br></pre></td></tr></table></figure>\n\n<p>Windows server 2016激活</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DISM /online /Set-Edition:ServerDatacenter /ProductKey:CB7KF-BWN84-R7R2Y-793K2-8XDDG /AcceptEula</span><br></pre></td></tr></table></figure>\n\n<p>idea配置激活地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://idea.merle.com.cn</span><br></pre></td></tr></table></figure>\n\n<p>VS2019激活码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Visual Studio 2019 Enterprise:BF8Y8-GN2QH-T84XB-QVY3B-RC4DF</span><br><span class=\"line\"></span><br><span class=\"line\">Visual Studio 2019 Professional:NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>windows 查看具体某一端口 是否被占用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano | findstr &quot;5000&quot;</span><br></pre></td></tr></table></figure>\n\n<p>npm 包安装，运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run serve</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<p>.ef code first 生成数据库，迁移数据库<br>.net framework  /.net core code first </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add-Migration &quot;name&quot;</span><br><span class=\"line\">Update-Database </span><br><span class=\"line\">Update-Database  -Force</span><br><span class=\"line\">Update-Database  -Verbose</span><br></pre></td></tr></table></figure>\n\n<p>dotnet core cil</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dotnet watch run</span><br></pre></td></tr></table></figure>\n\n<p>windows 运行 打开我的电脑等图标</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0</span><br></pre></td></tr></table></figure>\n\n<p>Mysql下载地址：<a href=\"https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip\" target=\"_blank\" rel=\"noopener\">https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip</a></p>\n<p>windows安装Mysql，并配置密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行-》cmd。</span><br><span class=\"line\">首先 cd E:/Program Files/mysql-5.7.25-winx64/bin    </span><br><span class=\"line\">命令：mysqld --initialize   #直接初始化mysql，生成data文件夹中的文件。</span><br><span class=\"line\">命令：mysqld -install          #安装mysql</span><br><span class=\"line\">命令：net start mysql          #启动服务器</span><br><span class=\"line\"></span><br><span class=\"line\">#跳过密码验证，在my.ini文件中配置如下</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">skip-grant-tables</span><br><span class=\"line\">#cmd运行到mysql/bin目录下</span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">#进入mysql命令行</span><br><span class=\"line\">use mysql;</span><br><span class=\"line\">#执行修改密码操作</span><br><span class=\"line\">update user set authentication_string=password(&apos;123qwe&apos;) where user=&apos;root&apos; and Host = &apos;localhost&apos;;</span><br><span class=\"line\">#刷新数据库</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">net start mysql</span><br><span class=\"line\">net stop mysql</span><br><span class=\"line\"></span><br><span class=\"line\">sc.exe delete &quot;服务名&quot;</span><br></pre></td></tr></table></figure>\n\n<p>redis 密码配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装目录下的winodws-serve.conf</span><br><span class=\"line\">requirepass 123qwe    #此处注意，行前不能有空格</span><br><span class=\"line\"></span><br><span class=\"line\">重启redis服务、cmd进入安装目录下执行，验证密码是否配置成功</span><br><span class=\"line\">redis-cli.exe -h 127.0.0.1 -p 6379 -a 123qwe</span><br></pre></td></tr></table></figure>\n\n<p>IDEA 快捷键</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+Alt+L   格式化代码</span><br><span class=\"line\">Ctrl+Shfit+F 全局查询</span><br></pre></td></tr></table></figure>\n\n<p>Vscode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALT+SHIFT+F  格式化代码</span><br></pre></td></tr></table></figure>\n\n<p>Windows server 2016激活</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DISM /online /Set-Edition:ServerDatacenter /ProductKey:CB7KF-BWN84-R7R2Y-793K2-8XDDG /AcceptEula</span><br></pre></td></tr></table></figure>\n\n<p>idea配置激活地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://idea.merle.com.cn</span><br></pre></td></tr></table></figure>\n\n<p>VS2019激活码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Visual Studio 2019 Enterprise:BF8Y8-GN2QH-T84XB-QVY3B-RC4DF</span><br><span class=\"line\"></span><br><span class=\"line\">Visual Studio 2019 Professional:NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"日常命令行记录","path":"2019/05/15/命令行专题/日常命令行记录/","eyeCatchImage":null,"excerpt":"平常使用到的命令行记录","date":"2019-05-15T06:41:21.000Z","pv":0,"totalPV":0,"categories":"命令行","tags":["MySQL"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Docker 、nginx 学习记录","date":"2019-06-09T17:00:22.000Z","_content":"\n\n## Docker  学习记录\n\nDocker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器->Windows日志->系统中，Hyper-V-VmSwitch 一直提示 类似\"VMSwitch driver due to error\"\n\n* [Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事](https://www.cnblogs.com/GeDiao/p/7975667.html)\n\n别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。\n* [hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错](https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app)\n\n**后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.**\n\n<!-- more -->\n\n## Docker 相关文档\n[Docker最全教程——从理论到实战(一)](https://www.cnblogs.com/codelove/p/10030439.html)\n\n[八个Docker的真实应用场景]( http://dockone.io/article/126)\n\n[docker pull很慢解决办法、配置阿里镜像](https://blog.csdn.net/julien71/article/details/79760919)\n\n[ASP.NET Core开发Docker部署](https://www.cnblogs.com/zxtceq/p/7403953.html)\n\nDocker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository）\n\n一个Image可有多个Container，我们可以把Image发布至Dokcer提供的仓库中，提供给他人使用。\n\n\n## Dockerfile 文件规则\n\n~~~\n\n~~~\n\n## Docker  命令行  \n* Command-Line Interfaces [https://docs.docker.com/engine/reference/run/](https://docs.docker.com/engine/reference/run/)\n~~~\ndocker images  # 查看所有镜像\n\ndocker ps -a #所有正在运行的容器Container\ndocker ps -l #最后启动的容器\n\ndocker rm 容器id   #删除容器\nocker rm $(docker ps -q -a) #一次性删除所有的容器\n\ndocker rmi 镜像id/镜像名称  #删除镜像\ndocker rmi $(docker images -q) #一次性删除所有的镜像。\n\ndocker build -t igeekfan/demo .  #运行构建命令,构建Docker 镜像。 \n\ndocker run 镜像 #运行\ndocker run -it -p 5000:80 igeekfan/demo\n#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80\ndocker run -d -p 5000:80 igeekfan/demo \n-d 参数后台运行\n\ndocker start 容器id\ndocker restart 容器id\ndocker stop 容器id #终止容器。\ndocker logs $CONTAINER_ID ##在container外面查看它的输出 \ndocker attach $CONTAINER_ID ##连接上容器实时查看：\n\ndocker pull microsoft/dotnet  #单独安装某一镜像\n\ndocker save 镜像id > 文件 #持久化镜像\ndocker load < 文件\n~~~\n我们如果想将Docker 放置到其他机器运行，很简单。\n~~~\n#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。\n\ndocker save igeekfan/demo > demo.tar\n\n#然后加载命令\n\ndocker load < demo.tar\n~~~\n\n## nginx 相关命令\n\nUbuntu 进入root 权限，不用每次加sudo\n~~~\nsudo su \n#然后输入root 密码\n~~~\n\n配置nginx\n~~~\nvim /etc/nginx/nginx.conf\n~~~\n\nnginx 验证配置是否成功\n~~~\nnginx -t \n~~~\n\n重新加载nginx配置项\n~~~\nnginx -s reload\n~~~\n\n状态、重启、停止、启动\n~~~\nservice nginx status \nservice nginx restart\nservice nginx stop \nservice nginx start\n~~~\n\n\n- [Ubuntu18.04更换镜像源](https://blog.csdn.net/jasonzhoujx/article/details/80360459)\n\n## nginx配置二级域名\n\n在Ubuntu服务器上安装好nginx，实现不同静态或动态页面服务，可配置自定义二级域名\n* 可参考 [nginx配置二级域名](https://cloud.tencent.com/developer/article/1183138)\n\n我是使用的[腾讯云\n](https://cloud.tencent.com/redirect.php?redirect=1042&cps_key=01a3c9a5a3ce578801cd6f805c09b701&from=console)，有需要可以使用。域名注册的过程就不BB了，假设前提，你有一个备案好的域名。\n云产品->域名解析->选择一个域名（列表页选择解析）->添加记录（依次从在表格上填写，如下图所示，可点击查看大图）\n\n<fancybox>\n\n![](https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png)\n\n</fancybox>\n\n远程连接服务器后，增加相应的配置项，我们使用nginx实现域名的配置，安装nginx(也不详细说明)，这时候，（/var/www/html）会有一个.html,就是一个欢迎使用nginx的页面。\n\n下面的功能，是模拟二个服务，一个是\n- http://122.152.192.161:81 ->这个是nginx安装后的默认欢迎页面。\n- http://122.152.192.161:82 ->这个是我使用[hexo](https://github.com/luoyunchong/hexo-blog)做的静态博客，（可以随便使用一个静态页面index.html，以供测试，root参数配置相应的目录）\n\n81端口\n\n<fancybox>\n\n![image51555.png](https://miao.su/images/2019/06/25/image51555.png)\n\n</fancybox>\n\n82端口\n\n<fancybox>\n\n![imagec5d3e.png](https://miao.su/images/2019/06/25/imagec5d3e.png)\n\n</fancybox>\n\n~~~bash\n\ncd /etc/nginx/sites-enabled\nvim defult\n~~~\n\n~~~\nserver {\n        listen 81;\n        listen [::]:81;\n\n        root /var/www/html;\n        index index.html index.nginx-debian.html;\n        charset utf-8;\n        location / {\n             try_files $uri $uri/ =404;\n        }\n}\n\nserver {\n        listen 82;\n        charset utf-8;\n        root /var/www/html/hexo-blog;\n        index index.html index.htm index.nginx-debian.html;\n        location  / {\n                try_files $uri $uri/ =404;\n        }\n}\n~~~\n\n因为/etc/nginx/nginx.conf把conf.d文件夹中所有以.conf后缀的都包含进去作为配置项了。\n~~~bash\ncd /etc/nginx/conf.d\nvim docs.conf  #所以这个docs只要以.conf后缀即可，“docs\"可自定义值。\n~~~\n\n~~~\nserver {  \n    listen 80;\n    server_name docs.igeekfan.cn;\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://0.0.0.0:81;\n    }\n}\n~~~\n\n~~~\n#ESC然后:wq退出，保存，\nvim blog.conf   #再新建一个文件夹，配置博客\n~~~\n\n~~~\nserver {\n    listen 80;\n    server_name blog.igeekfan.cn;\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://0.0.0.0:82;\n    }\n\n}\n~~~\n\n然后,加载配置项\n~~~\nnginx -s reload\n~~~\n\n效果图 81端口，转发到 docs.igeekfan.cn\n\n<fancybox>\n\n![Y_XRRQRZJZXJ5N96919c.png](https://miao.su/images/2019/06/25/Y_XRRQRZJZXJ5N96919c.png)\n\n</fancybox>\n\n效果图 82端口,转发到 blog.igeekfan.cn\n\n<fancybox>\n\n![imagedfa93.png](https://miao.su/images/2019/06/25/imagedfa93.png)\n\n</fancybox>\n","source":"_posts/大后端/Docker 、nginx 学习记录.md","raw":"---\ntitle: Docker 、nginx 学习记录\ndate: 2019-06-10 01:00:22\n# description: Docker for windows 下安装 问题，Docker相关文档，Docker 命令行等，nginx相关命令行\ntags:\n- nginx\n- Docker\ncategory:\n- 学习记录\n---\n\n\n## Docker  学习记录\n\nDocker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器->Windows日志->系统中，Hyper-V-VmSwitch 一直提示 类似\"VMSwitch driver due to error\"\n\n* [Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事](https://www.cnblogs.com/GeDiao/p/7975667.html)\n\n别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。\n* [hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错](https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app)\n\n**后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.**\n\n<!-- more -->\n\n## Docker 相关文档\n[Docker最全教程——从理论到实战(一)](https://www.cnblogs.com/codelove/p/10030439.html)\n\n[八个Docker的真实应用场景]( http://dockone.io/article/126)\n\n[docker pull很慢解决办法、配置阿里镜像](https://blog.csdn.net/julien71/article/details/79760919)\n\n[ASP.NET Core开发Docker部署](https://www.cnblogs.com/zxtceq/p/7403953.html)\n\nDocker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository）\n\n一个Image可有多个Container，我们可以把Image发布至Dokcer提供的仓库中，提供给他人使用。\n\n\n## Dockerfile 文件规则\n\n~~~\n\n~~~\n\n## Docker  命令行  \n* Command-Line Interfaces [https://docs.docker.com/engine/reference/run/](https://docs.docker.com/engine/reference/run/)\n~~~\ndocker images  # 查看所有镜像\n\ndocker ps -a #所有正在运行的容器Container\ndocker ps -l #最后启动的容器\n\ndocker rm 容器id   #删除容器\nocker rm $(docker ps -q -a) #一次性删除所有的容器\n\ndocker rmi 镜像id/镜像名称  #删除镜像\ndocker rmi $(docker images -q) #一次性删除所有的镜像。\n\ndocker build -t igeekfan/demo .  #运行构建命令,构建Docker 镜像。 \n\ndocker run 镜像 #运行\ndocker run -it -p 5000:80 igeekfan/demo\n#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80\ndocker run -d -p 5000:80 igeekfan/demo \n-d 参数后台运行\n\ndocker start 容器id\ndocker restart 容器id\ndocker stop 容器id #终止容器。\ndocker logs $CONTAINER_ID ##在container外面查看它的输出 \ndocker attach $CONTAINER_ID ##连接上容器实时查看：\n\ndocker pull microsoft/dotnet  #单独安装某一镜像\n\ndocker save 镜像id > 文件 #持久化镜像\ndocker load < 文件\n~~~\n我们如果想将Docker 放置到其他机器运行，很简单。\n~~~\n#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。\n\ndocker save igeekfan/demo > demo.tar\n\n#然后加载命令\n\ndocker load < demo.tar\n~~~\n\n## nginx 相关命令\n\nUbuntu 进入root 权限，不用每次加sudo\n~~~\nsudo su \n#然后输入root 密码\n~~~\n\n配置nginx\n~~~\nvim /etc/nginx/nginx.conf\n~~~\n\nnginx 验证配置是否成功\n~~~\nnginx -t \n~~~\n\n重新加载nginx配置项\n~~~\nnginx -s reload\n~~~\n\n状态、重启、停止、启动\n~~~\nservice nginx status \nservice nginx restart\nservice nginx stop \nservice nginx start\n~~~\n\n\n- [Ubuntu18.04更换镜像源](https://blog.csdn.net/jasonzhoujx/article/details/80360459)\n\n## nginx配置二级域名\n\n在Ubuntu服务器上安装好nginx，实现不同静态或动态页面服务，可配置自定义二级域名\n* 可参考 [nginx配置二级域名](https://cloud.tencent.com/developer/article/1183138)\n\n我是使用的[腾讯云\n](https://cloud.tencent.com/redirect.php?redirect=1042&cps_key=01a3c9a5a3ce578801cd6f805c09b701&from=console)，有需要可以使用。域名注册的过程就不BB了，假设前提，你有一个备案好的域名。\n云产品->域名解析->选择一个域名（列表页选择解析）->添加记录（依次从在表格上填写，如下图所示，可点击查看大图）\n\n<fancybox>\n\n![](https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png)\n\n</fancybox>\n\n远程连接服务器后，增加相应的配置项，我们使用nginx实现域名的配置，安装nginx(也不详细说明)，这时候，（/var/www/html）会有一个.html,就是一个欢迎使用nginx的页面。\n\n下面的功能，是模拟二个服务，一个是\n- http://122.152.192.161:81 ->这个是nginx安装后的默认欢迎页面。\n- http://122.152.192.161:82 ->这个是我使用[hexo](https://github.com/luoyunchong/hexo-blog)做的静态博客，（可以随便使用一个静态页面index.html，以供测试，root参数配置相应的目录）\n\n81端口\n\n<fancybox>\n\n![image51555.png](https://miao.su/images/2019/06/25/image51555.png)\n\n</fancybox>\n\n82端口\n\n<fancybox>\n\n![imagec5d3e.png](https://miao.su/images/2019/06/25/imagec5d3e.png)\n\n</fancybox>\n\n~~~bash\n\ncd /etc/nginx/sites-enabled\nvim defult\n~~~\n\n~~~\nserver {\n        listen 81;\n        listen [::]:81;\n\n        root /var/www/html;\n        index index.html index.nginx-debian.html;\n        charset utf-8;\n        location / {\n             try_files $uri $uri/ =404;\n        }\n}\n\nserver {\n        listen 82;\n        charset utf-8;\n        root /var/www/html/hexo-blog;\n        index index.html index.htm index.nginx-debian.html;\n        location  / {\n                try_files $uri $uri/ =404;\n        }\n}\n~~~\n\n因为/etc/nginx/nginx.conf把conf.d文件夹中所有以.conf后缀的都包含进去作为配置项了。\n~~~bash\ncd /etc/nginx/conf.d\nvim docs.conf  #所以这个docs只要以.conf后缀即可，“docs\"可自定义值。\n~~~\n\n~~~\nserver {  \n    listen 80;\n    server_name docs.igeekfan.cn;\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://0.0.0.0:81;\n    }\n}\n~~~\n\n~~~\n#ESC然后:wq退出，保存，\nvim blog.conf   #再新建一个文件夹，配置博客\n~~~\n\n~~~\nserver {\n    listen 80;\n    server_name blog.igeekfan.cn;\n\n    location / {\n        proxy_set_header   X-Real-IP $remote_addr;\n        proxy_set_header   Host      $http_host;\n        proxy_pass         http://0.0.0.0:82;\n    }\n\n}\n~~~\n\n然后,加载配置项\n~~~\nnginx -s reload\n~~~\n\n效果图 81端口，转发到 docs.igeekfan.cn\n\n<fancybox>\n\n![Y_XRRQRZJZXJ5N96919c.png](https://miao.su/images/2019/06/25/Y_XRRQRZJZXJ5N96919c.png)\n\n</fancybox>\n\n效果图 82端口,转发到 blog.igeekfan.cn\n\n<fancybox>\n\n![imagedfa93.png](https://miao.su/images/2019/06/25/imagedfa93.png)\n\n</fancybox>\n","slug":"大后端/Docker 、nginx 学习记录","published":1,"updated":"2019-06-25T14:47:07.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiu2000s00ux6zj9nt3w","content":"<h2 id=\"Docker-学习记录\"><a href=\"#Docker-学习记录\" class=\"headerlink\" title=\"Docker  学习记录\"></a>Docker  学习记录</h2><p>Docker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器-&gt;Windows日志-&gt;系统中，Hyper-V-VmSwitch 一直提示 类似”VMSwitch driver due to error”</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/GeDiao/p/7975667.html\" target=\"_blank\" rel=\"noopener\">Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事</a></li>\n</ul>\n<p>别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。</p>\n<ul>\n<li><a href=\"https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app\" target=\"_blank\" rel=\"noopener\">hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错</a></li>\n</ul>\n<p><strong>后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.</strong></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Docker-相关文档\"><a href=\"#Docker-相关文档\" class=\"headerlink\" title=\"Docker 相关文档\"></a>Docker 相关文档</h2><p><a href=\"https://www.cnblogs.com/codelove/p/10030439.html\" target=\"_blank\" rel=\"noopener\">Docker最全教程——从理论到实战(一)</a></p>\n<p><a href=\"http://dockone.io/article/126\" target=\"_blank\" rel=\"noopener\">八个Docker的真实应用场景</a></p>\n<p><a href=\"https://blog.csdn.net/julien71/article/details/79760919\" target=\"_blank\" rel=\"noopener\">docker pull很慢解决办法、配置阿里镜像</a></p>\n<p><a href=\"https://www.cnblogs.com/zxtceq/p/7403953.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core开发Docker部署</a></p>\n<p>Docker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository）</p>\n<p>一个Image可有多个Container，我们可以把Image发布至Dokcer提供的仓库中，提供给他人使用。</p>\n<h2 id=\"Dockerfile-文件规则\"><a href=\"#Dockerfile-文件规则\" class=\"headerlink\" title=\"Dockerfile 文件规则\"></a>Dockerfile 文件规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-命令行\"><a href=\"#Docker-命令行\" class=\"headerlink\" title=\"Docker  命令行\"></a>Docker  命令行</h2><ul>\n<li>Command-Line Interfaces <a href=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/run/</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images  # 查看所有镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps -a #所有正在运行的容器Container</span><br><span class=\"line\">docker ps -l #最后启动的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker rm 容器id   #删除容器</span><br><span class=\"line\">ocker rm $(docker ps -q -a) #一次性删除所有的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi 镜像id/镜像名称  #删除镜像</span><br><span class=\"line\">docker rmi $(docker images -q) #一次性删除所有的镜像。</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t igeekfan/demo .  #运行构建命令,构建Docker 镜像。 </span><br><span class=\"line\"></span><br><span class=\"line\">docker run 镜像 #运行</span><br><span class=\"line\">docker run -it -p 5000:80 igeekfan/demo</span><br><span class=\"line\">#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</span><br><span class=\"line\">docker run -d -p 5000:80 igeekfan/demo </span><br><span class=\"line\">-d 参数后台运行</span><br><span class=\"line\"></span><br><span class=\"line\">docker start 容器id</span><br><span class=\"line\">docker restart 容器id</span><br><span class=\"line\">docker stop 容器id #终止容器。</span><br><span class=\"line\">docker logs $CONTAINER_ID ##在container外面查看它的输出 </span><br><span class=\"line\">docker attach $CONTAINER_ID ##连接上容器实时查看：</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull microsoft/dotnet  #单独安装某一镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker save 镜像id &gt; 文件 #持久化镜像</span><br><span class=\"line\">docker load &lt; 文件</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>我们如果想将Docker 放置到其他机器运行，很简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。</span><br><span class=\"line\"></span><br><span class=\"line\">docker save igeekfan/demo &gt; demo.tar</span><br><span class=\"line\"></span><br><span class=\"line\">#然后加载命令</span><br><span class=\"line\"></span><br><span class=\"line\">docker load &lt; demo.tar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx-相关命令\"><a href=\"#nginx-相关命令\" class=\"headerlink\" title=\"nginx 相关命令\"></a>nginx 相关命令</h2><p>Ubuntu 进入root 权限，不用每次加sudo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su </span><br><span class=\"line\">#然后输入root 密码</span><br></pre></td></tr></table></figure>\n\n<p>配置nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>nginx 验证配置是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>重新加载nginx配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>状态、重启、停止、启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx status </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\">service nginx stop </span><br><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/jasonzhoujx/article/details/80360459\" target=\"_blank\" rel=\"noopener\">Ubuntu18.04更换镜像源</a></li>\n</ul>\n<h2 id=\"nginx配置二级域名\"><a href=\"#nginx配置二级域名\" class=\"headerlink\" title=\"nginx配置二级域名\"></a>nginx配置二级域名</h2><p>在Ubuntu服务器上安装好nginx，实现不同静态或动态页面服务，可配置自定义二级域名</p>\n<ul>\n<li>可参考 <a href=\"https://cloud.tencent.com/developer/article/1183138\" target=\"_blank\" rel=\"noopener\">nginx配置二级域名</a></li>\n</ul>\n<p>我是使用的<a href=\"https://cloud.tencent.com/redirect.php?redirect=1042&cps_key=01a3c9a5a3ce578801cd6f805c09b701&from=console\" target=\"_blank\" rel=\"noopener\">腾讯云\n</a>，有需要可以使用。域名注册的过程就不BB了，假设前提，你有一个备案好的域名。<br>云产品-&gt;域名解析-&gt;选择一个域名（列表页选择解析）-&gt;添加记录（依次从在表格上填写，如下图所示，可点击查看大图）</p>\n<fancybox>\n\n<p><img src=\"https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png\" alt></p>\n</fancybox>\n\n<p>远程连接服务器后，增加相应的配置项，我们使用nginx实现域名的配置，安装nginx(也不详细说明)，这时候，（/var/www/html）会有一个.html,就是一个欢迎使用nginx的页面。</p>\n<p>下面的功能，是模拟二个服务，一个是</p>\n<ul>\n<li><a href=\"http://122.152.192.161:81\" target=\"_blank\" rel=\"noopener\">http://122.152.192.161:81</a> -&gt;这个是nginx安装后的默认欢迎页面。</li>\n<li><a href=\"http://122.152.192.161:82\" target=\"_blank\" rel=\"noopener\">http://122.152.192.161:82</a> -&gt;这个是我使用<a href=\"https://github.com/luoyunchong/hexo-blog\" target=\"_blank\" rel=\"noopener\">hexo</a>做的静态博客，（可以随便使用一个静态页面index.html，以供测试，root参数配置相应的目录）</li>\n</ul>\n<p>81端口</p>\n<fancybox>\n\n<p><img src=\"https://miao.su/images/2019/06/25/image51555.png\" alt=\"image51555.png\"></p>\n</fancybox>\n\n<p>82端口</p>\n<fancybox>\n\n<p><img src=\"https://miao.su/images/2019/06/25/imagec5d3e.png\" alt=\"imagec5d3e.png\"></p>\n</fancybox>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/sites-enabled</span><br><span class=\"line\">vim defult</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 81;</span><br><span class=\"line\">        listen [::]:81;</span><br><span class=\"line\"></span><br><span class=\"line\">        root /var/www/html;</span><br><span class=\"line\">        index index.html index.nginx-debian.html;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">             try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 82;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        root /var/www/html/hexo-blog;</span><br><span class=\"line\">        index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">        location  / &#123;</span><br><span class=\"line\">                try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为/etc/nginx/nginx.conf把conf.d文件夹中所有以.conf后缀的都包含进去作为配置项了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/conf.d</span><br><span class=\"line\">vim docs.conf  <span class=\"comment\">#所以这个docs只要以.conf后缀即可，“docs\"可自定义值。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;  </span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name docs.igeekfan.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header   Host      $http_host;</span><br><span class=\"line\">        proxy_pass         http://0.0.0.0:81;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ESC然后:wq退出，保存，</span><br><span class=\"line\">vim blog.conf   #再新建一个文件夹，配置博客</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.igeekfan.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header   Host      $http_host;</span><br><span class=\"line\">        proxy_pass         http://0.0.0.0:82;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后,加载配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>效果图 81端口，转发到 docs.igeekfan.cn</p>\n<fancybox>\n\n<p><img src=\"https://miao.su/images/2019/06/25/Y_XRRQRZJZXJ5N96919c.png\" alt=\"Y_XRRQRZJZXJ5N96919c.png\"></p>\n</fancybox>\n\n<p>效果图 82端口,转发到 blog.igeekfan.cn</p>\n<fancybox>\n\n<p><img src=\"https://miao.su/images/2019/06/25/imagedfa93.png\" alt=\"imagedfa93.png\"></p>\n</fancybox>\n","site":{"data":{}},"excerpt":"<h2 id=\"Docker-学习记录\"><a href=\"#Docker-学习记录\" class=\"headerlink\" title=\"Docker  学习记录\"></a>Docker  学习记录</h2><p>Docker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器-&gt;Windows日志-&gt;系统中，Hyper-V-VmSwitch 一直提示 类似”VMSwitch driver due to error”</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/GeDiao/p/7975667.html\" target=\"_blank\" rel=\"noopener\">Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事</a></li>\n</ul>\n<p>别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。</p>\n<ul>\n<li><a href=\"https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app\" target=\"_blank\" rel=\"noopener\">hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错</a></li>\n</ul>\n<p><strong>后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.</strong></p>","more":"<h2 id=\"Docker-相关文档\"><a href=\"#Docker-相关文档\" class=\"headerlink\" title=\"Docker 相关文档\"></a>Docker 相关文档</h2><p><a href=\"https://www.cnblogs.com/codelove/p/10030439.html\" target=\"_blank\" rel=\"noopener\">Docker最全教程——从理论到实战(一)</a></p>\n<p><a href=\"http://dockone.io/article/126\" target=\"_blank\" rel=\"noopener\">八个Docker的真实应用场景</a></p>\n<p><a href=\"https://blog.csdn.net/julien71/article/details/79760919\" target=\"_blank\" rel=\"noopener\">docker pull很慢解决办法、配置阿里镜像</a></p>\n<p><a href=\"https://www.cnblogs.com/zxtceq/p/7403953.html\" target=\"_blank\" rel=\"noopener\">ASP.NET Core开发Docker部署</a></p>\n<p>Docker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository）</p>\n<p>一个Image可有多个Container，我们可以把Image发布至Dokcer提供的仓库中，提供给他人使用。</p>\n<h2 id=\"Dockerfile-文件规则\"><a href=\"#Dockerfile-文件规则\" class=\"headerlink\" title=\"Dockerfile 文件规则\"></a>Dockerfile 文件规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker-命令行\"><a href=\"#Docker-命令行\" class=\"headerlink\" title=\"Docker  命令行\"></a>Docker  命令行</h2><ul>\n<li>Command-Line Interfaces <a href=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/engine/reference/run/</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images  # 查看所有镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps -a #所有正在运行的容器Container</span><br><span class=\"line\">docker ps -l #最后启动的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker rm 容器id   #删除容器</span><br><span class=\"line\">ocker rm $(docker ps -q -a) #一次性删除所有的容器</span><br><span class=\"line\"></span><br><span class=\"line\">docker rmi 镜像id/镜像名称  #删除镜像</span><br><span class=\"line\">docker rmi $(docker images -q) #一次性删除所有的镜像。</span><br><span class=\"line\"></span><br><span class=\"line\">docker build -t igeekfan/demo .  #运行构建命令,构建Docker 镜像。 </span><br><span class=\"line\"></span><br><span class=\"line\">docker run 镜像 #运行</span><br><span class=\"line\">docker run -it -p 5000:80 igeekfan/demo</span><br><span class=\"line\">#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</span><br><span class=\"line\">docker run -d -p 5000:80 igeekfan/demo </span><br><span class=\"line\">-d 参数后台运行</span><br><span class=\"line\"></span><br><span class=\"line\">docker start 容器id</span><br><span class=\"line\">docker restart 容器id</span><br><span class=\"line\">docker stop 容器id #终止容器。</span><br><span class=\"line\">docker logs $CONTAINER_ID ##在container外面查看它的输出 </span><br><span class=\"line\">docker attach $CONTAINER_ID ##连接上容器实时查看：</span><br><span class=\"line\"></span><br><span class=\"line\">docker pull microsoft/dotnet  #单独安装某一镜像</span><br><span class=\"line\"></span><br><span class=\"line\">docker save 镜像id &gt; 文件 #持久化镜像</span><br><span class=\"line\">docker load &lt; 文件</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>我们如果想将Docker 放置到其他机器运行，很简单。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。</span><br><span class=\"line\"></span><br><span class=\"line\">docker save igeekfan/demo &gt; demo.tar</span><br><span class=\"line\"></span><br><span class=\"line\">#然后加载命令</span><br><span class=\"line\"></span><br><span class=\"line\">docker load &lt; demo.tar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx-相关命令\"><a href=\"#nginx-相关命令\" class=\"headerlink\" title=\"nginx 相关命令\"></a>nginx 相关命令</h2><p>Ubuntu 进入root 权限，不用每次加sudo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo su </span><br><span class=\"line\">#然后输入root 密码</span><br></pre></td></tr></table></figure>\n\n<p>配置nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>nginx 验证配置是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>重新加载nginx配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>状态、重启、停止、启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx status </span><br><span class=\"line\">service nginx restart</span><br><span class=\"line\">service nginx stop </span><br><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://blog.csdn.net/jasonzhoujx/article/details/80360459\" target=\"_blank\" rel=\"noopener\">Ubuntu18.04更换镜像源</a></li>\n</ul>\n<h2 id=\"nginx配置二级域名\"><a href=\"#nginx配置二级域名\" class=\"headerlink\" title=\"nginx配置二级域名\"></a>nginx配置二级域名</h2><p>在Ubuntu服务器上安装好nginx，实现不同静态或动态页面服务，可配置自定义二级域名</p>\n<ul>\n<li>可参考 <a href=\"https://cloud.tencent.com/developer/article/1183138\" target=\"_blank\" rel=\"noopener\">nginx配置二级域名</a></li>\n</ul>\n<p>我是使用的<a href=\"https://cloud.tencent.com/redirect.php?redirect=1042&cps_key=01a3c9a5a3ce578801cd6f805c09b701&from=console\" target=\"_blank\" rel=\"noopener\">腾讯云\n</a>，有需要可以使用。域名注册的过程就不BB了，假设前提，你有一个备案好的域名。<br>云产品-&gt;域名解析-&gt;选择一个域名（列表页选择解析）-&gt;添加记录（依次从在表格上填写，如下图所示，可点击查看大图）</p>\n<fancybox>\n\n<p><img src=\"https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png\" alt></p>\n</fancybox>\n\n<p>远程连接服务器后，增加相应的配置项，我们使用nginx实现域名的配置，安装nginx(也不详细说明)，这时候，（/var/www/html）会有一个.html,就是一个欢迎使用nginx的页面。</p>\n<p>下面的功能，是模拟二个服务，一个是</p>\n<ul>\n<li><a href=\"http://122.152.192.161:81\" target=\"_blank\" rel=\"noopener\">http://122.152.192.161:81</a> -&gt;这个是nginx安装后的默认欢迎页面。</li>\n<li><a href=\"http://122.152.192.161:82\" target=\"_blank\" rel=\"noopener\">http://122.152.192.161:82</a> -&gt;这个是我使用<a href=\"https://github.com/luoyunchong/hexo-blog\" target=\"_blank\" rel=\"noopener\">hexo</a>做的静态博客，（可以随便使用一个静态页面index.html，以供测试，root参数配置相应的目录）</li>\n</ul>\n<p>81端口</p>\n<fancybox>\n\n<p><img src=\"https://miao.su/images/2019/06/25/image51555.png\" alt=\"image51555.png\"></p>\n</fancybox>\n\n<p>82端口</p>\n<fancybox>\n\n<p><img src=\"https://miao.su/images/2019/06/25/imagec5d3e.png\" alt=\"imagec5d3e.png\"></p>\n</fancybox>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/sites-enabled</span><br><span class=\"line\">vim defult</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 81;</span><br><span class=\"line\">        listen [::]:81;</span><br><span class=\"line\"></span><br><span class=\"line\">        root /var/www/html;</span><br><span class=\"line\">        index index.html index.nginx-debian.html;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">             try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 82;</span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\">        root /var/www/html/hexo-blog;</span><br><span class=\"line\">        index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">        location  / &#123;</span><br><span class=\"line\">                try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为/etc/nginx/nginx.conf把conf.d文件夹中所有以.conf后缀的都包含进去作为配置项了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx/conf.d</span><br><span class=\"line\">vim docs.conf  <span class=\"comment\">#所以这个docs只要以.conf后缀即可，“docs\"可自定义值。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;  </span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name docs.igeekfan.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header   Host      $http_host;</span><br><span class=\"line\">        proxy_pass         http://0.0.0.0:81;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ESC然后:wq退出，保存，</span><br><span class=\"line\">vim blog.conf   #再新建一个文件夹，配置博客</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name blog.igeekfan.cn;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header   Host      $http_host;</span><br><span class=\"line\">        proxy_pass         http://0.0.0.0:82;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后,加载配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>效果图 81端口，转发到 docs.igeekfan.cn</p>\n<fancybox>\n\n<p><img src=\"https://miao.su/images/2019/06/25/Y_XRRQRZJZXJ5N96919c.png\" alt=\"Y_XRRQRZJZXJ5N96919c.png\"></p>\n</fancybox>\n\n<p>效果图 82端口,转发到 blog.igeekfan.cn</p>\n<fancybox>\n\n<p><img src=\"https://miao.su/images/2019/06/25/imagedfa93.png\" alt=\"imagedfa93.png\"></p>\n</fancybox>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png","popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"Docker 、nginx 学习记录","path":"2019/06/10/大后端/Docker 、nginx 学习记录/","eyeCatchImage":"https://miao.su/images/2019/06/25/RSF6QBO9P646IV17eef5c.png","excerpt":"<h2 id=\"Docker-学习记录\"><a href=\"#Docker-学习记录\" class=\"headerlink\" title=\"Docker  学习记录\"></a>Docker  学习记录</h2><p>Docker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器-&gt;Windows日志-&gt;系统中，Hyper-V-VmSwitch 一直提示 类似”VMSwitch driver due to error”</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/GeDiao/p/7975667.html\" target=\"_blank\" rel=\"noopener\">Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事</a></li>\n</ul>\n<p>别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。</p>\n<ul>\n<li><a href=\"https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app\" target=\"_blank\" rel=\"noopener\">hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错</a></li>\n</ul>\n<p><strong>后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.</strong></p>","date":"2019-06-09T17:00:22.000Z","pv":0,"totalPV":0,"categories":"学习记录","tags":["Docker","nginx"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Navicat Premium 12  破解版免费下载","date":"2018-06-02T15:21:22.000Z","_content":"\n#### Navicat Premium 12 破解版免费下载\n\n下载链接如下：[百度网盘地址](https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q) 密码：mi2p\n里面也有readm.txt，是一个很简单的说明\n\n由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12  连接不上，会报错\n\n> [navicat连接MySQL8.0出现2059错误](https://blog.csdn.net/qq_29932025/article/details/80045716)\n\n最重要的就是这么一行代码就行了\n\n        ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n        \n##### 上面那行以mysql_native_password的加密规则更新了用户的密码 \n\npassword 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。\n\n<!-- more -->","source":"_posts/大后端/Navicat Premium 12  破解版免费下载.md","raw":"---\ntitle: Navicat Premium 12  破解版免费下载\ndate: 2018-06-02 23:21:22\ntags:\n- MySQL\n- Navicat Premium 12\ncategory:\n- MySQL\n---\n\n#### Navicat Premium 12 破解版免费下载\n\n下载链接如下：[百度网盘地址](https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q) 密码：mi2p\n里面也有readm.txt，是一个很简单的说明\n\n由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12  连接不上，会报错\n\n> [navicat连接MySQL8.0出现2059错误](https://blog.csdn.net/qq_29932025/article/details/80045716)\n\n最重要的就是这么一行代码就行了\n\n        ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n        \n##### 上面那行以mysql_native_password的加密规则更新了用户的密码 \n\npassword 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。\n\n<!-- more -->","slug":"大后端/Navicat Premium 12  破解版免费下载","published":1,"updated":"2019-06-25T14:47:07.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiu3000w00ux14yhwqhu","content":"<h4 id=\"Navicat-Premium-12-破解版免费下载\"><a href=\"#Navicat-Premium-12-破解版免费下载\" class=\"headerlink\" title=\"Navicat Premium 12 破解版免费下载\"></a>Navicat Premium 12 破解版免费下载</h4><p>下载链接如下：<a href=\"https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q\" target=\"_blank\" rel=\"noopener\">百度网盘地址</a> 密码：mi2p<br>里面也有readm.txt，是一个很简单的说明</p>\n<p>由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12  连接不上，会报错</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_29932025/article/details/80045716\" target=\"_blank\" rel=\"noopener\">navicat连接MySQL8.0出现2059错误</a></p>\n</blockquote>\n<p>最重要的就是这么一行代码就行了</p>\n<pre><code>ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</code></pre><h5 id=\"上面那行以mysql-native-password的加密规则更新了用户的密码\"><a href=\"#上面那行以mysql-native-password的加密规则更新了用户的密码\" class=\"headerlink\" title=\"上面那行以mysql_native_password的加密规则更新了用户的密码\"></a>上面那行以mysql_native_password的加密规则更新了用户的密码</h5><p>password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h4 id=\"Navicat-Premium-12-破解版免费下载\"><a href=\"#Navicat-Premium-12-破解版免费下载\" class=\"headerlink\" title=\"Navicat Premium 12 破解版免费下载\"></a>Navicat Premium 12 破解版免费下载</h4><p>下载链接如下：<a href=\"https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q\" target=\"_blank\" rel=\"noopener\">百度网盘地址</a> 密码：mi2p<br>里面也有readm.txt，是一个很简单的说明</p>\n<p>由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12  连接不上，会报错</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_29932025/article/details/80045716\" target=\"_blank\" rel=\"noopener\">navicat连接MySQL8.0出现2059错误</a></p>\n</blockquote>\n<p>最重要的就是这么一行代码就行了</p>\n<pre><code>ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</code></pre><h5 id=\"上面那行以mysql-native-password的加密规则更新了用户的密码\"><a href=\"#上面那行以mysql-native-password的加密规则更新了用户的密码\" class=\"headerlink\" title=\"上面那行以mysql_native_password的加密规则更新了用户的密码\"></a>上面那行以mysql_native_password的加密规则更新了用户的密码</h5><p>password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。</p>","more":"","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"Navicat Premium 12  破解版免费下载","path":"2018/06/02/大后端/Navicat Premium 12  破解版免费下载/","eyeCatchImage":null,"excerpt":"<h4 id=\"Navicat-Premium-12-破解版免费下载\"><a href=\"#Navicat-Premium-12-破解版免费下载\" class=\"headerlink\" title=\"Navicat Premium 12 破解版免费下载\"></a>Navicat Premium 12 破解版免费下载</h4><p>下载链接如下：<a href=\"https://pan.baidu.com/s/1ENh-ZVZg8GI_DBk26BtM-Q\" target=\"_blank\" rel=\"noopener\">百度网盘地址</a> 密码：mi2p<br>里面也有readm.txt，是一个很简单的说明</p>\n<p>由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12  连接不上，会报错</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qq_29932025/article/details/80045716\" target=\"_blank\" rel=\"noopener\">navicat连接MySQL8.0出现2059错误</a></p>\n</blockquote>\n<p>最重要的就是这么一行代码就行了</p>\n<pre><code>ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</code></pre><h5 id=\"上面那行以mysql-native-password的加密规则更新了用户的密码\"><a href=\"#上面那行以mysql-native-password的加密规则更新了用户的密码\" class=\"headerlink\" title=\"上面那行以mysql_native_password的加密规则更新了用户的密码\"></a>上面那行以mysql_native_password的加密规则更新了用户的密码</h5><p>password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。</p>","date":"2018-06-02T15:21:22.000Z","pv":0,"totalPV":0,"categories":"MySQL","tags":["MySQL","Navicat Premium 12"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"MySQL学习记录","date":"2018-12-02T15:21:22.000Z","description":"Mysql8.0+使用Navicat Premium 12连接2059错误，通过修改密码规则即可。Docker下的MySQL容器化，根据父菜单id得到所有的子节点，MySQL新建存储过程，ABP中调用存储过程","_content":"\n\n\nNavicat Premium 12连接MySQL8+时出现2059错误解决方法\n~~~\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n~~~\n\n##### 上面那行以mysql_native_password的加密规则更新了用户的密码 \n\npassword 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。\n- [Navicat Premium 12连接MySQL8.0出现2059错误](https://blog.csdn.net/qq_29932025/article/details/80045716)\n\n- [ubuntu16.04 安装mysql5.7并设置root远程访问](https://www.jianshu.com/p/73fb45b9da73)\n\n- [Docker最全教程之MySQL容器化 （二十五）](https://mp.weixin.qq.com/s?__biz=MzU0Mzk1OTU2Mg==&mid=2247484623&idx=1&sn=b235bb5222ea3391f66f0be0812df49c&chksm=fb023baacc75b2bc8d45b81b9b99a3343ebc877802840a3963d14fc49ae0eda98651f1a9f86e&mpshare=1&scene=23&srcid=06101AKYKpn48TwJXL7VLQ17#rd)\n\n\n\n### 根据父菜单id得到所有的子节点 \nMYSQL写法 \n```\nselect id from (\n              select t1.id,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select id,parentId from re_menu t where t.status = 1 order by parentId, id\n                  ) t1,\n                  (select @pids := 要查询的菜单节点 id) t2\n             ) t3 where ischild != 0\n\n```\n\n\n由于@符号与参数冲突，使用存储过程解决\n```\nCREATE DEFINER=`root`@`localhost` PROCEDURE `OrganizationChildrens`(IN `pid` BIGINT)\nBEGIN\n select Id,ParentId,DisplayName as Text from (\n              select t1.id,t1.ParentId,t1.DisplayName,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select Id,ParentId,DisplayName from AbpOrganizationUnits t where t.IsDeleted = '0' order by ParentId, id\n                  ) t1,\n                  (select @pids :=pid) t2\n             ) t3 where ischild != 0; \nEND\n```\n\nABP框架中调用存储过程\n```\n        public List<TreeSelectModel> GetChildrens(long? pid)\n        {\n            string sql = $\"call OrganizationChildrens({pid})\";\n\n            return _orginazationDapperRepository.Query<TreeSelectModel>(sql).ToList();\n        }\n```","source":"_posts/大后端/MySQL学习记录.md","raw":"---\ntitle: MySQL学习记录\ndate: 2018-12-02 23:21:22\ndescription: Mysql8.0+使用Navicat Premium 12连接2059错误，通过修改密码规则即可。Docker下的MySQL容器化，根据父菜单id得到所有的子节点，MySQL新建存储过程，ABP中调用存储过程\ntags:\n- MySQL\n- ABP\ncategory:\n- MySQL\n---\n\n\n\nNavicat Premium 12连接MySQL8+时出现2059错误解决方法\n~~~\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n~~~\n\n##### 上面那行以mysql_native_password的加密规则更新了用户的密码 \n\npassword 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。\n- [Navicat Premium 12连接MySQL8.0出现2059错误](https://blog.csdn.net/qq_29932025/article/details/80045716)\n\n- [ubuntu16.04 安装mysql5.7并设置root远程访问](https://www.jianshu.com/p/73fb45b9da73)\n\n- [Docker最全教程之MySQL容器化 （二十五）](https://mp.weixin.qq.com/s?__biz=MzU0Mzk1OTU2Mg==&mid=2247484623&idx=1&sn=b235bb5222ea3391f66f0be0812df49c&chksm=fb023baacc75b2bc8d45b81b9b99a3343ebc877802840a3963d14fc49ae0eda98651f1a9f86e&mpshare=1&scene=23&srcid=06101AKYKpn48TwJXL7VLQ17#rd)\n\n\n\n### 根据父菜单id得到所有的子节点 \nMYSQL写法 \n```\nselect id from (\n              select t1.id,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select id,parentId from re_menu t where t.status = 1 order by parentId, id\n                  ) t1,\n                  (select @pids := 要查询的菜单节点 id) t2\n             ) t3 where ischild != 0\n\n```\n\n\n由于@符号与参数冲突，使用存储过程解决\n```\nCREATE DEFINER=`root`@`localhost` PROCEDURE `OrganizationChildrens`(IN `pid` BIGINT)\nBEGIN\n select Id,ParentId,DisplayName as Text from (\n              select t1.id,t1.ParentId,t1.DisplayName,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select Id,ParentId,DisplayName from AbpOrganizationUnits t where t.IsDeleted = '0' order by ParentId, id\n                  ) t1,\n                  (select @pids :=pid) t2\n             ) t3 where ischild != 0; \nEND\n```\n\nABP框架中调用存储过程\n```\n        public List<TreeSelectModel> GetChildrens(long? pid)\n        {\n            string sql = $\"call OrganizationChildrens({pid})\";\n\n            return _orginazationDapperRepository.Query<TreeSelectModel>(sql).ToList();\n        }\n```","slug":"大后端/MySQL学习记录","published":1,"updated":"2019-06-25T15:49:43.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiu4000x00uxoc8t1axy","content":"<p>Navicat Premium 12连接MySQL8+时出现2059错误解决方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上面那行以mysql-native-password的加密规则更新了用户的密码\"><a href=\"#上面那行以mysql-native-password的加密规则更新了用户的密码\" class=\"headerlink\" title=\"上面那行以mysql_native_password的加密规则更新了用户的密码\"></a>上面那行以mysql_native_password的加密规则更新了用户的密码</h5><p>password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。</p>\n<ul>\n<li><p><a href=\"https://blog.csdn.net/qq_29932025/article/details/80045716\" target=\"_blank\" rel=\"noopener\">Navicat Premium 12连接MySQL8.0出现2059错误</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/73fb45b9da73\" target=\"_blank\" rel=\"noopener\">ubuntu16.04 安装mysql5.7并设置root远程访问</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU0Mzk1OTU2Mg==&mid=2247484623&idx=1&sn=b235bb5222ea3391f66f0be0812df49c&chksm=fb023baacc75b2bc8d45b81b9b99a3343ebc877802840a3963d14fc49ae0eda98651f1a9f86e&mpshare=1&scene=23&srcid=06101AKYKpn48TwJXL7VLQ17#rd\" target=\"_blank\" rel=\"noopener\">Docker最全教程之MySQL容器化 （二十五）</a></p>\n</li>\n</ul>\n<h3 id=\"根据父菜单id得到所有的子节点\"><a href=\"#根据父菜单id得到所有的子节点\" class=\"headerlink\" title=\"根据父菜单id得到所有的子节点\"></a>根据父菜单id得到所有的子节点</h3><p>MYSQL写法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from (</span><br><span class=\"line\">              select t1.id,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select id,parentId from re_menu t where t.status = 1 order by parentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids := 要查询的菜单节点 id) t2</span><br><span class=\"line\">             ) t3 where ischild != 0</span><br></pre></td></tr></table></figure>\n\n<p>由于@符号与参数冲突，使用存储过程解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `OrganizationChildrens`(IN `pid` BIGINT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\"> select Id,ParentId,DisplayName as Text from (</span><br><span class=\"line\">              select t1.id,t1.ParentId,t1.DisplayName,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select Id,ParentId,DisplayName from AbpOrganizationUnits t where t.IsDeleted = &apos;0&apos; order by ParentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids :=pid) t2</span><br><span class=\"line\">             ) t3 where ischild != 0; </span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n\n<p>ABP框架中调用存储过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;TreeSelectModel&gt; GetChildrens(long? pid)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string sql = $&quot;call OrganizationChildrens(&#123;pid&#125;)&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _orginazationDapperRepository.Query&lt;TreeSelectModel&gt;(sql).ToList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Navicat Premium 12连接MySQL8+时出现2059错误解决方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上面那行以mysql-native-password的加密规则更新了用户的密码\"><a href=\"#上面那行以mysql-native-password的加密规则更新了用户的密码\" class=\"headerlink\" title=\"上面那行以mysql_native_password的加密规则更新了用户的密码\"></a>上面那行以mysql_native_password的加密规则更新了用户的密码</h5><p>password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。</p>\n<ul>\n<li><p><a href=\"https://blog.csdn.net/qq_29932025/article/details/80045716\" target=\"_blank\" rel=\"noopener\">Navicat Premium 12连接MySQL8.0出现2059错误</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/73fb45b9da73\" target=\"_blank\" rel=\"noopener\">ubuntu16.04 安装mysql5.7并设置root远程访问</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU0Mzk1OTU2Mg==&mid=2247484623&idx=1&sn=b235bb5222ea3391f66f0be0812df49c&chksm=fb023baacc75b2bc8d45b81b9b99a3343ebc877802840a3963d14fc49ae0eda98651f1a9f86e&mpshare=1&scene=23&srcid=06101AKYKpn48TwJXL7VLQ17#rd\" target=\"_blank\" rel=\"noopener\">Docker最全教程之MySQL容器化 （二十五）</a></p>\n</li>\n</ul>\n<h3 id=\"根据父菜单id得到所有的子节点\"><a href=\"#根据父菜单id得到所有的子节点\" class=\"headerlink\" title=\"根据父菜单id得到所有的子节点\"></a>根据父菜单id得到所有的子节点</h3><p>MYSQL写法 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from (</span><br><span class=\"line\">              select t1.id,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select id,parentId from re_menu t where t.status = 1 order by parentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids := 要查询的菜单节点 id) t2</span><br><span class=\"line\">             ) t3 where ischild != 0</span><br></pre></td></tr></table></figure>\n\n<p>由于@符号与参数冲突，使用存储过程解决</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DEFINER=`root`@`localhost` PROCEDURE `OrganizationChildrens`(IN `pid` BIGINT)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\"> select Id,ParentId,DisplayName as Text from (</span><br><span class=\"line\">              select t1.id,t1.ParentId,t1.DisplayName,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select Id,ParentId,DisplayName from AbpOrganizationUnits t where t.IsDeleted = &apos;0&apos; order by ParentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids :=pid) t2</span><br><span class=\"line\">             ) t3 where ischild != 0; </span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n\n<p>ABP框架中调用存储过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;TreeSelectModel&gt; GetChildrens(long? pid)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string sql = $&quot;call OrganizationChildrens(&#123;pid&#125;)&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    return _orginazationDapperRepository.Query&lt;TreeSelectModel&gt;(sql).ToList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 23:49:43 GMT+0800 (GMT+08:00)","title":"MySQL学习记录","path":"2018/12/02/大后端/MySQL学习记录/","eyeCatchImage":null,"excerpt":"Mysql8.0+使用Navicat Premium 12连接2059错误，通过修改密码规则即可。Docker下的MySQL容器化，根据父菜单id得到所有的子节点，MySQL新建存储过程，ABP中调用存储过程","date":"2018-12-02T15:21:22.000Z","pv":0,"totalPV":0,"categories":"MySQL","tags":["ABP","MySQL"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":".NET Framework 下的RazorEngine代码生成原理介绍","date":"2019-06-11T16:56:03.000Z","description":"在.NET Framework框架中，将一个cshtml文件中的Razor模板，使用RazorEngine，将数据绑定上去，生成相应的页面文本","_content":"\n### RazorEngine模板引擎\n在旧版本下[https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding)\n> **旧版本中使用RazorEngine模板引擎技术，对于熟悉razor语法的开发者来说是非常容易的。**\n\n### 如何使用Razor实现代码生成器\n \n**这里提供最简单的一个栗子**\n\n1. CopyRightTemplate.cshtml模板代码如下\n```csharp\n@model SJNScaffolding.Models.TemplateModels.CopyRightUserInfo\n    //=============================================================\n    // 创建人:              @Model.UserName\n    // 创建时间:           @Model.CreateTime\n    // 邮箱：             @Model.EmailAddress\n    //==============================================================\n```\n\n2. 对应的实体类\n```csharp\n    public class CopyRightUserInfo\n    {\n        public string UserName { get; set; }\n        public string EmailAddress { get; set; }\n        public DateTime CreateTime { get; set; }\n        public string FileRemark { get; set; }\n    }\n```\n\n3. 对应的test方法\n```csharp\n        //根据路径。要根据自己实际情况调整\n        private const string BasePath = @\"..\\..\\..\\SJNScaffolding\\\";\n        [TestMethod]\n        public void testCorpyRight()\n        {\n            var path = BasePath + \"Templates\\\\CopyRightTemplate.cshtml\";\n            var template = File.ReadAllText(path);\n\n            string content = Engine.Razor.RunCompile(template, \"CopyRightTemplate\", typeof(CopyRightUserInfo), new CopyRightUserInfo\n            {\n                CreateTime = DateTime.Now,\n                EmailAddress = \"710277267@qq.com\",\n                UserName = \"IGeekFan\"\n            });\n\n        }\n```\n4. 下断点后运行，content变量    \n\n![SJNScaffolding](https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png)\n\n**旧版本使用WPF进行开发，对应的项目名为：SJNScaffolding.WPF，已弃用**","source":"_posts/大后端/RazorEngine代码生成原理介绍.md","raw":"---\ntitle:  .NET Framework 下的RazorEngine代码生成原理介绍\ndate: 2019-06-12 00:56:03\ndescription: 在.NET Framework框架中，将一个cshtml文件中的Razor模板，使用RazorEngine，将数据绑定上去，生成相应的页面文本\ntags:\n- .NET Framework\n- RazorEngine\n- 代码生成器\ncategory:\n- .NET Framework\n---\n\n### RazorEngine模板引擎\n在旧版本下[https://github.com/i542873057/SJNScaffolding](https://github.com/i542873057/SJNScaffolding)\n> **旧版本中使用RazorEngine模板引擎技术，对于熟悉razor语法的开发者来说是非常容易的。**\n\n### 如何使用Razor实现代码生成器\n \n**这里提供最简单的一个栗子**\n\n1. CopyRightTemplate.cshtml模板代码如下\n```csharp\n@model SJNScaffolding.Models.TemplateModels.CopyRightUserInfo\n    //=============================================================\n    // 创建人:              @Model.UserName\n    // 创建时间:           @Model.CreateTime\n    // 邮箱：             @Model.EmailAddress\n    //==============================================================\n```\n\n2. 对应的实体类\n```csharp\n    public class CopyRightUserInfo\n    {\n        public string UserName { get; set; }\n        public string EmailAddress { get; set; }\n        public DateTime CreateTime { get; set; }\n        public string FileRemark { get; set; }\n    }\n```\n\n3. 对应的test方法\n```csharp\n        //根据路径。要根据自己实际情况调整\n        private const string BasePath = @\"..\\..\\..\\SJNScaffolding\\\";\n        [TestMethod]\n        public void testCorpyRight()\n        {\n            var path = BasePath + \"Templates\\\\CopyRightTemplate.cshtml\";\n            var template = File.ReadAllText(path);\n\n            string content = Engine.Razor.RunCompile(template, \"CopyRightTemplate\", typeof(CopyRightUserInfo), new CopyRightUserInfo\n            {\n                CreateTime = DateTime.Now,\n                EmailAddress = \"710277267@qq.com\",\n                UserName = \"IGeekFan\"\n            });\n\n        }\n```\n4. 下断点后运行，content变量    \n\n![SJNScaffolding](https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png)\n\n**旧版本使用WPF进行开发，对应的项目名为：SJNScaffolding.WPF，已弃用**","slug":"大后端/RazorEngine代码生成原理介绍","published":1,"updated":"2019-06-25T14:47:07.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiu5001000ux3h41gxao","content":"<h3 id=\"RazorEngine模板引擎\"><a href=\"#RazorEngine模板引擎\" class=\"headerlink\" title=\"RazorEngine模板引擎\"></a>RazorEngine模板引擎</h3><p>在旧版本下<a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a></p>\n<blockquote>\n<p><strong>旧版本中使用RazorEngine模板引擎技术，对于熟悉razor语法的开发者来说是非常容易的。</strong></p>\n</blockquote>\n<h3 id=\"如何使用Razor实现代码生成器\"><a href=\"#如何使用Razor实现代码生成器\" class=\"headerlink\" title=\"如何使用Razor实现代码生成器\"></a>如何使用Razor实现代码生成器</h3><p><strong>这里提供最简单的一个栗子</strong></p>\n<ol>\n<li><p>CopyRightTemplate.cshtml模板代码如下</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@model SJNScaffolding.Models.TemplateModels.CopyRightUserInfo</span><br><span class=\"line\">    <span class=\"comment\">//=============================================================</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建人:              @Model.UserName</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建时间:           @Model.CreateTime</span></span><br><span class=\"line\">    <span class=\"comment\">// 邮箱：             @Model.EmailAddress</span></span><br><span class=\"line\">    <span class=\"comment\">//==============================================================</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对应的实体类</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CopyRightUserInfo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> EmailAddress &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime CreateTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FileRemark &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对应的test方法</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据路径。要根据自己实际情况调整</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">string</span> BasePath = <span class=\"string\">@\"..\\..\\..\\SJNScaffolding\\\"</span>;</span><br><span class=\"line\">[<span class=\"meta\">TestMethod</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCorpyRight</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> path = BasePath + <span class=\"string\">\"Templates\\\\CopyRightTemplate.cshtml\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = File.ReadAllText(path);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">string</span> content = Engine.Razor.RunCompile(template, <span class=\"string\">\"CopyRightTemplate\"</span>, <span class=\"keyword\">typeof</span>(CopyRightUserInfo), <span class=\"keyword\">new</span> CopyRightUserInfo</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CreateTime = DateTime.Now,</span><br><span class=\"line\">        EmailAddress = <span class=\"string\">\"710277267@qq.com\"</span>,</span><br><span class=\"line\">        UserName = <span class=\"string\">\"IGeekFan\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下断点后运行，content变量    </p>\n</li>\n</ol>\n<p><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png\" alt=\"SJNScaffolding\"></p>\n<p><strong>旧版本使用WPF进行开发，对应的项目名为：SJNScaffolding.WPF，已弃用</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"RazorEngine模板引擎\"><a href=\"#RazorEngine模板引擎\" class=\"headerlink\" title=\"RazorEngine模板引擎\"></a>RazorEngine模板引擎</h3><p>在旧版本下<a href=\"https://github.com/i542873057/SJNScaffolding\" target=\"_blank\" rel=\"noopener\">https://github.com/i542873057/SJNScaffolding</a></p>\n<blockquote>\n<p><strong>旧版本中使用RazorEngine模板引擎技术，对于熟悉razor语法的开发者来说是非常容易的。</strong></p>\n</blockquote>\n<h3 id=\"如何使用Razor实现代码生成器\"><a href=\"#如何使用Razor实现代码生成器\" class=\"headerlink\" title=\"如何使用Razor实现代码生成器\"></a>如何使用Razor实现代码生成器</h3><p><strong>这里提供最简单的一个栗子</strong></p>\n<ol>\n<li><p>CopyRightTemplate.cshtml模板代码如下</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@model SJNScaffolding.Models.TemplateModels.CopyRightUserInfo</span><br><span class=\"line\">    <span class=\"comment\">//=============================================================</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建人:              @Model.UserName</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建时间:           @Model.CreateTime</span></span><br><span class=\"line\">    <span class=\"comment\">// 邮箱：             @Model.EmailAddress</span></span><br><span class=\"line\">    <span class=\"comment\">//==============================================================</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对应的实体类</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CopyRightUserInfo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> EmailAddress &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime CreateTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FileRemark &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对应的test方法</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据路径。要根据自己实际情况调整</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"keyword\">string</span> BasePath = <span class=\"string\">@\"..\\..\\..\\SJNScaffolding\\\"</span>;</span><br><span class=\"line\">[<span class=\"meta\">TestMethod</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testCorpyRight</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> path = BasePath + <span class=\"string\">\"Templates\\\\CopyRightTemplate.cshtml\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = File.ReadAllText(path);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">string</span> content = Engine.Razor.RunCompile(template, <span class=\"string\">\"CopyRightTemplate\"</span>, <span class=\"keyword\">typeof</span>(CopyRightUserInfo), <span class=\"keyword\">new</span> CopyRightUserInfo</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CreateTime = DateTime.Now,</span><br><span class=\"line\">        EmailAddress = <span class=\"string\">\"710277267@qq.com\"</span>,</span><br><span class=\"line\">        UserName = <span class=\"string\">\"IGeekFan\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下断点后运行，content变量    </p>\n</li>\n</ol>\n<p><img src=\"https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png\" alt=\"SJNScaffolding\"></p>\n<p><strong>旧版本使用WPF进行开发，对应的项目名为：SJNScaffolding.WPF，已弃用</strong></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png","popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":".NET Framework 下的RazorEngine代码生成原理介绍","path":"2019/06/12/大后端/RazorEngine代码生成原理介绍/","eyeCatchImage":"https://github.com/i542873057/SJNScaffolding/raw/master/Img/1.png","excerpt":"在.NET Framework框架中，将一个cshtml文件中的Razor模板，使用RazorEngine，将数据绑定上去，生成相应的页面文本","date":"2019-06-11T16:56:03.000Z","pv":0,"totalPV":0,"categories":".NET Framework","tags":[".NET Framework","RazorEngine","代码生成器"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"工作内容Rshiny框架使用","date":"2018-12-25T16:56:03.000Z","description":"R语言框架中的Rshiny Web框架，学习记录相关文档，命令行配置项，发布，异步编程。","_content":"\n\n\n## shiny Server学习记录-网络计算\n* [http://218.94.144.229:8098/NetworkEntropy/]( http://218.94.144.229:8098/NetworkEntropy/)  用户名 admin 密码 123qwe\n* shiny api文档[http://shiny.rstudio.com/reference/shiny/latest/](http://shiny.rstudio.com/reference/shiny/latest/)\n* shiny github [https://github.com/rstudio/shiny](https://github.com/rstudio/shiny)\n* Shiny Server配置 https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440\n* R shiny基础教程 [https://blog.csdn.net/u014801157/article/category/5690387](https://blog.csdn.net/u014801157/article/category/5690387)\n* windows下无法正常安装某个类库时,Windows 下R软件如何安装GO.db程序包[https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg](https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg)\n\n\n\n* 内网是在浏览器下输入 http://:3838/APP_NAME/即可 \n\n\n一些重要的命令\n\n### 先复制shiny包自带样例到目录下\n~~~\ncp -r /usr/lib64/R/library/shiny/examples/* /srv/shiny-server/   \n~~~\n\nshiny server 服务设置状态\n~~~\n#查看状态\nsudo systemctl status shiny-server\n#开启\nsudo systemctl start shiny-server\n#停止\nsudo systemctl stop shiny-server\n#重启\nsudo systemctl restart shiny-server\n~~~\n\n1) 配置文件位置：/etc/shiny-server/shiny-server.conf \n2) 报错时查看日志[服务器运行日志] \n/var/log/shiny-server.log \n3) shiny运行日志[类似R的运行日志] \n/var/log/shiny-server\n\n\n**当无法安装某些包时可使用下面的代码进行安装**：\n\n~~~\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite(\"包名\")\n~~~\n\n\n> R 3.3.3  R语言执行需要安装的程序包\n> \n> 以管理员权限运行Rgui,并指定包安装的位置，防止安装到其他目录\n~~~bash\n.libPaths(\"C:/Program Files/R/R-3.3.3/library\")\n~~~\n\n~~~\ninstall.packages('pillar')\n\ninstall.packages(\"ClustOfVar\")\ninstall.packages(\"psych\")\ninstall.packages(\"GPArotation\")\ninstall.packages(\"stringr\")\ninstall.packages(\"readxl\")\ninstall.packages(\"ca\")\n## 这个包可能也不正常\ninstall.packages(\"arulesViz\")\n\n\n## 这些包无法正常安装\ninstall.packages(\"arules\") \ninstall.packages(\"lavaan\")\n~~~\n\n\n### 中医网络分析模块\n~~~\n    biocLite('GO.db')\n    biocLite('org.Hs.eg.db')\n    biocLite('clusterProfiler')\n\n    biocLite('WGCNA')\n\n    intsall.packages('WGCNA')\n~~~\n\n\n\n2018-12-26\n可以不阻塞当前运行的程序\n* shiny 异步 编程 [https://rstudio.github.io/promises/articles/intro.html](https://rstudio.github.io/promises/articles/intro.html)\n\n","source":"_posts/大后端/工作内容Rshiny框架使用.md","raw":"---\ntitle:  工作内容Rshiny框架使用\ndate: 2018-12-26 00:56:03\ndescription: R语言框架中的Rshiny Web框架，学习记录相关文档，命令行配置项，发布，异步编程。\ntags:\n- Rshiny\ncategory:\n- 大后端\n---\n\n\n\n## shiny Server学习记录-网络计算\n* [http://218.94.144.229:8098/NetworkEntropy/]( http://218.94.144.229:8098/NetworkEntropy/)  用户名 admin 密码 123qwe\n* shiny api文档[http://shiny.rstudio.com/reference/shiny/latest/](http://shiny.rstudio.com/reference/shiny/latest/)\n* shiny github [https://github.com/rstudio/shiny](https://github.com/rstudio/shiny)\n* Shiny Server配置 https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440\n* R shiny基础教程 [https://blog.csdn.net/u014801157/article/category/5690387](https://blog.csdn.net/u014801157/article/category/5690387)\n* windows下无法正常安装某个类库时,Windows 下R软件如何安装GO.db程序包[https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg](https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg)\n\n\n\n* 内网是在浏览器下输入 http://:3838/APP_NAME/即可 \n\n\n一些重要的命令\n\n### 先复制shiny包自带样例到目录下\n~~~\ncp -r /usr/lib64/R/library/shiny/examples/* /srv/shiny-server/   \n~~~\n\nshiny server 服务设置状态\n~~~\n#查看状态\nsudo systemctl status shiny-server\n#开启\nsudo systemctl start shiny-server\n#停止\nsudo systemctl stop shiny-server\n#重启\nsudo systemctl restart shiny-server\n~~~\n\n1) 配置文件位置：/etc/shiny-server/shiny-server.conf \n2) 报错时查看日志[服务器运行日志] \n/var/log/shiny-server.log \n3) shiny运行日志[类似R的运行日志] \n/var/log/shiny-server\n\n\n**当无法安装某些包时可使用下面的代码进行安装**：\n\n~~~\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite(\"包名\")\n~~~\n\n\n> R 3.3.3  R语言执行需要安装的程序包\n> \n> 以管理员权限运行Rgui,并指定包安装的位置，防止安装到其他目录\n~~~bash\n.libPaths(\"C:/Program Files/R/R-3.3.3/library\")\n~~~\n\n~~~\ninstall.packages('pillar')\n\ninstall.packages(\"ClustOfVar\")\ninstall.packages(\"psych\")\ninstall.packages(\"GPArotation\")\ninstall.packages(\"stringr\")\ninstall.packages(\"readxl\")\ninstall.packages(\"ca\")\n## 这个包可能也不正常\ninstall.packages(\"arulesViz\")\n\n\n## 这些包无法正常安装\ninstall.packages(\"arules\") \ninstall.packages(\"lavaan\")\n~~~\n\n\n### 中医网络分析模块\n~~~\n    biocLite('GO.db')\n    biocLite('org.Hs.eg.db')\n    biocLite('clusterProfiler')\n\n    biocLite('WGCNA')\n\n    intsall.packages('WGCNA')\n~~~\n\n\n\n2018-12-26\n可以不阻塞当前运行的程序\n* shiny 异步 编程 [https://rstudio.github.io/promises/articles/intro.html](https://rstudio.github.io/promises/articles/intro.html)\n\n","slug":"大后端/工作内容Rshiny框架使用","published":1,"updated":"2019-06-25T14:47:07.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiu6001300uxumffpszy","content":"<h2 id=\"shiny-Server学习记录-网络计算\"><a href=\"#shiny-Server学习记录-网络计算\" class=\"headerlink\" title=\"shiny Server学习记录-网络计算\"></a>shiny Server学习记录-网络计算</h2><ul>\n<li><a href=\"http://218.94.144.229:8098/NetworkEntropy/\" target=\"_blank\" rel=\"noopener\">http://218.94.144.229:8098/NetworkEntropy/</a>  用户名 admin 密码 123qwe</li>\n<li>shiny api文档<a href=\"http://shiny.rstudio.com/reference/shiny/latest/\" target=\"_blank\" rel=\"noopener\">http://shiny.rstudio.com/reference/shiny/latest/</a></li>\n<li>shiny github <a href=\"https://github.com/rstudio/shiny\" target=\"_blank\" rel=\"noopener\">https://github.com/rstudio/shiny</a></li>\n<li>Shiny Server配置 <a href=\"https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440</a></li>\n<li>R shiny基础教程 <a href=\"https://blog.csdn.net/u014801157/article/category/5690387\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u014801157/article/category/5690387</a></li>\n<li>windows下无法正常安装某个类库时,Windows 下R软件如何安装GO.db程序包<a href=\"https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg</a></li>\n</ul>\n<ul>\n<li>内网是在浏览器下输入 http://:3838/APP_NAME/即可 </li>\n</ul>\n<p>一些重要的命令</p>\n<h3 id=\"先复制shiny包自带样例到目录下\"><a href=\"#先复制shiny包自带样例到目录下\" class=\"headerlink\" title=\"先复制shiny包自带样例到目录下\"></a>先复制shiny包自带样例到目录下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r /usr/lib64/R/library/shiny/examples/* /srv/shiny-server/</span><br></pre></td></tr></table></figure>\n\n<p>shiny server 服务设置状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看状态</span><br><span class=\"line\">sudo systemctl status shiny-server</span><br><span class=\"line\">#开启</span><br><span class=\"line\">sudo systemctl start shiny-server</span><br><span class=\"line\">#停止</span><br><span class=\"line\">sudo systemctl stop shiny-server</span><br><span class=\"line\">#重启</span><br><span class=\"line\">sudo systemctl restart shiny-server</span><br></pre></td></tr></table></figure>\n\n<p>1) 配置文件位置：/etc/shiny-server/shiny-server.conf<br>2) 报错时查看日志[服务器运行日志]<br>/var/log/shiny-server.log<br>3) shiny运行日志[类似R的运行日志]<br>/var/log/shiny-server</p>\n<p><strong>当无法安装某些包时可使用下面的代码进行安装</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source(&quot;http://bioconductor.org/biocLite.R&quot;)</span><br><span class=\"line\">biocLite(&quot;包名&quot;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>R 3.3.3  R语言执行需要安装的程序包</p>\n<p>以管理员权限运行Rgui,并指定包安装的位置，防止安装到其他目录</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.libPaths(<span class=\"string\">\"C:/Program Files/R/R-3.3.3/library\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install.packages(&apos;pillar&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">install.packages(&quot;ClustOfVar&quot;)</span><br><span class=\"line\">install.packages(&quot;psych&quot;)</span><br><span class=\"line\">install.packages(&quot;GPArotation&quot;)</span><br><span class=\"line\">install.packages(&quot;stringr&quot;)</span><br><span class=\"line\">install.packages(&quot;readxl&quot;)</span><br><span class=\"line\">install.packages(&quot;ca&quot;)</span><br><span class=\"line\">## 这个包可能也不正常</span><br><span class=\"line\">install.packages(&quot;arulesViz&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 这些包无法正常安装</span><br><span class=\"line\">install.packages(&quot;arules&quot;) </span><br><span class=\"line\">install.packages(&quot;lavaan&quot;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中医网络分析模块\"><a href=\"#中医网络分析模块\" class=\"headerlink\" title=\"中医网络分析模块\"></a>中医网络分析模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">biocLite(&apos;GO.db&apos;)</span><br><span class=\"line\">biocLite(&apos;org.Hs.eg.db&apos;)</span><br><span class=\"line\">biocLite(&apos;clusterProfiler&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">biocLite(&apos;WGCNA&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">intsall.packages(&apos;WGCNA&apos;)</span><br></pre></td></tr></table></figure>\n\n<p>2018-12-26<br>可以不阻塞当前运行的程序</p>\n<ul>\n<li>shiny 异步 编程 <a href=\"https://rstudio.github.io/promises/articles/intro.html\" target=\"_blank\" rel=\"noopener\">https://rstudio.github.io/promises/articles/intro.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"shiny-Server学习记录-网络计算\"><a href=\"#shiny-Server学习记录-网络计算\" class=\"headerlink\" title=\"shiny Server学习记录-网络计算\"></a>shiny Server学习记录-网络计算</h2><ul>\n<li><a href=\"http://218.94.144.229:8098/NetworkEntropy/\" target=\"_blank\" rel=\"noopener\">http://218.94.144.229:8098/NetworkEntropy/</a>  用户名 admin 密码 123qwe</li>\n<li>shiny api文档<a href=\"http://shiny.rstudio.com/reference/shiny/latest/\" target=\"_blank\" rel=\"noopener\">http://shiny.rstudio.com/reference/shiny/latest/</a></li>\n<li>shiny github <a href=\"https://github.com/rstudio/shiny\" target=\"_blank\" rel=\"noopener\">https://github.com/rstudio/shiny</a></li>\n<li>Shiny Server配置 <a href=\"https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440</a></li>\n<li>R shiny基础教程 <a href=\"https://blog.csdn.net/u014801157/article/category/5690387\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u014801157/article/category/5690387</a></li>\n<li>windows下无法正常安装某个类库时,Windows 下R软件如何安装GO.db程序包<a href=\"https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg</a></li>\n</ul>\n<ul>\n<li>内网是在浏览器下输入 http://:3838/APP_NAME/即可 </li>\n</ul>\n<p>一些重要的命令</p>\n<h3 id=\"先复制shiny包自带样例到目录下\"><a href=\"#先复制shiny包自带样例到目录下\" class=\"headerlink\" title=\"先复制shiny包自带样例到目录下\"></a>先复制shiny包自带样例到目录下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r /usr/lib64/R/library/shiny/examples/* /srv/shiny-server/</span><br></pre></td></tr></table></figure>\n\n<p>shiny server 服务设置状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看状态</span><br><span class=\"line\">sudo systemctl status shiny-server</span><br><span class=\"line\">#开启</span><br><span class=\"line\">sudo systemctl start shiny-server</span><br><span class=\"line\">#停止</span><br><span class=\"line\">sudo systemctl stop shiny-server</span><br><span class=\"line\">#重启</span><br><span class=\"line\">sudo systemctl restart shiny-server</span><br></pre></td></tr></table></figure>\n\n<p>1) 配置文件位置：/etc/shiny-server/shiny-server.conf<br>2) 报错时查看日志[服务器运行日志]<br>/var/log/shiny-server.log<br>3) shiny运行日志[类似R的运行日志]<br>/var/log/shiny-server</p>\n<p><strong>当无法安装某些包时可使用下面的代码进行安装</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source(&quot;http://bioconductor.org/biocLite.R&quot;)</span><br><span class=\"line\">biocLite(&quot;包名&quot;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>R 3.3.3  R语言执行需要安装的程序包</p>\n<p>以管理员权限运行Rgui,并指定包安装的位置，防止安装到其他目录</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.libPaths(<span class=\"string\">\"C:/Program Files/R/R-3.3.3/library\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install.packages(&apos;pillar&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">install.packages(&quot;ClustOfVar&quot;)</span><br><span class=\"line\">install.packages(&quot;psych&quot;)</span><br><span class=\"line\">install.packages(&quot;GPArotation&quot;)</span><br><span class=\"line\">install.packages(&quot;stringr&quot;)</span><br><span class=\"line\">install.packages(&quot;readxl&quot;)</span><br><span class=\"line\">install.packages(&quot;ca&quot;)</span><br><span class=\"line\">## 这个包可能也不正常</span><br><span class=\"line\">install.packages(&quot;arulesViz&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 这些包无法正常安装</span><br><span class=\"line\">install.packages(&quot;arules&quot;) </span><br><span class=\"line\">install.packages(&quot;lavaan&quot;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中医网络分析模块\"><a href=\"#中医网络分析模块\" class=\"headerlink\" title=\"中医网络分析模块\"></a>中医网络分析模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">biocLite(&apos;GO.db&apos;)</span><br><span class=\"line\">biocLite(&apos;org.Hs.eg.db&apos;)</span><br><span class=\"line\">biocLite(&apos;clusterProfiler&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">biocLite(&apos;WGCNA&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">intsall.packages(&apos;WGCNA&apos;)</span><br></pre></td></tr></table></figure>\n\n<p>2018-12-26<br>可以不阻塞当前运行的程序</p>\n<ul>\n<li>shiny 异步 编程 <a href=\"https://rstudio.github.io/promises/articles/intro.html\" target=\"_blank\" rel=\"noopener\">https://rstudio.github.io/promises/articles/intro.html</a></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"工作内容Rshiny框架使用","path":"2018/12/26/大后端/工作内容Rshiny框架使用/","eyeCatchImage":null,"excerpt":"R语言框架中的Rshiny Web框架，学习记录相关文档，命令行配置项，发布，异步编程。","date":"2018-12-25T16:56:03.000Z","pv":0,"totalPV":0,"categories":"大后端","tags":["Rshiny"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Visual Studio如何增加版权信息","date":"2019-06-11T16:56:03.000Z","description":"关于VS增加版权问题，及相关配置项，参考等。","_content":"\n## [Visual Studio如何增加版权信息](https://www.cnblogs.com/allenxt/p/8472979.html)\n\n> 怎么实现，上面链接里的文章应该已经很清楚了，记录一下本地的版权情况。\n\n+  我本地vs2017安装位置的如下：**E:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ItemTemplates\\CSharp\\Code\\2052\\Class**\n\n\t\t/*\n\t\t * CLR版本:          $clrversion$\n\t\t * 命名空间名称/文件名:    $rootnamespace$/$safeitemname$\n\t\t * 作    者：天上有木月\n\t\t * 创建时间：$time$\n\t\t * 邮箱：igeekfan@foxmail.com\n\t\t * 文件功能描述： \n\t\t * \n\t\t * 修改人： \n\t\t * 时间：\n\t\t * 修改说明：\n\t\t */\n\n参数 | 描述\n---|---\nclrversion|当前系统CLR版本号\nGUID [1-10]|生成全局唯一标识符,可以生成10个 (例如:guid1)\nitemname|打开添加新建项时输入的文件名称\nmachinename|当前机器的名称(如:pc1)\nregisteredorganization|注册的组织名\nrootnamespace|命名空间名\nsafeitemname|保存的文件名\ntime|当前系统时间,格式:DD/MM/YYYY 00:00:00.\nuserdomain|用户所在的域\nusername|当前系统用户名\nyear|当前系统时间 YYY","source":"_posts/大后端/Visual Studio如何增加版权信息.md","raw":"---\ntitle:  Visual Studio如何增加版权信息\ndate: 2019-06-12 00:56:03\ndescription: 关于VS增加版权问题，及相关配置项，参考等。\ntags:\n- .NET \n- Visual Studio\ncategory:\n- Visual Studio\n---\n\n## [Visual Studio如何增加版权信息](https://www.cnblogs.com/allenxt/p/8472979.html)\n\n> 怎么实现，上面链接里的文章应该已经很清楚了，记录一下本地的版权情况。\n\n+  我本地vs2017安装位置的如下：**E:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ItemTemplates\\CSharp\\Code\\2052\\Class**\n\n\t\t/*\n\t\t * CLR版本:          $clrversion$\n\t\t * 命名空间名称/文件名:    $rootnamespace$/$safeitemname$\n\t\t * 作    者：天上有木月\n\t\t * 创建时间：$time$\n\t\t * 邮箱：igeekfan@foxmail.com\n\t\t * 文件功能描述： \n\t\t * \n\t\t * 修改人： \n\t\t * 时间：\n\t\t * 修改说明：\n\t\t */\n\n参数 | 描述\n---|---\nclrversion|当前系统CLR版本号\nGUID [1-10]|生成全局唯一标识符,可以生成10个 (例如:guid1)\nitemname|打开添加新建项时输入的文件名称\nmachinename|当前机器的名称(如:pc1)\nregisteredorganization|注册的组织名\nrootnamespace|命名空间名\nsafeitemname|保存的文件名\ntime|当前系统时间,格式:DD/MM/YYYY 00:00:00.\nuserdomain|用户所在的域\nusername|当前系统用户名\nyear|当前系统时间 YYY","slug":"大后端/Visual Studio如何增加版权信息","published":1,"updated":"2019-06-25T14:47:07.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiu7001600uxrk777o9d","content":"<h2 id=\"Visual-Studio如何增加版权信息\"><a href=\"#Visual-Studio如何增加版权信息\" class=\"headerlink\" title=\"Visual Studio如何增加版权信息\"></a><a href=\"https://www.cnblogs.com/allenxt/p/8472979.html\" target=\"_blank\" rel=\"noopener\">Visual Studio如何增加版权信息</a></h2><blockquote>\n<p>怎么实现，上面链接里的文章应该已经很清楚了，记录一下本地的版权情况。</p>\n</blockquote>\n<ul>\n<li><p>我本地vs2017安装位置的如下：<strong>E:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ItemTemplates\\CSharp\\Code\\2052\\Class</strong></p>\n<pre><code>/*\n * CLR版本:          $clrversion$\n * 命名空间名称/文件名:    $rootnamespace$/$safeitemname$\n * 作    者：天上有木月\n * 创建时间：$time$\n * 邮箱：igeekfan@foxmail.com\n * 文件功能描述： \n * \n * 修改人： \n * 时间：\n * 修改说明：\n */</code></pre></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>clrversion</td>\n<td>当前系统CLR版本号</td>\n</tr>\n<tr>\n<td>GUID [1-10]</td>\n<td>生成全局唯一标识符,可以生成10个 (例如:guid1)</td>\n</tr>\n<tr>\n<td>itemname</td>\n<td>打开添加新建项时输入的文件名称</td>\n</tr>\n<tr>\n<td>machinename</td>\n<td>当前机器的名称(如:pc1)</td>\n</tr>\n<tr>\n<td>registeredorganization</td>\n<td>注册的组织名</td>\n</tr>\n<tr>\n<td>rootnamespace</td>\n<td>命名空间名</td>\n</tr>\n<tr>\n<td>safeitemname</td>\n<td>保存的文件名</td>\n</tr>\n<tr>\n<td>time</td>\n<td>当前系统时间,格式:DD/MM/YYYY 00:00:00.</td>\n</tr>\n<tr>\n<td>userdomain</td>\n<td>用户所在的域</td>\n</tr>\n<tr>\n<td>username</td>\n<td>当前系统用户名</td>\n</tr>\n<tr>\n<td>year</td>\n<td>当前系统时间 YYY</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Visual-Studio如何增加版权信息\"><a href=\"#Visual-Studio如何增加版权信息\" class=\"headerlink\" title=\"Visual Studio如何增加版权信息\"></a><a href=\"https://www.cnblogs.com/allenxt/p/8472979.html\" target=\"_blank\" rel=\"noopener\">Visual Studio如何增加版权信息</a></h2><blockquote>\n<p>怎么实现，上面链接里的文章应该已经很清楚了，记录一下本地的版权情况。</p>\n</blockquote>\n<ul>\n<li><p>我本地vs2017安装位置的如下：<strong>E:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ItemTemplates\\CSharp\\Code\\2052\\Class</strong></p>\n<pre><code>/*\n * CLR版本:          $clrversion$\n * 命名空间名称/文件名:    $rootnamespace$/$safeitemname$\n * 作    者：天上有木月\n * 创建时间：$time$\n * 邮箱：igeekfan@foxmail.com\n * 文件功能描述： \n * \n * 修改人： \n * 时间：\n * 修改说明：\n */</code></pre></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>clrversion</td>\n<td>当前系统CLR版本号</td>\n</tr>\n<tr>\n<td>GUID [1-10]</td>\n<td>生成全局唯一标识符,可以生成10个 (例如:guid1)</td>\n</tr>\n<tr>\n<td>itemname</td>\n<td>打开添加新建项时输入的文件名称</td>\n</tr>\n<tr>\n<td>machinename</td>\n<td>当前机器的名称(如:pc1)</td>\n</tr>\n<tr>\n<td>registeredorganization</td>\n<td>注册的组织名</td>\n</tr>\n<tr>\n<td>rootnamespace</td>\n<td>命名空间名</td>\n</tr>\n<tr>\n<td>safeitemname</td>\n<td>保存的文件名</td>\n</tr>\n<tr>\n<td>time</td>\n<td>当前系统时间,格式:DD/MM/YYYY 00:00:00.</td>\n</tr>\n<tr>\n<td>userdomain</td>\n<td>用户所在的域</td>\n</tr>\n<tr>\n<td>username</td>\n<td>当前系统用户名</td>\n</tr>\n<tr>\n<td>year</td>\n<td>当前系统时间 YYY</td>\n</tr>\n</tbody></table>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"Visual Studio如何增加版权信息","path":"2019/06/12/大后端/Visual Studio如何增加版权信息/","eyeCatchImage":null,"excerpt":"关于VS增加版权问题，及相关配置项，参考等。","date":"2019-06-11T16:56:03.000Z","pv":0,"totalPV":0,"categories":"Visual Studio","tags":[".NET","Visual Studio"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Node.js  功能点树形结构操作","date":"2017-01-10T06:10:47.000Z","_content":"\n> Node.js 下生成递归的树形结构\n\n如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索\n1. var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好.\n2. 在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。\n\n<!-- more -->\n\n```\nfunction treeNode(id, pid, text, children) {\n    this.id = id;\n    this.pid = pid;\n    this.text = text;\n    this.children = children;\n}\n\n//测试数据\nvar data = [\n { 'id': 1, 'pid': 0, 'text': '主节点' },\n { 'id': 2, 'pid': 1, 'text': '第二层,id2' }, \n { 'id': 3, 'pid': 1, 'text': '第二层,id3' }, \n { 'id': 4, 'pid': 3, 'text': '第三层,id4' }\n];\n\nfunction getDFSTree(data, pid) {\n    var treelist = [];\n    for (var i = 0; i < data.length; i++) {\n        if (data[i].pid == pid) {\n\t\t\tvar tree = new treeNode(data[i].id, \n\t\t\t\t\t\t\t\t\tdata[i].pid, \n\t\t\t\t\t\t\t\t\tdata[i].text, \n\t\t\t\t\t\t\t\t\tgetDFSTree(data, data[i].id));\n            treelist.push(tree)\n        }\n    }\n    return treelist;\n}\n//exports.getDFSTree= getDFSTree;\n//调用 \nvar tree = getDFSTree(data, 0);\nconsole.log(tree[0].children)\n```\n\n> 递归删除子节点\n\n如何删除树形结构的数据时，我们如何删除节点和他的子节点呢。此demo，不太友好。说下思路。现在让我实现这样的功能，就是另一个思路。在这里说二个方法\n1. 得到所有节点数据，然后，在内存在找到所有的子节点，将其push到一个数组中，然后删除时使用 where id in(1,2,3,4)  \n2. 第二种，直接写一个sql,得到所有子节点，然后删除。\n\n#### 第一种实现-递归\n具体实现：在内存中找到节点的所有子节点，其中results为数据中所有的节点数据。IsActive为是否启用，这边并不太大作用，仅是数据库用到的软删除。\n\n数据格式为 \n```\n[\n\t{'FunctionID':1,'ParentID ':0,'IsActive':1},\n\t{'FunctionID':2,'ParentID ':1,'IsActive':1},\n\t{'FunctionID':3,'ParentID ':1,'IsActive':1},\n\t{'FunctionID':4,'ParentID ':2,'IsActive':1},\n\t{'FunctionID':5,'ParentID ':2,'IsActive':1},\n\t{'FunctionID':6,'ParentID ':3,'IsActive':1}\n]\n```\n递归代码实现\n```\nvar treeFuncID = [];\ntreeFuncID.push({\n     'FunctionID': data.FunctionID\n });\n\n //得到子节点的所有functionid\n  function getMultiTreeID(FunctionID) {\n      var querydata = {\n          'ParentID': FunctionID,\n          'IsActive': 1\n      }\n      var data = [];\n    \n      for (var j in results) {\n          if (results[j].ParentID == FunctionID) {\n              data.push({ 'FunctionID': results[j].FunctionID });\n          }\n      }\n      if (data != undefined && data.length > 0) {\n          for (var i in data) {\n              getMultiTreeID(data[i].FunctionID);\n              treeFuncID.push({\n                  'FunctionID': data[i].FunctionID\n              });\n\n          }\n      }\n  }//DFS查找功能点数据，将其push到treeFunctID数组中\n  getMultiTreeID(data.FunctionID);//同步\n        \n```\n\n#### 第二种实现-MsSQL版本\nSummaries  为表名 IsDeleted为软删除字段\t\n\n```\n//可以根据父节点得到所有子节点数据\nstring sql = @\"\n         WITH TEMP AS \n         (\n         SELECT Id,Name,PId\n                 FROM \n                 HbAssess.dbo.Summaries  \n                 WHERE \n                 PId = @pId AND IsDeleted='false'\n             UNION ALL \n                 SELECT a.Id,a.Name,a.PId\n                 FROM \n TEMP  JOIN HbAssess.dbo.Summaries a ON TEMP.Id= a.PId AND a.IsDeleted='false'\n         )  \n         SELECT Id,Name as 'Text',PId as ParentId FROM TEMP \";\n\n```\n\n#### 第二种实现-MySQL 5.6+\nre_menu为表名\n```\nselect id from (\n              select t1.id,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select id,parentId from re_menu t where t.status = 1 order by parentId, id\n                  ) t1,\n                  (select @pids := 要查询的菜单节点 id) t2\n             ) t3 where ischild != 0\n\n```","source":"_posts/大后端/Node.js  功能点树形结构操作.md","raw":"---\ntitle: Node.js  功能点树形结构操作\ndate: 2017-01-10 14:10:47\ntags:\n- Node.js\ncategory: \n- 大后端\n---\n\n> Node.js 下生成递归的树形结构\n\n如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索\n1. var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好.\n2. 在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。\n\n<!-- more -->\n\n```\nfunction treeNode(id, pid, text, children) {\n    this.id = id;\n    this.pid = pid;\n    this.text = text;\n    this.children = children;\n}\n\n//测试数据\nvar data = [\n { 'id': 1, 'pid': 0, 'text': '主节点' },\n { 'id': 2, 'pid': 1, 'text': '第二层,id2' }, \n { 'id': 3, 'pid': 1, 'text': '第二层,id3' }, \n { 'id': 4, 'pid': 3, 'text': '第三层,id4' }\n];\n\nfunction getDFSTree(data, pid) {\n    var treelist = [];\n    for (var i = 0; i < data.length; i++) {\n        if (data[i].pid == pid) {\n\t\t\tvar tree = new treeNode(data[i].id, \n\t\t\t\t\t\t\t\t\tdata[i].pid, \n\t\t\t\t\t\t\t\t\tdata[i].text, \n\t\t\t\t\t\t\t\t\tgetDFSTree(data, data[i].id));\n            treelist.push(tree)\n        }\n    }\n    return treelist;\n}\n//exports.getDFSTree= getDFSTree;\n//调用 \nvar tree = getDFSTree(data, 0);\nconsole.log(tree[0].children)\n```\n\n> 递归删除子节点\n\n如何删除树形结构的数据时，我们如何删除节点和他的子节点呢。此demo，不太友好。说下思路。现在让我实现这样的功能，就是另一个思路。在这里说二个方法\n1. 得到所有节点数据，然后，在内存在找到所有的子节点，将其push到一个数组中，然后删除时使用 where id in(1,2,3,4)  \n2. 第二种，直接写一个sql,得到所有子节点，然后删除。\n\n#### 第一种实现-递归\n具体实现：在内存中找到节点的所有子节点，其中results为数据中所有的节点数据。IsActive为是否启用，这边并不太大作用，仅是数据库用到的软删除。\n\n数据格式为 \n```\n[\n\t{'FunctionID':1,'ParentID ':0,'IsActive':1},\n\t{'FunctionID':2,'ParentID ':1,'IsActive':1},\n\t{'FunctionID':3,'ParentID ':1,'IsActive':1},\n\t{'FunctionID':4,'ParentID ':2,'IsActive':1},\n\t{'FunctionID':5,'ParentID ':2,'IsActive':1},\n\t{'FunctionID':6,'ParentID ':3,'IsActive':1}\n]\n```\n递归代码实现\n```\nvar treeFuncID = [];\ntreeFuncID.push({\n     'FunctionID': data.FunctionID\n });\n\n //得到子节点的所有functionid\n  function getMultiTreeID(FunctionID) {\n      var querydata = {\n          'ParentID': FunctionID,\n          'IsActive': 1\n      }\n      var data = [];\n    \n      for (var j in results) {\n          if (results[j].ParentID == FunctionID) {\n              data.push({ 'FunctionID': results[j].FunctionID });\n          }\n      }\n      if (data != undefined && data.length > 0) {\n          for (var i in data) {\n              getMultiTreeID(data[i].FunctionID);\n              treeFuncID.push({\n                  'FunctionID': data[i].FunctionID\n              });\n\n          }\n      }\n  }//DFS查找功能点数据，将其push到treeFunctID数组中\n  getMultiTreeID(data.FunctionID);//同步\n        \n```\n\n#### 第二种实现-MsSQL版本\nSummaries  为表名 IsDeleted为软删除字段\t\n\n```\n//可以根据父节点得到所有子节点数据\nstring sql = @\"\n         WITH TEMP AS \n         (\n         SELECT Id,Name,PId\n                 FROM \n                 HbAssess.dbo.Summaries  \n                 WHERE \n                 PId = @pId AND IsDeleted='false'\n             UNION ALL \n                 SELECT a.Id,a.Name,a.PId\n                 FROM \n TEMP  JOIN HbAssess.dbo.Summaries a ON TEMP.Id= a.PId AND a.IsDeleted='false'\n         )  \n         SELECT Id,Name as 'Text',PId as ParentId FROM TEMP \";\n\n```\n\n#### 第二种实现-MySQL 5.6+\nre_menu为表名\n```\nselect id from (\n              select t1.id,\n              if(find_in_set(parentId, @pids) > 0, @pids := concat(@pids, ',', id), 0) as ischild\n              from (\n                   select id,parentId from re_menu t where t.status = 1 order by parentId, id\n                  ) t1,\n                  (select @pids := 要查询的菜单节点 id) t2\n             ) t3 where ischild != 0\n\n```","slug":"大后端/Node.js  功能点树形结构操作","published":1,"updated":"2019-06-25T14:47:07.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiu8001a00ux2yqsoy1r","content":"<blockquote>\n<p>Node.js 下生成递归的树形结构</p>\n</blockquote>\n<p>如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索</p>\n<ol>\n<li>var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好.</li>\n<li>在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。</li>\n</ol>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function treeNode(id, pid, text, children) &#123;</span><br><span class=\"line\">    this.id = id;</span><br><span class=\"line\">    this.pid = pid;</span><br><span class=\"line\">    this.text = text;</span><br><span class=\"line\">    this.children = children;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//测试数据</span><br><span class=\"line\">var data = [</span><br><span class=\"line\"> &#123; &apos;id&apos;: 1, &apos;pid&apos;: 0, &apos;text&apos;: &apos;主节点&apos; &#125;,</span><br><span class=\"line\"> &#123; &apos;id&apos;: 2, &apos;pid&apos;: 1, &apos;text&apos;: &apos;第二层,id2&apos; &#125;, </span><br><span class=\"line\"> &#123; &apos;id&apos;: 3, &apos;pid&apos;: 1, &apos;text&apos;: &apos;第二层,id3&apos; &#125;, </span><br><span class=\"line\"> &#123; &apos;id&apos;: 4, &apos;pid&apos;: 3, &apos;text&apos;: &apos;第三层,id4&apos; &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">function getDFSTree(data, pid) &#123;</span><br><span class=\"line\">    var treelist = [];</span><br><span class=\"line\">    for (var i = 0; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">        if (data[i].pid == pid) &#123;</span><br><span class=\"line\">\t\t\tvar tree = new treeNode(data[i].id, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tdata[i].pid, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tdata[i].text, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tgetDFSTree(data, data[i].id));</span><br><span class=\"line\">            treelist.push(tree)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return treelist;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//exports.getDFSTree= getDFSTree;</span><br><span class=\"line\">//调用 </span><br><span class=\"line\">var tree = getDFSTree(data, 0);</span><br><span class=\"line\">console.log(tree[0].children)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>递归删除子节点</p>\n</blockquote>\n<p>如何删除树形结构的数据时，我们如何删除节点和他的子节点呢。此demo，不太友好。说下思路。现在让我实现这样的功能，就是另一个思路。在这里说二个方法</p>\n<ol>\n<li>得到所有节点数据，然后，在内存在找到所有的子节点，将其push到一个数组中，然后删除时使用 where id in(1,2,3,4)  </li>\n<li>第二种，直接写一个sql,得到所有子节点，然后删除。</li>\n</ol>\n<h4 id=\"第一种实现-递归\"><a href=\"#第一种实现-递归\" class=\"headerlink\" title=\"第一种实现-递归\"></a>第一种实现-递归</h4><p>具体实现：在内存中找到节点的所有子节点，其中results为数据中所有的节点数据。IsActive为是否启用，这边并不太大作用，仅是数据库用到的软删除。</p>\n<p>数据格式为 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:1,&apos;ParentID &apos;:0,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:2,&apos;ParentID &apos;:1,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:3,&apos;ParentID &apos;:1,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:4,&apos;ParentID &apos;:2,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:5,&apos;ParentID &apos;:2,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:6,&apos;ParentID &apos;:3,&apos;IsActive&apos;:1&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>递归代码实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var treeFuncID = [];</span><br><span class=\"line\">treeFuncID.push(&#123;</span><br><span class=\"line\">     &apos;FunctionID&apos;: data.FunctionID</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> //得到子节点的所有functionid</span><br><span class=\"line\">  function getMultiTreeID(FunctionID) &#123;</span><br><span class=\"line\">      var querydata = &#123;</span><br><span class=\"line\">          &apos;ParentID&apos;: FunctionID,</span><br><span class=\"line\">          &apos;IsActive&apos;: 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      var data = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">      for (var j in results) &#123;</span><br><span class=\"line\">          if (results[j].ParentID == FunctionID) &#123;</span><br><span class=\"line\">              data.push(&#123; &apos;FunctionID&apos;: results[j].FunctionID &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (data != undefined &amp;&amp; data.length &gt; 0) &#123;</span><br><span class=\"line\">          for (var i in data) &#123;</span><br><span class=\"line\">              getMultiTreeID(data[i].FunctionID);</span><br><span class=\"line\">              treeFuncID.push(&#123;</span><br><span class=\"line\">                  &apos;FunctionID&apos;: data[i].FunctionID</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;//DFS查找功能点数据，将其push到treeFunctID数组中</span><br><span class=\"line\">  getMultiTreeID(data.FunctionID);//同步</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种实现-MsSQL版本\"><a href=\"#第二种实现-MsSQL版本\" class=\"headerlink\" title=\"第二种实现-MsSQL版本\"></a>第二种实现-MsSQL版本</h4><p>Summaries  为表名 IsDeleted为软删除字段    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可以根据父节点得到所有子节点数据</span><br><span class=\"line\">string sql = @&quot;</span><br><span class=\"line\">         WITH TEMP AS </span><br><span class=\"line\">         (</span><br><span class=\"line\">         SELECT Id,Name,PId</span><br><span class=\"line\">                 FROM </span><br><span class=\"line\">                 HbAssess.dbo.Summaries  </span><br><span class=\"line\">                 WHERE </span><br><span class=\"line\">                 PId = @pId AND IsDeleted=&apos;false&apos;</span><br><span class=\"line\">             UNION ALL </span><br><span class=\"line\">                 SELECT a.Id,a.Name,a.PId</span><br><span class=\"line\">                 FROM </span><br><span class=\"line\"> TEMP  JOIN HbAssess.dbo.Summaries a ON TEMP.Id= a.PId AND a.IsDeleted=&apos;false&apos;</span><br><span class=\"line\">         )  </span><br><span class=\"line\">         SELECT Id,Name as &apos;Text&apos;,PId as ParentId FROM TEMP &quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种实现-MySQL-5-6\"><a href=\"#第二种实现-MySQL-5-6\" class=\"headerlink\" title=\"第二种实现-MySQL 5.6+\"></a>第二种实现-MySQL 5.6+</h4><p>re_menu为表名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from (</span><br><span class=\"line\">              select t1.id,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select id,parentId from re_menu t where t.status = 1 order by parentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids := 要查询的菜单节点 id) t2</span><br><span class=\"line\">             ) t3 where ischild != 0</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>Node.js 下生成递归的树形结构</p>\n</blockquote>\n<p>如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索</p>\n<ol>\n<li>var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好.</li>\n<li>在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。</li>\n</ol>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function treeNode(id, pid, text, children) &#123;</span><br><span class=\"line\">    this.id = id;</span><br><span class=\"line\">    this.pid = pid;</span><br><span class=\"line\">    this.text = text;</span><br><span class=\"line\">    this.children = children;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//测试数据</span><br><span class=\"line\">var data = [</span><br><span class=\"line\"> &#123; &apos;id&apos;: 1, &apos;pid&apos;: 0, &apos;text&apos;: &apos;主节点&apos; &#125;,</span><br><span class=\"line\"> &#123; &apos;id&apos;: 2, &apos;pid&apos;: 1, &apos;text&apos;: &apos;第二层,id2&apos; &#125;, </span><br><span class=\"line\"> &#123; &apos;id&apos;: 3, &apos;pid&apos;: 1, &apos;text&apos;: &apos;第二层,id3&apos; &#125;, </span><br><span class=\"line\"> &#123; &apos;id&apos;: 4, &apos;pid&apos;: 3, &apos;text&apos;: &apos;第三层,id4&apos; &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">function getDFSTree(data, pid) &#123;</span><br><span class=\"line\">    var treelist = [];</span><br><span class=\"line\">    for (var i = 0; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">        if (data[i].pid == pid) &#123;</span><br><span class=\"line\">\t\t\tvar tree = new treeNode(data[i].id, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tdata[i].pid, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tdata[i].text, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tgetDFSTree(data, data[i].id));</span><br><span class=\"line\">            treelist.push(tree)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return treelist;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//exports.getDFSTree= getDFSTree;</span><br><span class=\"line\">//调用 </span><br><span class=\"line\">var tree = getDFSTree(data, 0);</span><br><span class=\"line\">console.log(tree[0].children)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>递归删除子节点</p>\n</blockquote>\n<p>如何删除树形结构的数据时，我们如何删除节点和他的子节点呢。此demo，不太友好。说下思路。现在让我实现这样的功能，就是另一个思路。在这里说二个方法</p>\n<ol>\n<li>得到所有节点数据，然后，在内存在找到所有的子节点，将其push到一个数组中，然后删除时使用 where id in(1,2,3,4)  </li>\n<li>第二种，直接写一个sql,得到所有子节点，然后删除。</li>\n</ol>\n<h4 id=\"第一种实现-递归\"><a href=\"#第一种实现-递归\" class=\"headerlink\" title=\"第一种实现-递归\"></a>第一种实现-递归</h4><p>具体实现：在内存中找到节点的所有子节点，其中results为数据中所有的节点数据。IsActive为是否启用，这边并不太大作用，仅是数据库用到的软删除。</p>\n<p>数据格式为 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:1,&apos;ParentID &apos;:0,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:2,&apos;ParentID &apos;:1,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:3,&apos;ParentID &apos;:1,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:4,&apos;ParentID &apos;:2,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:5,&apos;ParentID &apos;:2,&apos;IsActive&apos;:1&#125;,</span><br><span class=\"line\">\t&#123;&apos;FunctionID&apos;:6,&apos;ParentID &apos;:3,&apos;IsActive&apos;:1&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>递归代码实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var treeFuncID = [];</span><br><span class=\"line\">treeFuncID.push(&#123;</span><br><span class=\"line\">     &apos;FunctionID&apos;: data.FunctionID</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> //得到子节点的所有functionid</span><br><span class=\"line\">  function getMultiTreeID(FunctionID) &#123;</span><br><span class=\"line\">      var querydata = &#123;</span><br><span class=\"line\">          &apos;ParentID&apos;: FunctionID,</span><br><span class=\"line\">          &apos;IsActive&apos;: 1</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      var data = [];</span><br><span class=\"line\">    </span><br><span class=\"line\">      for (var j in results) &#123;</span><br><span class=\"line\">          if (results[j].ParentID == FunctionID) &#123;</span><br><span class=\"line\">              data.push(&#123; &apos;FunctionID&apos;: results[j].FunctionID &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (data != undefined &amp;&amp; data.length &gt; 0) &#123;</span><br><span class=\"line\">          for (var i in data) &#123;</span><br><span class=\"line\">              getMultiTreeID(data[i].FunctionID);</span><br><span class=\"line\">              treeFuncID.push(&#123;</span><br><span class=\"line\">                  &apos;FunctionID&apos;: data[i].FunctionID</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;//DFS查找功能点数据，将其push到treeFunctID数组中</span><br><span class=\"line\">  getMultiTreeID(data.FunctionID);//同步</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种实现-MsSQL版本\"><a href=\"#第二种实现-MsSQL版本\" class=\"headerlink\" title=\"第二种实现-MsSQL版本\"></a>第二种实现-MsSQL版本</h4><p>Summaries  为表名 IsDeleted为软删除字段    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可以根据父节点得到所有子节点数据</span><br><span class=\"line\">string sql = @&quot;</span><br><span class=\"line\">         WITH TEMP AS </span><br><span class=\"line\">         (</span><br><span class=\"line\">         SELECT Id,Name,PId</span><br><span class=\"line\">                 FROM </span><br><span class=\"line\">                 HbAssess.dbo.Summaries  </span><br><span class=\"line\">                 WHERE </span><br><span class=\"line\">                 PId = @pId AND IsDeleted=&apos;false&apos;</span><br><span class=\"line\">             UNION ALL </span><br><span class=\"line\">                 SELECT a.Id,a.Name,a.PId</span><br><span class=\"line\">                 FROM </span><br><span class=\"line\"> TEMP  JOIN HbAssess.dbo.Summaries a ON TEMP.Id= a.PId AND a.IsDeleted=&apos;false&apos;</span><br><span class=\"line\">         )  </span><br><span class=\"line\">         SELECT Id,Name as &apos;Text&apos;,PId as ParentId FROM TEMP &quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种实现-MySQL-5-6\"><a href=\"#第二种实现-MySQL-5-6\" class=\"headerlink\" title=\"第二种实现-MySQL 5.6+\"></a>第二种实现-MySQL 5.6+</h4><p>re_menu为表名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id from (</span><br><span class=\"line\">              select t1.id,</span><br><span class=\"line\">              if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild</span><br><span class=\"line\">              from (</span><br><span class=\"line\">                   select id,parentId from re_menu t where t.status = 1 order by parentId, id</span><br><span class=\"line\">                  ) t1,</span><br><span class=\"line\">                  (select @pids := 要查询的菜单节点 id) t2</span><br><span class=\"line\">             ) t3 where ischild != 0</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"Node.js  功能点树形结构操作","path":"2017/01/10/大后端/Node.js  功能点树形结构操作/","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>Node.js 下生成递归的树形结构</p>\n</blockquote>\n<p>如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索</p>\n<ol>\n<li>var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好.</li>\n<li>在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。</li>\n</ol>","date":"2017-01-10T06:10:47.000Z","pv":0,"totalPV":0,"categories":"大后端","tags":["Node.js"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"2. 重新出发-learn webpack","date":"2019-06-24T14:43:22.000Z","updated":"2019-07-01T14:22:22.000Z","top":"近期更新","_content":"\n## 重新出发-learn webpack\n\ngithub 上搜索 webpack learn或webpack awesome\n\n- [基于 Webpack4 渐进式教程 为基础](https://github.com/ITxiaohao/webpack4-learn)\n这个非常适合初学者，24个demo，渐进式文档学习，\n- [https://github.com/webpack-china/awesome-webpack-cn](https://github.com/webpack-china/awesome-webpack-cn)\n\n<!-- more -->","source":"_posts/重新出发/2. 重新出发-learn webpack.md","raw":"---\ntitle: 2. 重新出发-learn webpack\ndate: 2019-6-24 22:43:22\nupdated: 2019-7-1 22:22:22\ntop: 近期更新\ntags:\n- webpack\ncategory:\n- 重新出发\n---\n\n## 重新出发-learn webpack\n\ngithub 上搜索 webpack learn或webpack awesome\n\n- [基于 Webpack4 渐进式教程 为基础](https://github.com/ITxiaohao/webpack4-learn)\n这个非常适合初学者，24个demo，渐进式文档学习，\n- [https://github.com/webpack-china/awesome-webpack-cn](https://github.com/webpack-china/awesome-webpack-cn)\n\n<!-- more -->","slug":"重新出发/2. 重新出发-learn webpack","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiu9001c00uxsw06v370","content":"<h2 id=\"重新出发-learn-webpack\"><a href=\"#重新出发-learn-webpack\" class=\"headerlink\" title=\"重新出发-learn webpack\"></a>重新出发-learn webpack</h2><p>github 上搜索 webpack learn或webpack awesome</p>\n<ul>\n<li><a href=\"https://github.com/ITxiaohao/webpack4-learn\" target=\"_blank\" rel=\"noopener\">基于 Webpack4 渐进式教程 为基础</a><br>这个非常适合初学者，24个demo，渐进式文档学习，</li>\n<li><a href=\"https://github.com/webpack-china/awesome-webpack-cn\" target=\"_blank\" rel=\"noopener\">https://github.com/webpack-china/awesome-webpack-cn</a></li>\n</ul>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h2 id=\"重新出发-learn-webpack\"><a href=\"#重新出发-learn-webpack\" class=\"headerlink\" title=\"重新出发-learn webpack\"></a>重新出发-learn webpack</h2><p>github 上搜索 webpack learn或webpack awesome</p>\n<ul>\n<li><a href=\"https://github.com/ITxiaohao/webpack4-learn\" target=\"_blank\" rel=\"noopener\">基于 Webpack4 渐进式教程 为基础</a><br>这个非常适合初学者，24个demo，渐进式文档学习，</li>\n<li><a href=\"https://github.com/webpack-china/awesome-webpack-cn\" target=\"_blank\" rel=\"noopener\">https://github.com/webpack-china/awesome-webpack-cn</a></li>\n</ul>","more":"","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Jul 01 2019 22:22:22 GMT+0800 (GMT+08:00)","title":"2. 重新出发-learn webpack","path":"2019/06/24/重新出发/2. 重新出发-learn webpack/","eyeCatchImage":null,"excerpt":"<h2 id=\"重新出发-learn-webpack\"><a href=\"#重新出发-learn-webpack\" class=\"headerlink\" title=\"重新出发-learn webpack\"></a>重新出发-learn webpack</h2><p>github 上搜索 webpack learn或webpack awesome</p>\n<ul>\n<li><a href=\"https://github.com/ITxiaohao/webpack4-learn\" target=\"_blank\" rel=\"noopener\">基于 Webpack4 渐进式教程 为基础</a><br>这个非常适合初学者，24个demo，渐进式文档学习，</li>\n<li><a href=\"https://github.com/webpack-china/awesome-webpack-cn\" target=\"_blank\" rel=\"noopener\">https://github.com/webpack-china/awesome-webpack-cn</a></li>\n</ul>","date":"2019-06-24T14:43:22.000Z","pv":0,"totalPV":0,"categories":"重新出发","tags":["webpack"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"1.重新出发-起航","date":"2019-06-17T07:19:22.000Z","author":"IGeekFan","description":"每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。","cover":true,"_content":"\n## 重新出发\n还有几天大学就毕业了(21号毕业典礼)，我在大学期间，在学校跟着老师一起做了一些项目，用到的技术是 easyui+ **.net** framework4.x+sql server 2008+ef 5+vs2012，框架是旧三层架构，没有批量操作和事务，编辑操作时，也极易出错。\n\n后来升级架构，用了一段时间layui+vue.js（非单页面）+abp (.net frameowork)+mysql 5.7+ef 6+vs2017，后来由于人少，还是换成了easyui 1.51 insdep  版本\n\n我自己也了解到了一些新的技术,如vue.js的SPA,跨平台的 **.net core**，容器化的docker,负载均衡的nginx，只是帮别人做的一些小项目，用到了vue和 **.NET Core**，其他的就没有实际上线的经验，每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。\n\n\n目前用到的一些技术栈、架构风格、开发工具如下\n\nvue.js(SPA)+**.netNET Core**2.2(JWT+EF Core)+Mysql 5.6+ docker+nginx+Ubuntu+vs2019（vscode)\n\n## .NET Core 可学习的框架，社区等\n0. awesome-dotnet 关于 **.NET Core** 的优秀项目应该都能在这找到 [https://github.com/quozd/awesome-dotnet/](https://github.com/quozd/awesome-dotnet/)\n1. abp vnext ，可参考[https://cn.abp.io/documents/abp/latest/Index](https://cn.abp.io/documents/abp/latest/Index)，我觉得它的特点是：分层更细，但复杂度更大，不过有着完善的文档与社区，架构风格统一，对于每个模块都有着相应的风格指导，另外如官网所说，他的“主要目标是提供一个便捷的基础设施来创建微服务解决方案”（目前还处于0.18待Release版本，2019-6-17）\n2. surging 专注与 **.net core**下的微服务引擎的解决方案，（1.0于19年初发布，以我的水平，没有良好的入门文档，我还需要继续学习才能使用。）\n3. .NET Core Community  国内的开源组织，有着优秀的基于.net core 的开源项目，大家可以去学习学习\n[https://github.com/dotnetcore](https://github.com/dotnetcore)\n4. csredis对标的是stackExchange.Redis，大家都说stackExchange.redis有的时候会超时（Timeout Bug），好像一直没有解决(项目全部使用异常可解决)，[https://github.com/2881099/csredis](https://github.com/2881099/csredis)\n5. FreeSql是 **.net 、.net core**的最方便的 ORM,     [https://github.com/2881099/FreeSql](https://github.com/2881099/FreeSql)（我还没用，但做这个项目的大佬一直推荐，我相信一定不错）也是做csredis的作者\n6. \n\n## 小技巧：\n1. 如果你想找什么资料，去github搜索可以使用\n\n ```awesome``` 关键字、\n ```learn``` +关键字\n\n在https://github.com中 搜索，都能搜索到 最全的教程\n~~~\nawesome vue\nlearn git\nawesome dotnet\n~~~\n\n\n## 技术学习\n\n1.前端相应的知识点\n- es6\n- webpack\n- vue.js\n- vuex\n- vue-router\n- typescript\n- \n\n\n\n2. 后端技术栈\n- nginx\n- linux 如：Ubuntu\n- docker\n- c# 如: .net core 、asp **.net core**\n- java 如: spring boot\n\n3. 开发相关\n- 搭建个人博客 [hexo](https://hexo.io/zh-cn)+[Material X](https://github.com/xaoxuu/hexo-theme-material-x) \n-\n\n","source":"_posts/重新出发/1.重新出发-起航.md","raw":"---\ntitle: 1.重新出发-起航\ndate: 2019-6-17 15:19:22\nauthor: IGeekFan\ndescription: 每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。\ncover: true\ntags:\n- .NET Core\ncategory:\n- 重新出发\n---\n\n## 重新出发\n还有几天大学就毕业了(21号毕业典礼)，我在大学期间，在学校跟着老师一起做了一些项目，用到的技术是 easyui+ **.net** framework4.x+sql server 2008+ef 5+vs2012，框架是旧三层架构，没有批量操作和事务，编辑操作时，也极易出错。\n\n后来升级架构，用了一段时间layui+vue.js（非单页面）+abp (.net frameowork)+mysql 5.7+ef 6+vs2017，后来由于人少，还是换成了easyui 1.51 insdep  版本\n\n我自己也了解到了一些新的技术,如vue.js的SPA,跨平台的 **.net core**，容器化的docker,负载均衡的nginx，只是帮别人做的一些小项目，用到了vue和 **.NET Core**，其他的就没有实际上线的经验，每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。\n\n\n目前用到的一些技术栈、架构风格、开发工具如下\n\nvue.js(SPA)+**.netNET Core**2.2(JWT+EF Core)+Mysql 5.6+ docker+nginx+Ubuntu+vs2019（vscode)\n\n## .NET Core 可学习的框架，社区等\n0. awesome-dotnet 关于 **.NET Core** 的优秀项目应该都能在这找到 [https://github.com/quozd/awesome-dotnet/](https://github.com/quozd/awesome-dotnet/)\n1. abp vnext ，可参考[https://cn.abp.io/documents/abp/latest/Index](https://cn.abp.io/documents/abp/latest/Index)，我觉得它的特点是：分层更细，但复杂度更大，不过有着完善的文档与社区，架构风格统一，对于每个模块都有着相应的风格指导，另外如官网所说，他的“主要目标是提供一个便捷的基础设施来创建微服务解决方案”（目前还处于0.18待Release版本，2019-6-17）\n2. surging 专注与 **.net core**下的微服务引擎的解决方案，（1.0于19年初发布，以我的水平，没有良好的入门文档，我还需要继续学习才能使用。）\n3. .NET Core Community  国内的开源组织，有着优秀的基于.net core 的开源项目，大家可以去学习学习\n[https://github.com/dotnetcore](https://github.com/dotnetcore)\n4. csredis对标的是stackExchange.Redis，大家都说stackExchange.redis有的时候会超时（Timeout Bug），好像一直没有解决(项目全部使用异常可解决)，[https://github.com/2881099/csredis](https://github.com/2881099/csredis)\n5. FreeSql是 **.net 、.net core**的最方便的 ORM,     [https://github.com/2881099/FreeSql](https://github.com/2881099/FreeSql)（我还没用，但做这个项目的大佬一直推荐，我相信一定不错）也是做csredis的作者\n6. \n\n## 小技巧：\n1. 如果你想找什么资料，去github搜索可以使用\n\n ```awesome``` 关键字、\n ```learn``` +关键字\n\n在https://github.com中 搜索，都能搜索到 最全的教程\n~~~\nawesome vue\nlearn git\nawesome dotnet\n~~~\n\n\n## 技术学习\n\n1.前端相应的知识点\n- es6\n- webpack\n- vue.js\n- vuex\n- vue-router\n- typescript\n- \n\n\n\n2. 后端技术栈\n- nginx\n- linux 如：Ubuntu\n- docker\n- c# 如: .net core 、asp **.net core**\n- java 如: spring boot\n\n3. 开发相关\n- 搭建个人博客 [hexo](https://hexo.io/zh-cn)+[Material X](https://github.com/xaoxuu/hexo-theme-material-x) \n-\n\n","slug":"重新出发/1.重新出发-起航","published":1,"updated":"2019-06-29T05:28:58.619Z","_id":"cjxcrmiub001g00ux8qdclfy9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"重新出发\"><a href=\"#重新出发\" class=\"headerlink\" title=\"重新出发\"></a>重新出发</h2><p>还有几天大学就毕业了(21号毕业典礼)，我在大学期间，在学校跟着老师一起做了一些项目，用到的技术是 easyui+ <strong>.net</strong> framework4.x+sql server 2008+ef 5+vs2012，框架是旧三层架构，没有批量操作和事务，编辑操作时，也极易出错。</p>\n<p>后来升级架构，用了一段时间layui+vue.js（非单页面）+abp (.net frameowork)+mysql 5.7+ef 6+vs2017，后来由于人少，还是换成了easyui 1.51 insdep  版本</p>\n<p>我自己也了解到了一些新的技术,如vue.js的SPA,跨平台的 <strong>.net core</strong>，容器化的docker,负载均衡的nginx，只是帮别人做的一些小项目，用到了vue和 <strong>.NET Core</strong>，其他的就没有实际上线的经验，每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。</p>\n<p>目前用到的一些技术栈、架构风格、开发工具如下</p>\n<p>vue.js(SPA)+<strong>.netNET Core</strong>2.2(JWT+EF Core)+Mysql 5.6+ docker+nginx+Ubuntu+vs2019（vscode)</p>\n<h2 id=\"NET-Core-可学习的框架，社区等\"><a href=\"#NET-Core-可学习的框架，社区等\" class=\"headerlink\" title=\".NET Core 可学习的框架，社区等\"></a>.NET Core 可学习的框架，社区等</h2><ol start=\"0\">\n<li>awesome-dotnet 关于 <strong>.NET Core</strong> 的优秀项目应该都能在这找到 <a href=\"https://github.com/quozd/awesome-dotnet/\" target=\"_blank\" rel=\"noopener\">https://github.com/quozd/awesome-dotnet/</a></li>\n<li>abp vnext ，可参考<a href=\"https://cn.abp.io/documents/abp/latest/Index\" target=\"_blank\" rel=\"noopener\">https://cn.abp.io/documents/abp/latest/Index</a>，我觉得它的特点是：分层更细，但复杂度更大，不过有着完善的文档与社区，架构风格统一，对于每个模块都有着相应的风格指导，另外如官网所说，他的“主要目标是提供一个便捷的基础设施来创建微服务解决方案”（目前还处于0.18待Release版本，2019-6-17）</li>\n<li>surging 专注与 <strong>.net core</strong>下的微服务引擎的解决方案，（1.0于19年初发布，以我的水平，没有良好的入门文档，我还需要继续学习才能使用。）</li>\n<li>.NET Core Community  国内的开源组织，有着优秀的基于.net core 的开源项目，大家可以去学习学习<br><a href=\"https://github.com/dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/dotnetcore</a></li>\n<li>csredis对标的是stackExchange.Redis，大家都说stackExchange.redis有的时候会超时（Timeout Bug），好像一直没有解决(项目全部使用异常可解决)，<a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/csredis</a></li>\n<li>FreeSql是 <strong>.net 、.net core</strong>的最方便的 ORM,     <a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/FreeSql</a>（我还没用，但做这个项目的大佬一直推荐，我相信一定不错）也是做csredis的作者</li>\n<li></li>\n</ol>\n<h2 id=\"小技巧：\"><a href=\"#小技巧：\" class=\"headerlink\" title=\"小技巧：\"></a>小技巧：</h2><ol>\n<li><p>如果你想找什么资料，去github搜索可以使用</p>\n<p><code>awesome</code> 关键字、<br><code>learn</code> +关键字</p>\n</li>\n</ol>\n<p>在<a href=\"https://github.com中\" target=\"_blank\" rel=\"noopener\">https://github.com中</a> 搜索，都能搜索到 最全的教程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awesome vue</span><br><span class=\"line\">learn git</span><br><span class=\"line\">awesome dotnet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"技术学习\"><a href=\"#技术学习\" class=\"headerlink\" title=\"技术学习\"></a>技术学习</h2><p>1.前端相应的知识点</p>\n<ul>\n<li>es6</li>\n<li>webpack</li>\n<li>vue.js</li>\n<li>vuex</li>\n<li>vue-router</li>\n<li>typescript</li>\n<li></li>\n</ul>\n<ol start=\"2\">\n<li>后端技术栈</li>\n</ol>\n<ul>\n<li>nginx</li>\n<li>linux 如：Ubuntu</li>\n<li>docker</li>\n<li>c# 如: .net core 、asp <strong>.net core</strong></li>\n<li>java 如: spring boot</li>\n</ul>\n<ol start=\"3\">\n<li>开发相关</li>\n</ol>\n<ul>\n<li>搭建个人博客 <a href=\"https://hexo.io/zh-cn\" target=\"_blank\" rel=\"noopener\">hexo</a>+<a href=\"https://github.com/xaoxuu/hexo-theme-material-x\" target=\"_blank\" rel=\"noopener\">Material X</a> </li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"重新出发\"><a href=\"#重新出发\" class=\"headerlink\" title=\"重新出发\"></a>重新出发</h2><p>还有几天大学就毕业了(21号毕业典礼)，我在大学期间，在学校跟着老师一起做了一些项目，用到的技术是 easyui+ <strong>.net</strong> framework4.x+sql server 2008+ef 5+vs2012，框架是旧三层架构，没有批量操作和事务，编辑操作时，也极易出错。</p>\n<p>后来升级架构，用了一段时间layui+vue.js（非单页面）+abp (.net frameowork)+mysql 5.7+ef 6+vs2017，后来由于人少，还是换成了easyui 1.51 insdep  版本</p>\n<p>我自己也了解到了一些新的技术,如vue.js的SPA,跨平台的 <strong>.net core</strong>，容器化的docker,负载均衡的nginx，只是帮别人做的一些小项目，用到了vue和 <strong>.NET Core</strong>，其他的就没有实际上线的经验，每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。</p>\n<p>目前用到的一些技术栈、架构风格、开发工具如下</p>\n<p>vue.js(SPA)+<strong>.netNET Core</strong>2.2(JWT+EF Core)+Mysql 5.6+ docker+nginx+Ubuntu+vs2019（vscode)</p>\n<h2 id=\"NET-Core-可学习的框架，社区等\"><a href=\"#NET-Core-可学习的框架，社区等\" class=\"headerlink\" title=\".NET Core 可学习的框架，社区等\"></a>.NET Core 可学习的框架，社区等</h2><ol start=\"0\">\n<li>awesome-dotnet 关于 <strong>.NET Core</strong> 的优秀项目应该都能在这找到 <a href=\"https://github.com/quozd/awesome-dotnet/\" target=\"_blank\" rel=\"noopener\">https://github.com/quozd/awesome-dotnet/</a></li>\n<li>abp vnext ，可参考<a href=\"https://cn.abp.io/documents/abp/latest/Index\" target=\"_blank\" rel=\"noopener\">https://cn.abp.io/documents/abp/latest/Index</a>，我觉得它的特点是：分层更细，但复杂度更大，不过有着完善的文档与社区，架构风格统一，对于每个模块都有着相应的风格指导，另外如官网所说，他的“主要目标是提供一个便捷的基础设施来创建微服务解决方案”（目前还处于0.18待Release版本，2019-6-17）</li>\n<li>surging 专注与 <strong>.net core</strong>下的微服务引擎的解决方案，（1.0于19年初发布，以我的水平，没有良好的入门文档，我还需要继续学习才能使用。）</li>\n<li>.NET Core Community  国内的开源组织，有着优秀的基于.net core 的开源项目，大家可以去学习学习<br><a href=\"https://github.com/dotnetcore\" target=\"_blank\" rel=\"noopener\">https://github.com/dotnetcore</a></li>\n<li>csredis对标的是stackExchange.Redis，大家都说stackExchange.redis有的时候会超时（Timeout Bug），好像一直没有解决(项目全部使用异常可解决)，<a href=\"https://github.com/2881099/csredis\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/csredis</a></li>\n<li>FreeSql是 <strong>.net 、.net core</strong>的最方便的 ORM,     <a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener\">https://github.com/2881099/FreeSql</a>（我还没用，但做这个项目的大佬一直推荐，我相信一定不错）也是做csredis的作者</li>\n<li></li>\n</ol>\n<h2 id=\"小技巧：\"><a href=\"#小技巧：\" class=\"headerlink\" title=\"小技巧：\"></a>小技巧：</h2><ol>\n<li><p>如果你想找什么资料，去github搜索可以使用</p>\n<p><code>awesome</code> 关键字、<br><code>learn</code> +关键字</p>\n</li>\n</ol>\n<p>在<a href=\"https://github.com中\" target=\"_blank\" rel=\"noopener\">https://github.com中</a> 搜索，都能搜索到 最全的教程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awesome vue</span><br><span class=\"line\">learn git</span><br><span class=\"line\">awesome dotnet</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"技术学习\"><a href=\"#技术学习\" class=\"headerlink\" title=\"技术学习\"></a>技术学习</h2><p>1.前端相应的知识点</p>\n<ul>\n<li>es6</li>\n<li>webpack</li>\n<li>vue.js</li>\n<li>vuex</li>\n<li>vue-router</li>\n<li>typescript</li>\n<li></li>\n</ul>\n<ol start=\"2\">\n<li>后端技术栈</li>\n</ol>\n<ul>\n<li>nginx</li>\n<li>linux 如：Ubuntu</li>\n<li>docker</li>\n<li>c# 如: .net core 、asp <strong>.net core</strong></li>\n<li>java 如: spring boot</li>\n</ul>\n<ol start=\"3\">\n<li>开发相关</li>\n</ol>\n<ul>\n<li>搭建个人博客 <a href=\"https://hexo.io/zh-cn\" target=\"_blank\" rel=\"noopener\">hexo</a>+<a href=\"https://github.com/xaoxuu/hexo-theme-material-x\" target=\"_blank\" rel=\"noopener\">Material X</a> </li>\n<li></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Jun 29 2019 13:28:58 GMT+0800 (GMT+08:00)","title":"1.重新出发-起航","path":"2019/06/17/重新出发/1.重新出发-起航/","eyeCatchImage":null,"excerpt":"每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。","date":"2019-06-17T07:19:22.000Z","pv":0,"totalPV":0,"categories":"重新出发","tags":[".NET Core"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"现阶段的痛点","date":"2019-06-12T14:46:22.000Z","description":"现阶段，我观察到的一些痛点，比如：账号集中式管理问题、各个网站注销功能不完善，导致的信息安全问题，账号买卖问题，开源问题等","_content":"\n### 现阶段的痛点：\n\n- 账号的集中式管理，密码复杂，需要记忆不同账户体系下的账号，使用相同的密码会有安全问题，若某一系统的账号泄露，易造成其他系统被撞库。\n- 小型网站不提供注销功能，无法保证用户信息安全，就如现阶段（2019-6-12），CSDN也无法注销账号，而有时没有记住使用何种方法注册，易造成多账号情况。Microsoft提供完整的隐私删除服务，用户可自行删除搜索记录，包括浏览器，语音，位置等。简书也提供注销，QQ也提供注销功能，注销是保证用户的重要入口。\n- 用户买卖微信，手机号，平台账号，当出现服务商出现一些活动时，薅羊毛党就会出来占便宜，会导致运营成本失控、数据样体失值、数据有效性失常、平台服务器失效、平台发展失衡 \n    - 刷单、任务、黄牛、黑客、漏研族。\n- 云服务商不遵守开源精神，[看不惯云计算公司流氓行为，MongoDB 更改开源协议\n](https://www.oschina.net/news/100948/mongodb-switches-up-its-open-source-license)\n\n\nIT产业逐渐向服务化转型。用户不需要购买软硬件，而是通过互联网向厂商订购所属的应用软件服务。IT厂商越来越倾向于通过服务收费，而不是通过售卖软硬件收费。此种情况下，一些云服务厂商将MangoDB的社区版本修改后向用户提供其数据库的托管商业版本，而不将修改的源代码公开回馈给社区。如此一来，这些云服务厂商相当于从MangoDB企业版销售中分了一杯羹，抢占了其销售份额。MangoDB更换许可协议就是要遏制云服务提供商攫取开源软件价值却不给予开源社区任何回报的行为。\n\n- 手机Android推送频繁，如何合理监控。\n<fancybox>\n<img style=\"width:350px;height:350px\" src=\"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg\"  alt=\"真棒\" align=center />\n</fancybox>","source":"_posts/工作/现阶段的痛点.md","raw":"---\ntitle: 现阶段的痛点\ndate: 2019-6-12 22:46:22\ndescription: 现阶段，我观察到的一些痛点，比如：账号集中式管理问题、各个网站注销功能不完善，导致的信息安全问题，账号买卖问题，开源问题等\ntags:\n- 账号安全\n- 隐私\ncategory:\n- 工作\n---\n\n### 现阶段的痛点：\n\n- 账号的集中式管理，密码复杂，需要记忆不同账户体系下的账号，使用相同的密码会有安全问题，若某一系统的账号泄露，易造成其他系统被撞库。\n- 小型网站不提供注销功能，无法保证用户信息安全，就如现阶段（2019-6-12），CSDN也无法注销账号，而有时没有记住使用何种方法注册，易造成多账号情况。Microsoft提供完整的隐私删除服务，用户可自行删除搜索记录，包括浏览器，语音，位置等。简书也提供注销，QQ也提供注销功能，注销是保证用户的重要入口。\n- 用户买卖微信，手机号，平台账号，当出现服务商出现一些活动时，薅羊毛党就会出来占便宜，会导致运营成本失控、数据样体失值、数据有效性失常、平台服务器失效、平台发展失衡 \n    - 刷单、任务、黄牛、黑客、漏研族。\n- 云服务商不遵守开源精神，[看不惯云计算公司流氓行为，MongoDB 更改开源协议\n](https://www.oschina.net/news/100948/mongodb-switches-up-its-open-source-license)\n\n\nIT产业逐渐向服务化转型。用户不需要购买软硬件，而是通过互联网向厂商订购所属的应用软件服务。IT厂商越来越倾向于通过服务收费，而不是通过售卖软硬件收费。此种情况下，一些云服务厂商将MangoDB的社区版本修改后向用户提供其数据库的托管商业版本，而不将修改的源代码公开回馈给社区。如此一来，这些云服务厂商相当于从MangoDB企业版销售中分了一杯羹，抢占了其销售份额。MangoDB更换许可协议就是要遏制云服务提供商攫取开源软件价值却不给予开源社区任何回报的行为。\n\n- 手机Android推送频繁，如何合理监控。\n<fancybox>\n<img style=\"width:350px;height:350px\" src=\"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg\"  alt=\"真棒\" align=center />\n</fancybox>","slug":"工作/现阶段的痛点","published":1,"updated":"2019-06-25T14:47:07.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiuc001i00uxu3w4l533","content":"<h3 id=\"现阶段的痛点：\"><a href=\"#现阶段的痛点：\" class=\"headerlink\" title=\"现阶段的痛点：\"></a>现阶段的痛点：</h3><ul>\n<li>账号的集中式管理，密码复杂，需要记忆不同账户体系下的账号，使用相同的密码会有安全问题，若某一系统的账号泄露，易造成其他系统被撞库。</li>\n<li>小型网站不提供注销功能，无法保证用户信息安全，就如现阶段（2019-6-12），CSDN也无法注销账号，而有时没有记住使用何种方法注册，易造成多账号情况。Microsoft提供完整的隐私删除服务，用户可自行删除搜索记录，包括浏览器，语音，位置等。简书也提供注销，QQ也提供注销功能，注销是保证用户的重要入口。</li>\n<li>用户买卖微信，手机号，平台账号，当出现服务商出现一些活动时，薅羊毛党就会出来占便宜，会导致运营成本失控、数据样体失值、数据有效性失常、平台服务器失效、平台发展失衡 <ul>\n<li>刷单、任务、黄牛、黑客、漏研族。</li>\n</ul>\n</li>\n<li>云服务商不遵守开源精神，<a href=\"https://www.oschina.net/news/100948/mongodb-switches-up-its-open-source-license\" target=\"_blank\" rel=\"noopener\">看不惯云计算公司流氓行为，MongoDB 更改开源协议\n</a></li>\n</ul>\n<p>IT产业逐渐向服务化转型。用户不需要购买软硬件，而是通过互联网向厂商订购所属的应用软件服务。IT厂商越来越倾向于通过服务收费，而不是通过售卖软硬件收费。此种情况下，一些云服务厂商将MangoDB的社区版本修改后向用户提供其数据库的托管商业版本，而不将修改的源代码公开回馈给社区。如此一来，这些云服务厂商相当于从MangoDB企业版销售中分了一杯羹，抢占了其销售份额。MangoDB更换许可协议就是要遏制云服务提供商攫取开源软件价值却不给予开源社区任何回报的行为。</p>\n<ul>\n<li>手机Android推送频繁，如何合理监控。<fancybox>\n<img style=\"width:350px;height:350px\" src=\"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg\" alt=\"真棒\" align=\"center\">\n</fancybox></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"现阶段的痛点：\"><a href=\"#现阶段的痛点：\" class=\"headerlink\" title=\"现阶段的痛点：\"></a>现阶段的痛点：</h3><ul>\n<li>账号的集中式管理，密码复杂，需要记忆不同账户体系下的账号，使用相同的密码会有安全问题，若某一系统的账号泄露，易造成其他系统被撞库。</li>\n<li>小型网站不提供注销功能，无法保证用户信息安全，就如现阶段（2019-6-12），CSDN也无法注销账号，而有时没有记住使用何种方法注册，易造成多账号情况。Microsoft提供完整的隐私删除服务，用户可自行删除搜索记录，包括浏览器，语音，位置等。简书也提供注销，QQ也提供注销功能，注销是保证用户的重要入口。</li>\n<li>用户买卖微信，手机号，平台账号，当出现服务商出现一些活动时，薅羊毛党就会出来占便宜，会导致运营成本失控、数据样体失值、数据有效性失常、平台服务器失效、平台发展失衡 <ul>\n<li>刷单、任务、黄牛、黑客、漏研族。</li>\n</ul>\n</li>\n<li>云服务商不遵守开源精神，<a href=\"https://www.oschina.net/news/100948/mongodb-switches-up-its-open-source-license\" target=\"_blank\" rel=\"noopener\">看不惯云计算公司流氓行为，MongoDB 更改开源协议\n</a></li>\n</ul>\n<p>IT产业逐渐向服务化转型。用户不需要购买软硬件，而是通过互联网向厂商订购所属的应用软件服务。IT厂商越来越倾向于通过服务收费，而不是通过售卖软硬件收费。此种情况下，一些云服务厂商将MangoDB的社区版本修改后向用户提供其数据库的托管商业版本，而不将修改的源代码公开回馈给社区。如此一来，这些云服务厂商相当于从MangoDB企业版销售中分了一杯羹，抢占了其销售份额。MangoDB更换许可协议就是要遏制云服务提供商攫取开源软件价值却不给予开源社区任何回报的行为。</p>\n<ul>\n<li>手机Android推送频繁，如何合理监控。<fancybox>\n<img style=\"width:350px;height:350px\" src=\"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg\" alt=\"真棒\" align=\"center\">\n</fancybox></li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg","popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"现阶段的痛点","path":"2019/06/12/工作/现阶段的痛点/","eyeCatchImage":"https://miao.su/images/2019/06/11/_20190611110152a5cd7.jpg","excerpt":"现阶段，我观察到的一些痛点，比如：账号集中式管理问题、各个网站注销功能不完善，导致的信息安全问题，账号买卖问题，开源问题等","date":"2019-06-12T14:46:22.000Z","pv":0,"totalPV":0,"categories":"工作","tags":["账号安全","隐私"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"记一次.NET 与R语言交互","date":"2018-07-02T16:50:27.000Z","_content":"\n项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！\n> 使用的类库是  RDotNet   ,开源地址：[R.NET](https://github.com/jmp75/rdotnet)\n> 他有官网的：[对R.NET的一些介绍](https://jmp75.github.io/rdotnet/) ，这个可能需要翻墙。\n\n<!-- more -->\n\n我找了很多博客，在CSDN上的代码，基本都是重复的，也没有太多的介绍，一般情况都是官网直接翻译下来的，遇到一些问题时，根本查不到是什么原因。\n那么，遇到问题，怎么办？\n1、看官网，里面有一些示例的链接：[这个相当于示例代码库](https://github.com/jmp75/rdotnet-onboarding)\n2、看github上，开源地址的Issue，看不懂英语，也要看，有些问题，看完你就会懂了。\n\n\nR.NET是什么？\n\n  我的理解，R语言就像是SQL语言，用于数据计算，数据处理。R.Net这个类库就类似ADO.NET的技术，帮助我们实现.NET程序访问R语言代码，R.NET就相当于一个驱动程序。当然，严格意义上，我也不知道RDotNet是不是这样子，看他介绍，应该是起一R引擎。。。。（不懂.jpg）\n\n使用RDotNet的步骤：\n1、首先，你要看懂一些简单的R程序，就像，你不懂sql 语句，你怎么写ADO.NETt程序一样\n（安装R的环境，不要装最新的3.5版本，因为，R.NET并没有做到最新的版本，看他的github就知道了，我本地装的3.3.3，一点问题都没有。如果你安装3.5版本，会一直报一个空指针异常，反正我被坑了。）\n2、将我上面所说的示例代码库下载下来，从最简单的代码开始看起。\n### 如下为开发过程中可能出现的问题！\n\n* 而我遇到什么样的问题呢？ 我是如何解决的？\n* 还有哪些问题需要解决？\n* 这个类库还有哪些问题不能解决，他有哪些缺点？\n\n回答上面的问题.\n#### 1.我遇到的问题。\n1）、安装过新的R环境3.5导致一直报错，一点思路都没有。\n如何解决：看github的issue，看到有人提的问题，大意是指。R.NET不能支持到最新的R语言版本。\n2）、一个简单的程序，在控制台上执行，是OK的。然而在ASP.NET MVC程序上一直不成功。\n如何解决：第一步：先把R的环境变量配置好，类似JDK的环境变量配置 \n找到自己的R语言位置，将32位和64位的环境都配置至path中 \n```\n\t;C:\\Program Files\\R\\R-3.3.3\\bin\\i386;C:\\Program Files\\R\\R-3.3.3\\bin\\x64;\n```\n第二步，如何还有问题的话：比如一直报StackOverflowException的异常，建议你看他的issue:[这个是他们的讨论](https://github.com/jmp75/rdotnet/issues/74)\n原本我也遇到这个问题，但R的版本用了3.3,就没这个错了。\n3）、当R的引擎正常结束后，调用 dispose后，下次调用 就会报错，那就不调用 dispose方法吧。\n那个作者说：There can only be one R engine in a process, and R itself is largely not thread-safe.\n\n\n#### 2.还有哪些问题需要解决？\n1)   以**管理员权限**运行Rgui,并指定包安装的位置，防止安装到其他目录\n此命令设置当前包安装的位置，\n~~~\n.libPaths(\"C:/Program Files/R/R-3.3.3/library\")\n~~~\n此命令查看当前包会安装的位置\n~~~\n.libPaths()\n~~~\n2) 如果有些包无法正常安装，如果能找到那个包，可直接复制其至目录C:/Program Files/R/R-3.3.3/library\n3) 运行和发布后的代码都应运行在64位机子及平台上。\n\n####  3.这个类库还有哪些问题不能解决，他有哪些缺点？\n1) 不能兼容所有的R版本，目前只兼容到R3.3.3。\n2) 如下代码在本机windows10 专业版 中文版电脑上运行会乱码\n~~~\n CharacterVector datFname = engine.CreateCharacter(\"我是中文\");\n~~~\n 我研究下代码，是这个类中的方法有问题InternalString  下的方法 StringFromNativeUtf8\n ~~~\n        /// <summary>\n        /// Convert utf8 to string\n        /// </summary>\n        /// <param name=\"utf8\">utf8 to convert</param>\n\n        public static string StringFromNativeUtf8(IntPtr utf8)\n        {\n            int len = 0;\n            while (Marshal.ReadByte(utf8, len) != 0) ++len;\n            byte[] buffer = new byte[len];\n            Marshal.Copy(utf8, buffer, 0, buffer.Length);\n            return Encoding.UTF8.GetString(buffer);\n        }\n ~~~\n我在我本地调试源码时，发现，如果包含中文时，采用Encoding.Default.GetString(buffer);转换，这里就可以正常转换，但这样子，就只支持中文和英文了。而且，好像在测试过程中，改成Default后，如下方法中包含中文，反而乱码了。\n~~~\n       string[] rownames = engine.GetSymbol(\"rownames\").AsCharacter().ToArray();\n~~~\n 所以我准备直接用最简单的方式 ，判断buffer的编码，如果不为UTF8,Convert为UTF8，然后返回，否则，这里就需要多此一举，因为，在测试过程发现，判断UTF8，不准确，明明不是UTF8，还是返回了UTF8，所以在这里需要判断，转换后的数据是否包含中文，如果包含，则直接返回，否则要从Default（根据系统的编码决定），转换为UTF8，就能返回中文 。\n ~~~\n        /// <summary>\n        /// Convert utf8 to string\n        /// </summary>\n        /// <param name=\"utf8\">utf8 to convert</param>\n\n        public static string StringFromNativeUtf8(IntPtr utf8)\n        {\n            int len = 0;\n            while (Marshal.ReadByte(utf8, len) != 0) ++len;\n            byte[] buffer = new byte[len];\n            Marshal.Copy(utf8, buffer, 0, buffer.Length);\n            Encoding encoding = GetType(buffer);\n            if (encoding.Equals(Encoding.UTF8))\n            {\n                string r = Encoding.UTF8.GetString(buffer);\n                if (System.Text.RegularExpressions.Regex.IsMatch(r, @\"[\\u4e00-\\u9fbb]+$\"))\n                {\n                    return r;\n                }\n                else\n                {\n                    byte[] newBuffer = Encoding.Convert(Encoding.Default, Encoding.UTF8, buffer);\n                    return Encoding.UTF8.GetString(newBuffer);\n                }\n            }\n            else\n            {\n                byte[] newBuffer = Encoding.Convert(encoding, Encoding.UTF8, buffer);\n                return Encoding.UTF8.GetString(newBuffer);\n            }\n        }\n~~~\n**代码已放到github**\n> 由于该 [R.NET类库 ](https://github.com/jmp75/rdotnet)长期未维护，还是有很多BUG，所以我fork了一份，以便解决部分简单BUG问题， [github开源地址](https://github.com/luoyunchong/rdotnet)\n\n\n\n### 相关博客介绍\n* [用C#调用R语言开发.NET MVC Web服务](https://blog.csdn.net/clearskychan/article/details/53431535) 此文章中介绍了.NET启动控制台调用R代码，这个思路非常好，一开始对R语言了解甚少，所以还是使用R.NET来实现.NET与R语言的交互，反而耗时耗力。\n* [一键运行R脚本](https://blog.csdn.net/wzgl__wh/article/details/77099903) 这个文章让我了解到Rscript.exe这个程序的作用，以及执行方式。\n+ [c#调用R语言（原创翻译）](https://blog.csdn.net/guoer9973/article/details/45953471)\n\n由于开发过程中，有个R程序运行时间非常长，最长可达2小时，所以只能以后台任务方式执行，但 RDotNET，一次只能运行一个，不执行完，其他的程序在WEB项目下无法正常运行，看了上面的文章，有了思路 ：使用.NET的进程Process起一个cmd命令，类似 java配置好环境变量后可使用java,javac命令一样，配置到Path中后，可直接在cmd中使用如下命令\n~~~bash\nRscript.exe \"某目录下\\test.R\"  agruments \n~~~\n其中R程序包要有双引号   多个参数使用空格分隔 ，如下为.NET下使用Process启动cmd命令，并执行Rscript.exe 命令启动R引擎，让其后台运行，运行结束后，才会往后执行。\n~~~\n    public void Execute()\n        {\n            List<string> arguments = new List<string>\n            {\n                参数\n            };\n\n            Process cmd = new Process\n            {\n                StartInfo =\n                {\n                    FileName = @\"Rscript.exe\",\n                    WorkingDirectory = AppFolders.RSourceCodeFolder,//.R代码的位置 \"E:\\svn\\CHNMed\\CHNMed.Web\\DataUsers\\RSourceCode\"\n                    UseShellExecute = false,\n                    RedirectStandardOutput = true,\n                    RedirectStandardError = true,\n                    Arguments = \" Test.r \" + string.Join(\" \", arguments),\n                    CreateNoWindow = true,//不显示程序窗口\n                }\n            };\n            cmd.Start();//启动程序\n            var output = cmd.StandardOutput.ReadToEnd();\n            var error = cmd.StandardError.ReadToEnd();\n            cmd.WaitForExit();//等待控制台程序执行完成\n\t\t\tcmd.Close();//关闭该进程\n            Logger.InfoFormat($\"参数：{output}出错信息:{error}\");\n        }\n\n~~~\n\n","source":"_posts/ABP/记一次.NET 与R语言交互.md","raw":"---\ntitle: 记一次.NET 与R语言交互\ndate: 2018-07-03 00:50:27\ntags:\n- ABP\n- .NET Framework\n- R.NET\ncategory: \n- .NET Framework\n---\n\n项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！\n> 使用的类库是  RDotNet   ,开源地址：[R.NET](https://github.com/jmp75/rdotnet)\n> 他有官网的：[对R.NET的一些介绍](https://jmp75.github.io/rdotnet/) ，这个可能需要翻墙。\n\n<!-- more -->\n\n我找了很多博客，在CSDN上的代码，基本都是重复的，也没有太多的介绍，一般情况都是官网直接翻译下来的，遇到一些问题时，根本查不到是什么原因。\n那么，遇到问题，怎么办？\n1、看官网，里面有一些示例的链接：[这个相当于示例代码库](https://github.com/jmp75/rdotnet-onboarding)\n2、看github上，开源地址的Issue，看不懂英语，也要看，有些问题，看完你就会懂了。\n\n\nR.NET是什么？\n\n  我的理解，R语言就像是SQL语言，用于数据计算，数据处理。R.Net这个类库就类似ADO.NET的技术，帮助我们实现.NET程序访问R语言代码，R.NET就相当于一个驱动程序。当然，严格意义上，我也不知道RDotNet是不是这样子，看他介绍，应该是起一R引擎。。。。（不懂.jpg）\n\n使用RDotNet的步骤：\n1、首先，你要看懂一些简单的R程序，就像，你不懂sql 语句，你怎么写ADO.NETt程序一样\n（安装R的环境，不要装最新的3.5版本，因为，R.NET并没有做到最新的版本，看他的github就知道了，我本地装的3.3.3，一点问题都没有。如果你安装3.5版本，会一直报一个空指针异常，反正我被坑了。）\n2、将我上面所说的示例代码库下载下来，从最简单的代码开始看起。\n### 如下为开发过程中可能出现的问题！\n\n* 而我遇到什么样的问题呢？ 我是如何解决的？\n* 还有哪些问题需要解决？\n* 这个类库还有哪些问题不能解决，他有哪些缺点？\n\n回答上面的问题.\n#### 1.我遇到的问题。\n1）、安装过新的R环境3.5导致一直报错，一点思路都没有。\n如何解决：看github的issue，看到有人提的问题，大意是指。R.NET不能支持到最新的R语言版本。\n2）、一个简单的程序，在控制台上执行，是OK的。然而在ASP.NET MVC程序上一直不成功。\n如何解决：第一步：先把R的环境变量配置好，类似JDK的环境变量配置 \n找到自己的R语言位置，将32位和64位的环境都配置至path中 \n```\n\t;C:\\Program Files\\R\\R-3.3.3\\bin\\i386;C:\\Program Files\\R\\R-3.3.3\\bin\\x64;\n```\n第二步，如何还有问题的话：比如一直报StackOverflowException的异常，建议你看他的issue:[这个是他们的讨论](https://github.com/jmp75/rdotnet/issues/74)\n原本我也遇到这个问题，但R的版本用了3.3,就没这个错了。\n3）、当R的引擎正常结束后，调用 dispose后，下次调用 就会报错，那就不调用 dispose方法吧。\n那个作者说：There can only be one R engine in a process, and R itself is largely not thread-safe.\n\n\n#### 2.还有哪些问题需要解决？\n1)   以**管理员权限**运行Rgui,并指定包安装的位置，防止安装到其他目录\n此命令设置当前包安装的位置，\n~~~\n.libPaths(\"C:/Program Files/R/R-3.3.3/library\")\n~~~\n此命令查看当前包会安装的位置\n~~~\n.libPaths()\n~~~\n2) 如果有些包无法正常安装，如果能找到那个包，可直接复制其至目录C:/Program Files/R/R-3.3.3/library\n3) 运行和发布后的代码都应运行在64位机子及平台上。\n\n####  3.这个类库还有哪些问题不能解决，他有哪些缺点？\n1) 不能兼容所有的R版本，目前只兼容到R3.3.3。\n2) 如下代码在本机windows10 专业版 中文版电脑上运行会乱码\n~~~\n CharacterVector datFname = engine.CreateCharacter(\"我是中文\");\n~~~\n 我研究下代码，是这个类中的方法有问题InternalString  下的方法 StringFromNativeUtf8\n ~~~\n        /// <summary>\n        /// Convert utf8 to string\n        /// </summary>\n        /// <param name=\"utf8\">utf8 to convert</param>\n\n        public static string StringFromNativeUtf8(IntPtr utf8)\n        {\n            int len = 0;\n            while (Marshal.ReadByte(utf8, len) != 0) ++len;\n            byte[] buffer = new byte[len];\n            Marshal.Copy(utf8, buffer, 0, buffer.Length);\n            return Encoding.UTF8.GetString(buffer);\n        }\n ~~~\n我在我本地调试源码时，发现，如果包含中文时，采用Encoding.Default.GetString(buffer);转换，这里就可以正常转换，但这样子，就只支持中文和英文了。而且，好像在测试过程中，改成Default后，如下方法中包含中文，反而乱码了。\n~~~\n       string[] rownames = engine.GetSymbol(\"rownames\").AsCharacter().ToArray();\n~~~\n 所以我准备直接用最简单的方式 ，判断buffer的编码，如果不为UTF8,Convert为UTF8，然后返回，否则，这里就需要多此一举，因为，在测试过程发现，判断UTF8，不准确，明明不是UTF8，还是返回了UTF8，所以在这里需要判断，转换后的数据是否包含中文，如果包含，则直接返回，否则要从Default（根据系统的编码决定），转换为UTF8，就能返回中文 。\n ~~~\n        /// <summary>\n        /// Convert utf8 to string\n        /// </summary>\n        /// <param name=\"utf8\">utf8 to convert</param>\n\n        public static string StringFromNativeUtf8(IntPtr utf8)\n        {\n            int len = 0;\n            while (Marshal.ReadByte(utf8, len) != 0) ++len;\n            byte[] buffer = new byte[len];\n            Marshal.Copy(utf8, buffer, 0, buffer.Length);\n            Encoding encoding = GetType(buffer);\n            if (encoding.Equals(Encoding.UTF8))\n            {\n                string r = Encoding.UTF8.GetString(buffer);\n                if (System.Text.RegularExpressions.Regex.IsMatch(r, @\"[\\u4e00-\\u9fbb]+$\"))\n                {\n                    return r;\n                }\n                else\n                {\n                    byte[] newBuffer = Encoding.Convert(Encoding.Default, Encoding.UTF8, buffer);\n                    return Encoding.UTF8.GetString(newBuffer);\n                }\n            }\n            else\n            {\n                byte[] newBuffer = Encoding.Convert(encoding, Encoding.UTF8, buffer);\n                return Encoding.UTF8.GetString(newBuffer);\n            }\n        }\n~~~\n**代码已放到github**\n> 由于该 [R.NET类库 ](https://github.com/jmp75/rdotnet)长期未维护，还是有很多BUG，所以我fork了一份，以便解决部分简单BUG问题， [github开源地址](https://github.com/luoyunchong/rdotnet)\n\n\n\n### 相关博客介绍\n* [用C#调用R语言开发.NET MVC Web服务](https://blog.csdn.net/clearskychan/article/details/53431535) 此文章中介绍了.NET启动控制台调用R代码，这个思路非常好，一开始对R语言了解甚少，所以还是使用R.NET来实现.NET与R语言的交互，反而耗时耗力。\n* [一键运行R脚本](https://blog.csdn.net/wzgl__wh/article/details/77099903) 这个文章让我了解到Rscript.exe这个程序的作用，以及执行方式。\n+ [c#调用R语言（原创翻译）](https://blog.csdn.net/guoer9973/article/details/45953471)\n\n由于开发过程中，有个R程序运行时间非常长，最长可达2小时，所以只能以后台任务方式执行，但 RDotNET，一次只能运行一个，不执行完，其他的程序在WEB项目下无法正常运行，看了上面的文章，有了思路 ：使用.NET的进程Process起一个cmd命令，类似 java配置好环境变量后可使用java,javac命令一样，配置到Path中后，可直接在cmd中使用如下命令\n~~~bash\nRscript.exe \"某目录下\\test.R\"  agruments \n~~~\n其中R程序包要有双引号   多个参数使用空格分隔 ，如下为.NET下使用Process启动cmd命令，并执行Rscript.exe 命令启动R引擎，让其后台运行，运行结束后，才会往后执行。\n~~~\n    public void Execute()\n        {\n            List<string> arguments = new List<string>\n            {\n                参数\n            };\n\n            Process cmd = new Process\n            {\n                StartInfo =\n                {\n                    FileName = @\"Rscript.exe\",\n                    WorkingDirectory = AppFolders.RSourceCodeFolder,//.R代码的位置 \"E:\\svn\\CHNMed\\CHNMed.Web\\DataUsers\\RSourceCode\"\n                    UseShellExecute = false,\n                    RedirectStandardOutput = true,\n                    RedirectStandardError = true,\n                    Arguments = \" Test.r \" + string.Join(\" \", arguments),\n                    CreateNoWindow = true,//不显示程序窗口\n                }\n            };\n            cmd.Start();//启动程序\n            var output = cmd.StandardOutput.ReadToEnd();\n            var error = cmd.StandardError.ReadToEnd();\n            cmd.WaitForExit();//等待控制台程序执行完成\n\t\t\tcmd.Close();//关闭该进程\n            Logger.InfoFormat($\"参数：{output}出错信息:{error}\");\n        }\n\n~~~\n\n","slug":"ABP/记一次.NET 与R语言交互","published":1,"updated":"2019-06-25T14:47:07.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiuy003i00uxhn6gup0x","content":"<p>项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！</p>\n<blockquote>\n<p>使用的类库是  RDotNet   ,开源地址：<a href=\"https://github.com/jmp75/rdotnet\" target=\"_blank\" rel=\"noopener\">R.NET</a><br>他有官网的：<a href=\"https://jmp75.github.io/rdotnet/\" target=\"_blank\" rel=\"noopener\">对R.NET的一些介绍</a> ，这个可能需要翻墙。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>我找了很多博客，在CSDN上的代码，基本都是重复的，也没有太多的介绍，一般情况都是官网直接翻译下来的，遇到一些问题时，根本查不到是什么原因。<br>那么，遇到问题，怎么办？<br>1、看官网，里面有一些示例的链接：<a href=\"https://github.com/jmp75/rdotnet-onboarding\" target=\"_blank\" rel=\"noopener\">这个相当于示例代码库</a><br>2、看github上，开源地址的Issue，看不懂英语，也要看，有些问题，看完你就会懂了。</p>\n<p>R.NET是什么？</p>\n<p>  我的理解，R语言就像是SQL语言，用于数据计算，数据处理。R.Net这个类库就类似ADO.NET的技术，帮助我们实现.NET程序访问R语言代码，R.NET就相当于一个驱动程序。当然，严格意义上，我也不知道RDotNet是不是这样子，看他介绍，应该是起一R引擎。。。。（不懂.jpg）</p>\n<p>使用RDotNet的步骤：<br>1、首先，你要看懂一些简单的R程序，就像，你不懂sql 语句，你怎么写ADO.NETt程序一样<br>（安装R的环境，不要装最新的3.5版本，因为，R.NET并没有做到最新的版本，看他的github就知道了，我本地装的3.3.3，一点问题都没有。如果你安装3.5版本，会一直报一个空指针异常，反正我被坑了。）<br>2、将我上面所说的示例代码库下载下来，从最简单的代码开始看起。</p>\n<h3 id=\"如下为开发过程中可能出现的问题！\"><a href=\"#如下为开发过程中可能出现的问题！\" class=\"headerlink\" title=\"如下为开发过程中可能出现的问题！\"></a>如下为开发过程中可能出现的问题！</h3><ul>\n<li>而我遇到什么样的问题呢？ 我是如何解决的？</li>\n<li>还有哪些问题需要解决？</li>\n<li>这个类库还有哪些问题不能解决，他有哪些缺点？</li>\n</ul>\n<p>回答上面的问题.</p>\n<h4 id=\"1-我遇到的问题。\"><a href=\"#1-我遇到的问题。\" class=\"headerlink\" title=\"1.我遇到的问题。\"></a>1.我遇到的问题。</h4><p>1）、安装过新的R环境3.5导致一直报错，一点思路都没有。<br>如何解决：看github的issue，看到有人提的问题，大意是指。R.NET不能支持到最新的R语言版本。<br>2）、一个简单的程序，在控制台上执行，是OK的。然而在ASP.NET MVC程序上一直不成功。<br>如何解决：第一步：先把R的环境变量配置好，类似JDK的环境变量配置<br>找到自己的R语言位置，将32位和64位的环境都配置至path中 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;C:\\Program Files\\R\\R-3.3.3\\bin\\i386;C:\\Program Files\\R\\R-3.3.3\\bin\\x64;</span><br></pre></td></tr></table></figure>\n\n<p>第二步，如何还有问题的话：比如一直报StackOverflowException的异常，建议你看他的issue:<a href=\"https://github.com/jmp75/rdotnet/issues/74\" target=\"_blank\" rel=\"noopener\">这个是他们的讨论</a><br>原本我也遇到这个问题，但R的版本用了3.3,就没这个错了。<br>3）、当R的引擎正常结束后，调用 dispose后，下次调用 就会报错，那就不调用 dispose方法吧。<br>那个作者说：There can only be one R engine in a process, and R itself is largely not thread-safe.</p>\n<h4 id=\"2-还有哪些问题需要解决？\"><a href=\"#2-还有哪些问题需要解决？\" class=\"headerlink\" title=\"2.还有哪些问题需要解决？\"></a>2.还有哪些问题需要解决？</h4><p>1)   以<strong>管理员权限</strong>运行Rgui,并指定包安装的位置，防止安装到其他目录<br>此命令设置当前包安装的位置，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.libPaths(&quot;C:/Program Files/R/R-3.3.3/library&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>此命令查看当前包会安装的位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.libPaths()</span><br></pre></td></tr></table></figure>\n\n<p>2) 如果有些包无法正常安装，如果能找到那个包，可直接复制其至目录C:/Program Files/R/R-3.3.3/library<br>3) 运行和发布后的代码都应运行在64位机子及平台上。</p>\n<h4 id=\"3-这个类库还有哪些问题不能解决，他有哪些缺点？\"><a href=\"#3-这个类库还有哪些问题不能解决，他有哪些缺点？\" class=\"headerlink\" title=\"3.这个类库还有哪些问题不能解决，他有哪些缺点？\"></a>3.这个类库还有哪些问题不能解决，他有哪些缺点？</h4><p>1) 不能兼容所有的R版本，目前只兼容到R3.3.3。<br>2) 如下代码在本机windows10 专业版 中文版电脑上运行会乱码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CharacterVector datFname = engine.CreateCharacter(&quot;我是中文&quot;);</span><br></pre></td></tr></table></figure>\n\n<p> 我研究下代码，是这个类中的方法有问题InternalString  下的方法 StringFromNativeUtf8<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Convert utf8 to string</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &lt;param name=&quot;utf8&quot;&gt;utf8 to convert&lt;/param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">public static string StringFromNativeUtf8(IntPtr utf8)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int len = 0;</span><br><span class=\"line\">    while (Marshal.ReadByte(utf8, len) != 0) ++len;</span><br><span class=\"line\">    byte[] buffer = new byte[len];</span><br><span class=\"line\">    Marshal.Copy(utf8, buffer, 0, buffer.Length);</span><br><span class=\"line\">    return Encoding.UTF8.GetString(buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我在我本地调试源码时，发现，如果包含中文时，采用Encoding.Default.GetString(buffer);转换，这里就可以正常转换，但这样子，就只支持中文和英文了。而且，好像在测试过程中，改成Default后，如下方法中包含中文，反而乱码了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string[] rownames = engine.GetSymbol(&quot;rownames&quot;).AsCharacter().ToArray();</span><br></pre></td></tr></table></figure>\n\n<p> 所以我准备直接用最简单的方式 ，判断buffer的编码，如果不为UTF8,Convert为UTF8，然后返回，否则，这里就需要多此一举，因为，在测试过程发现，判断UTF8，不准确，明明不是UTF8，还是返回了UTF8，所以在这里需要判断，转换后的数据是否包含中文，如果包含，则直接返回，否则要从Default（根据系统的编码决定），转换为UTF8，就能返回中文 。<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Convert utf8 to string</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &lt;param name=&quot;utf8&quot;&gt;utf8 to convert&lt;/param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">public static string StringFromNativeUtf8(IntPtr utf8)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int len = 0;</span><br><span class=\"line\">    while (Marshal.ReadByte(utf8, len) != 0) ++len;</span><br><span class=\"line\">    byte[] buffer = new byte[len];</span><br><span class=\"line\">    Marshal.Copy(utf8, buffer, 0, buffer.Length);</span><br><span class=\"line\">    Encoding encoding = GetType(buffer);</span><br><span class=\"line\">    if (encoding.Equals(Encoding.UTF8))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string r = Encoding.UTF8.GetString(buffer);</span><br><span class=\"line\">        if (System.Text.RegularExpressions.Regex.IsMatch(r, @&quot;[\\u4e00-\\u9fbb]+$&quot;))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            byte[] newBuffer = Encoding.Convert(Encoding.Default, Encoding.UTF8, buffer);</span><br><span class=\"line\">            return Encoding.UTF8.GetString(newBuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        byte[] newBuffer = Encoding.Convert(encoding, Encoding.UTF8, buffer);</span><br><span class=\"line\">        return Encoding.UTF8.GetString(newBuffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>代码已放到github</strong></p>\n<blockquote>\n<p>由于该 <a href=\"https://github.com/jmp75/rdotnet\" target=\"_blank\" rel=\"noopener\">R.NET类库 </a>长期未维护，还是有很多BUG，所以我fork了一份，以便解决部分简单BUG问题， <a href=\"https://github.com/luoyunchong/rdotnet\" target=\"_blank\" rel=\"noopener\">github开源地址</a></p>\n</blockquote>\n<h3 id=\"相关博客介绍\"><a href=\"#相关博客介绍\" class=\"headerlink\" title=\"相关博客介绍\"></a>相关博客介绍</h3><ul>\n<li><a href=\"https://blog.csdn.net/clearskychan/article/details/53431535\" target=\"_blank\" rel=\"noopener\">用C#调用R语言开发.NET MVC Web服务</a> 此文章中介绍了.NET启动控制台调用R代码，这个思路非常好，一开始对R语言了解甚少，所以还是使用R.NET来实现.NET与R语言的交互，反而耗时耗力。</li>\n<li><a href=\"https://blog.csdn.net/wzgl__wh/article/details/77099903\" target=\"_blank\" rel=\"noopener\">一键运行R脚本</a> 这个文章让我了解到Rscript.exe这个程序的作用，以及执行方式。</li>\n</ul>\n<ul>\n<li><a href=\"https://blog.csdn.net/guoer9973/article/details/45953471\" target=\"_blank\" rel=\"noopener\">c#调用R语言（原创翻译）</a></li>\n</ul>\n<p>由于开发过程中，有个R程序运行时间非常长，最长可达2小时，所以只能以后台任务方式执行，但 RDotNET，一次只能运行一个，不执行完，其他的程序在WEB项目下无法正常运行，看了上面的文章，有了思路 ：使用.NET的进程Process起一个cmd命令，类似 java配置好环境变量后可使用java,javac命令一样，配置到Path中后，可直接在cmd中使用如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rscript.exe <span class=\"string\">\"某目录下\\test.R\"</span>  agruments</span><br></pre></td></tr></table></figure>\n\n<p>其中R程序包要有双引号   多个参数使用空格分隔 ，如下为.NET下使用Process启动cmd命令，并执行Rscript.exe 命令启动R引擎，让其后台运行，运行结束后，才会往后执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public void Execute()</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         List&lt;string&gt; arguments = new List&lt;string&gt;</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             参数</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">         Process cmd = new Process</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             StartInfo =</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 FileName = @&quot;Rscript.exe&quot;,</span><br><span class=\"line\">                 WorkingDirectory = AppFolders.RSourceCodeFolder,//.R代码的位置 &quot;E:\\svn\\CHNMed\\CHNMed.Web\\DataUsers\\RSourceCode&quot;</span><br><span class=\"line\">                 UseShellExecute = false,</span><br><span class=\"line\">                 RedirectStandardOutput = true,</span><br><span class=\"line\">                 RedirectStandardError = true,</span><br><span class=\"line\">                 Arguments = &quot; Test.r &quot; + string.Join(&quot; &quot;, arguments),</span><br><span class=\"line\">                 CreateNoWindow = true,//不显示程序窗口</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">         cmd.Start();//启动程序</span><br><span class=\"line\">         var output = cmd.StandardOutput.ReadToEnd();</span><br><span class=\"line\">         var error = cmd.StandardError.ReadToEnd();</span><br><span class=\"line\">         cmd.WaitForExit();//等待控制台程序执行完成</span><br><span class=\"line\">cmd.Close();//关闭该进程</span><br><span class=\"line\">         Logger.InfoFormat($&quot;参数：&#123;output&#125;出错信息:&#123;error&#125;&quot;);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！</p>\n<blockquote>\n<p>使用的类库是  RDotNet   ,开源地址：<a href=\"https://github.com/jmp75/rdotnet\" target=\"_blank\" rel=\"noopener\">R.NET</a><br>他有官网的：<a href=\"https://jmp75.github.io/rdotnet/\" target=\"_blank\" rel=\"noopener\">对R.NET的一些介绍</a> ，这个可能需要翻墙。</p>\n</blockquote>","more":"<p>我找了很多博客，在CSDN上的代码，基本都是重复的，也没有太多的介绍，一般情况都是官网直接翻译下来的，遇到一些问题时，根本查不到是什么原因。<br>那么，遇到问题，怎么办？<br>1、看官网，里面有一些示例的链接：<a href=\"https://github.com/jmp75/rdotnet-onboarding\" target=\"_blank\" rel=\"noopener\">这个相当于示例代码库</a><br>2、看github上，开源地址的Issue，看不懂英语，也要看，有些问题，看完你就会懂了。</p>\n<p>R.NET是什么？</p>\n<p>  我的理解，R语言就像是SQL语言，用于数据计算，数据处理。R.Net这个类库就类似ADO.NET的技术，帮助我们实现.NET程序访问R语言代码，R.NET就相当于一个驱动程序。当然，严格意义上，我也不知道RDotNet是不是这样子，看他介绍，应该是起一R引擎。。。。（不懂.jpg）</p>\n<p>使用RDotNet的步骤：<br>1、首先，你要看懂一些简单的R程序，就像，你不懂sql 语句，你怎么写ADO.NETt程序一样<br>（安装R的环境，不要装最新的3.5版本，因为，R.NET并没有做到最新的版本，看他的github就知道了，我本地装的3.3.3，一点问题都没有。如果你安装3.5版本，会一直报一个空指针异常，反正我被坑了。）<br>2、将我上面所说的示例代码库下载下来，从最简单的代码开始看起。</p>\n<h3 id=\"如下为开发过程中可能出现的问题！\"><a href=\"#如下为开发过程中可能出现的问题！\" class=\"headerlink\" title=\"如下为开发过程中可能出现的问题！\"></a>如下为开发过程中可能出现的问题！</h3><ul>\n<li>而我遇到什么样的问题呢？ 我是如何解决的？</li>\n<li>还有哪些问题需要解决？</li>\n<li>这个类库还有哪些问题不能解决，他有哪些缺点？</li>\n</ul>\n<p>回答上面的问题.</p>\n<h4 id=\"1-我遇到的问题。\"><a href=\"#1-我遇到的问题。\" class=\"headerlink\" title=\"1.我遇到的问题。\"></a>1.我遇到的问题。</h4><p>1）、安装过新的R环境3.5导致一直报错，一点思路都没有。<br>如何解决：看github的issue，看到有人提的问题，大意是指。R.NET不能支持到最新的R语言版本。<br>2）、一个简单的程序，在控制台上执行，是OK的。然而在ASP.NET MVC程序上一直不成功。<br>如何解决：第一步：先把R的环境变量配置好，类似JDK的环境变量配置<br>找到自己的R语言位置，将32位和64位的环境都配置至path中 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;C:\\Program Files\\R\\R-3.3.3\\bin\\i386;C:\\Program Files\\R\\R-3.3.3\\bin\\x64;</span><br></pre></td></tr></table></figure>\n\n<p>第二步，如何还有问题的话：比如一直报StackOverflowException的异常，建议你看他的issue:<a href=\"https://github.com/jmp75/rdotnet/issues/74\" target=\"_blank\" rel=\"noopener\">这个是他们的讨论</a><br>原本我也遇到这个问题，但R的版本用了3.3,就没这个错了。<br>3）、当R的引擎正常结束后，调用 dispose后，下次调用 就会报错，那就不调用 dispose方法吧。<br>那个作者说：There can only be one R engine in a process, and R itself is largely not thread-safe.</p>\n<h4 id=\"2-还有哪些问题需要解决？\"><a href=\"#2-还有哪些问题需要解决？\" class=\"headerlink\" title=\"2.还有哪些问题需要解决？\"></a>2.还有哪些问题需要解决？</h4><p>1)   以<strong>管理员权限</strong>运行Rgui,并指定包安装的位置，防止安装到其他目录<br>此命令设置当前包安装的位置，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.libPaths(&quot;C:/Program Files/R/R-3.3.3/library&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>此命令查看当前包会安装的位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.libPaths()</span><br></pre></td></tr></table></figure>\n\n<p>2) 如果有些包无法正常安装，如果能找到那个包，可直接复制其至目录C:/Program Files/R/R-3.3.3/library<br>3) 运行和发布后的代码都应运行在64位机子及平台上。</p>\n<h4 id=\"3-这个类库还有哪些问题不能解决，他有哪些缺点？\"><a href=\"#3-这个类库还有哪些问题不能解决，他有哪些缺点？\" class=\"headerlink\" title=\"3.这个类库还有哪些问题不能解决，他有哪些缺点？\"></a>3.这个类库还有哪些问题不能解决，他有哪些缺点？</h4><p>1) 不能兼容所有的R版本，目前只兼容到R3.3.3。<br>2) 如下代码在本机windows10 专业版 中文版电脑上运行会乱码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CharacterVector datFname = engine.CreateCharacter(&quot;我是中文&quot;);</span><br></pre></td></tr></table></figure>\n\n<p> 我研究下代码，是这个类中的方法有问题InternalString  下的方法 StringFromNativeUtf8<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Convert utf8 to string</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &lt;param name=&quot;utf8&quot;&gt;utf8 to convert&lt;/param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">public static string StringFromNativeUtf8(IntPtr utf8)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int len = 0;</span><br><span class=\"line\">    while (Marshal.ReadByte(utf8, len) != 0) ++len;</span><br><span class=\"line\">    byte[] buffer = new byte[len];</span><br><span class=\"line\">    Marshal.Copy(utf8, buffer, 0, buffer.Length);</span><br><span class=\"line\">    return Encoding.UTF8.GetString(buffer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我在我本地调试源码时，发现，如果包含中文时，采用Encoding.Default.GetString(buffer);转换，这里就可以正常转换，但这样子，就只支持中文和英文了。而且，好像在测试过程中，改成Default后，如下方法中包含中文，反而乱码了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string[] rownames = engine.GetSymbol(&quot;rownames&quot;).AsCharacter().ToArray();</span><br></pre></td></tr></table></figure>\n\n<p> 所以我准备直接用最简单的方式 ，判断buffer的编码，如果不为UTF8,Convert为UTF8，然后返回，否则，这里就需要多此一举，因为，在测试过程发现，判断UTF8，不准确，明明不是UTF8，还是返回了UTF8，所以在这里需要判断，转换后的数据是否包含中文，如果包含，则直接返回，否则要从Default（根据系统的编码决定），转换为UTF8，就能返回中文 。<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Convert utf8 to string</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">/// &lt;param name=&quot;utf8&quot;&gt;utf8 to convert&lt;/param&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">public static string StringFromNativeUtf8(IntPtr utf8)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int len = 0;</span><br><span class=\"line\">    while (Marshal.ReadByte(utf8, len) != 0) ++len;</span><br><span class=\"line\">    byte[] buffer = new byte[len];</span><br><span class=\"line\">    Marshal.Copy(utf8, buffer, 0, buffer.Length);</span><br><span class=\"line\">    Encoding encoding = GetType(buffer);</span><br><span class=\"line\">    if (encoding.Equals(Encoding.UTF8))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string r = Encoding.UTF8.GetString(buffer);</span><br><span class=\"line\">        if (System.Text.RegularExpressions.Regex.IsMatch(r, @&quot;[\\u4e00-\\u9fbb]+$&quot;))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            byte[] newBuffer = Encoding.Convert(Encoding.Default, Encoding.UTF8, buffer);</span><br><span class=\"line\">            return Encoding.UTF8.GetString(newBuffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        byte[] newBuffer = Encoding.Convert(encoding, Encoding.UTF8, buffer);</span><br><span class=\"line\">        return Encoding.UTF8.GetString(newBuffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>代码已放到github</strong></p>\n<blockquote>\n<p>由于该 <a href=\"https://github.com/jmp75/rdotnet\" target=\"_blank\" rel=\"noopener\">R.NET类库 </a>长期未维护，还是有很多BUG，所以我fork了一份，以便解决部分简单BUG问题， <a href=\"https://github.com/luoyunchong/rdotnet\" target=\"_blank\" rel=\"noopener\">github开源地址</a></p>\n</blockquote>\n<h3 id=\"相关博客介绍\"><a href=\"#相关博客介绍\" class=\"headerlink\" title=\"相关博客介绍\"></a>相关博客介绍</h3><ul>\n<li><a href=\"https://blog.csdn.net/clearskychan/article/details/53431535\" target=\"_blank\" rel=\"noopener\">用C#调用R语言开发.NET MVC Web服务</a> 此文章中介绍了.NET启动控制台调用R代码，这个思路非常好，一开始对R语言了解甚少，所以还是使用R.NET来实现.NET与R语言的交互，反而耗时耗力。</li>\n<li><a href=\"https://blog.csdn.net/wzgl__wh/article/details/77099903\" target=\"_blank\" rel=\"noopener\">一键运行R脚本</a> 这个文章让我了解到Rscript.exe这个程序的作用，以及执行方式。</li>\n</ul>\n<ul>\n<li><a href=\"https://blog.csdn.net/guoer9973/article/details/45953471\" target=\"_blank\" rel=\"noopener\">c#调用R语言（原创翻译）</a></li>\n</ul>\n<p>由于开发过程中，有个R程序运行时间非常长，最长可达2小时，所以只能以后台任务方式执行，但 RDotNET，一次只能运行一个，不执行完，其他的程序在WEB项目下无法正常运行，看了上面的文章，有了思路 ：使用.NET的进程Process起一个cmd命令，类似 java配置好环境变量后可使用java,javac命令一样，配置到Path中后，可直接在cmd中使用如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rscript.exe <span class=\"string\">\"某目录下\\test.R\"</span>  agruments</span><br></pre></td></tr></table></figure>\n\n<p>其中R程序包要有双引号   多个参数使用空格分隔 ，如下为.NET下使用Process启动cmd命令，并执行Rscript.exe 命令启动R引擎，让其后台运行，运行结束后，才会往后执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public void Execute()</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         List&lt;string&gt; arguments = new List&lt;string&gt;</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             参数</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">         Process cmd = new Process</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             StartInfo =</span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">                 FileName = @&quot;Rscript.exe&quot;,</span><br><span class=\"line\">                 WorkingDirectory = AppFolders.RSourceCodeFolder,//.R代码的位置 &quot;E:\\svn\\CHNMed\\CHNMed.Web\\DataUsers\\RSourceCode&quot;</span><br><span class=\"line\">                 UseShellExecute = false,</span><br><span class=\"line\">                 RedirectStandardOutput = true,</span><br><span class=\"line\">                 RedirectStandardError = true,</span><br><span class=\"line\">                 Arguments = &quot; Test.r &quot; + string.Join(&quot; &quot;, arguments),</span><br><span class=\"line\">                 CreateNoWindow = true,//不显示程序窗口</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;;</span><br><span class=\"line\">         cmd.Start();//启动程序</span><br><span class=\"line\">         var output = cmd.StandardOutput.ReadToEnd();</span><br><span class=\"line\">         var error = cmd.StandardError.ReadToEnd();</span><br><span class=\"line\">         cmd.WaitForExit();//等待控制台程序执行完成</span><br><span class=\"line\">cmd.Close();//关闭该进程</span><br><span class=\"line\">         Logger.InfoFormat($&quot;参数：&#123;output&#125;出错信息:&#123;error&#125;&quot;);</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 22:47:07 GMT+0800 (GMT+08:00)","title":"记一次.NET 与R语言交互","path":"2018/07/03/ABP/记一次.NET 与R语言交互/","eyeCatchImage":null,"excerpt":"<p>项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！</p>\n<blockquote>\n<p>使用的类库是  RDotNet   ,开源地址：<a href=\"https://github.com/jmp75/rdotnet\" target=\"_blank\" rel=\"noopener\">R.NET</a><br>他有官网的：<a href=\"https://jmp75.github.io/rdotnet/\" target=\"_blank\" rel=\"noopener\">对R.NET的一些介绍</a> ，这个可能需要翻墙。</p>\n</blockquote>","date":"2018-07-02T16:50:27.000Z","pv":0,"totalPV":0,"categories":".NET Framework","tags":["ABP",".NET Framework","R.NET"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ABP使用文档","date":"2019-03-12T06:40:26.000Z","description":"旧项目使用ABP框架时，.NET Framework下通用文档，最基础的类，服务，接口等。","_content":"## 具体入门与开发原理可参考此地址\nhttps://blog.csdn.net/wulex/article/category/7256369/3\n\n## abp入门系列\nhttps://www.jianshu.com/p/a6e9ace79345\n\n我们以通知公告为示例\n1. 首先我们有一个公告信息的表结构，如下，像是否删除、新增时间等七个字段只需要继承FullAuditedEntity类即可\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n项目目录位置，在Domain/Plat建立NoticeItems目录，以类+s设置文件夹。\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-0c0a238c497178ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nTelSCode.Domain.Plat.NoticeItems 此命名空间下的类如下，\n\n```\n public class NoticeItem : FullAuditedEntity\n    {\n        /// <summary>\n        /// 公告类别ID\n        /// </summary>\n        [StringLength(50)]\n        public string BaseItemId { get; set; }\n        /// <summary>\n        /// 标题\n        /// </summary>\n        [StringLength(100)]\n        public string Title { get; set; }\n        /// <summary>\n        /// 内容 \n        /// </summary>\n        public string Content { get; set; }\n        /// <summary>\n        ///  打开次数\n        /// </summary>\n        public int Times { get; set; }\n        /// <summary>\n        /// 新增人姓名\n        /// </summary>\n\n        [StringLength(50)]\n        public string CreationUserName { get; set; }\n        /// <summary>\n        /// 部门\n        /// </summary>\n        [StringLength(50)]\n        public string DepName { get; set; }\n        /// <summary>\n        /// 是否置顶\n        /// </summary>\n\n        public bool IsTop { get; set; }\n\n        /// <summary>\n        /// 置顶时间\n        /// </summary>\n        public DateTime? TopTime { get; set; }\n        /// <summary>\n        /// 发布时间\n        /// </summary>\n        public DateTime? DeployTime { get; set; }\n        public bool IsImg { get; set; }\n        /// <summary>\n        /// 状态\n        /// </summary>\n        public string Status { get; set; }\n        /// <summary>\n        /// 图片地址\n        /// </summary>\n        public string ImgUrl { get; set; }\n        /// <summary>\n        /// 附件地址\n        /// </summary>\n        public string FileUrl { get; set; }\n\n        /// <summary>\n        /// 阅读量+1\n        /// </summary>\n        public void NewlyTimes()\n        {\n            this.Times++;\n        }\n\n    }\n```\n\n在此文件夹下把相关权限配置好\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-00a6d4607e89e9fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n具体配置如下\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-310610af5219023f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n数据以树的形式存放，公告信息这个菜单放到基础资料管理下，TypeCode为permission时，在菜单下不展示，是菜单下的权限配置，EnCode不能出现重复值,修改菜单时应在此位置修改对应的文字与排序方式、地址。如果是图标，将不自动更新。\n\n```\nnew SysMenu {  DisplayName = \"公告信息管理\", Icon = \"icon-standard-date-add\", EnCode = \"Plat.NoticeItem\", LinkUrl = \"/Plat/NoticeItem/Index\", TypeCode = menu, SortCode = 20 ,\nChildrens = new List<SysMenu>()\n{\nnew SysMenu { DisplayName = \"新增公告\", EnCode = \"Plat.NoticeItem.Add\", TypeCode = permission, SortCode = 1 },\n    new SysMenu { DisplayName = \"编辑公告\", EnCode = \"Plat.NoticeItem.Edit\", TypeCode = permission, SortCode = 2},\n    new SysMenu { DisplayName = \"删除公告\", EnCode = \"Plat.NoticeItem.Delete\", TypeCode = permission, SortCode = 3 },\n    new SysMenu { DisplayName = \"公告列表\", EnCode = \"Plat.NoticeItem.GetGrid\", TypeCode = permission, SortCode = 4 }\n}\n}\n```\n然后在EntityFramework的TelSCodeDbContext中增加一行 \n```\n        public virtual IDbSet<NoticeItem> NoticeItem { get; set; }\n```\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-67a14080bf65ca46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在Application的Plat区域增加NoticeItems文件夹，我们以类名后缀加s建立文件夹，\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-d8352c0d3dcaff33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nNoticeItemInput.cs文件夹，一般情况下只需要将NoticeItem中的字段复制过来即可\n```\n   [AutoMap(typeof(NoticeItem))]\n    public class NoticeItemInput : EntityDto\n    {\n        public string BaseItemId { get; set; }\n        [StringLength(100,ErrorMessage = \"标题仅限100个字符\")]\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public int Times { get; set; }\n        public string CreationUserName { get; set; }\n        public string DepName { get; set; }\n        public bool IsTop { get; set; }\n        public bool IsImg { get; set; }\n        public string Status { get; set; }\n        public string ImgUrl { get; set; }\n        public string FileUrl { get; set; }\n        public DateTime? TopTime { get; set; }\n        public DateTime? DeployTime { get; set; }\n    }\n```\nNoticeItemListDto 为列表上展示的数据字段\n```\n    [AutoMapFrom(typeof(NoticeItem))]\n    public class NoticeItemListDto : EntityDto, IHasCreationTime\n    {\n        public string BaseItemId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public int Times { get; set; }\n        /// <summary>\n        /// 回复次数\n        /// </summary>\n        public int CommentTimes { get; set; }\n        public string CreationUserName { get; set; }\n        public DateTime CreationTime { get; set; }\n\n        public DateTime? DeployTime { get; set; }\n\n        public bool IsTop { get; set; }\n        public string StatusCode { get; set; }\n    }\n```\nNoticeItemSearchDto为查询条件，继承PageDto即可，需要增加查询条件，则在此类中增加对应的属性。\n```\n    public class NoticeItemSearchDto : PageDto\n    {\n        public string BaseItemEnCode { get; set; }\n        public string Title { get; set; }\n    }\n```\nINoticeItemAppService .cs文件 夹\n~~~\n    public interface INoticeItemAppService : IUsualCrudAppService<NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int>\n    {\n\n    }\n~~~\nNoticeItemAppService.cs文件，一般情况下，此类继承UsualCrudAppService，继承接口INoticeItemAppService，即可拥有增、删、改、查的功能，如果想自定义查询实现，需要重写父类的CreateFilteredQuery方法，由于公告信息中业务要求，有置顶和置顶时间字段，需要根据最后置顶的时间倒序取数据，所以GetGridByCondition方法需要override下，即可解决，权限配置包括二部分，一种是给父类继承的UsualCurdAppService传相应的权限编码，分别：\n```\nbase.DeletePermissionName=\"Plat.NoticeItem.Delete\";\n base.CreatePermissionName = \"Plat.NoticeItem.Add\";\nbase.UpdatePermissionName = \"Plat.NoticeItem.Edit\";\n```\n在方法名上使用此权限属性配置该方法对应的权限信息。\n```\n     [AbpAuthorize(\"Plat.NoticeItem.GetGrid\")]\n```\n调用 base.CreateOrUpdate方法时，即会判断用户是否有Plat.NoticeItem.Add权限\n```\n  public class NoticeItemAppService : UsualCrudAppService<NoticeItem, NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int>, INoticeItemAppService\n    {\n\n        #region 构造函数\n        private readonly IRepository<NoticeItem> _noticeItemRepository;\n        private RoleManager RoleManager;\n        private readonly ISqlExecuter _iSqlExecuter;\n        public NoticeItemAppService(IRepository<NoticeItem> noticeItemRepository, ISqlExecuter iSqlExecuter, RoleManager roleManager) : base(noticeItemRepository)\n        {\n            this._noticeItemRepository = noticeItemRepository;\n            _iSqlExecuter = iSqlExecuter;\n            RoleManager = roleManager;\n            base.DeletePermissionName = \"Plat.NoticeItem.Delete\";\n            base.CreatePermissionName = \"Plat.NoticeItem.Add\";\n            base.UpdatePermissionName = \"Plat.NoticeItem.Edit\";\n        }\n        #endregion\n\n        public override async Task CreateOrUpdate(NoticeItemInput input)\n        {\n            if (input.IsTop)\n            {\n                input.TopTime = DateTime.Now;\n            }\n            else\n            {\n                input.TopTime = null;\n            }\n\n            if (input.Status == StatusCode.Submit.ToString())\n            {\n                input.DeployTime = DateTime.Now;\n            }\n            await base.CreateOrUpdate(input);\n        }\n\n        protected override IQueryable<NoticeItem> CreateFilteredQuery(NoticeItemSearchDto input)\n        {\n            return base.CreateFilteredQuery(input)\n                .WhereIf(!string.IsNullOrWhiteSpace(input.Title), m => m.Title.Contains(input.Title));\n        }\n\n        [AbpAuthorize(\"Plat.NoticeItem.GetGrid\")]\n        public override EasyUiListResultDto<NoticeItemInput> GetGridByCondition(NoticeItemSearchDto input)\n        {\n            var rows = this.CreateFilteredQuery(input).OrderBy(r => r.IsTop).PageEasyUiBy(input).OrderByDescending(r => r.TopTime).MapTo<List<NoticeItemInput>>();\n\n            return new EasyUiListResultDto<NoticeItemInput>(input.Total, rows);\n        }\n```\nNoticeItemController.cs 此类注入IAbpFileManager 去解析保存的文件，供前台编辑页面时使用。\n```\n\n    public class NoticeItemController : TelSCodeControllerBase\n    {\n        #region 构造函数\n        private readonly INoticeItemAppService _noticeitemAppService;\n        private readonly IAbpFileManager _abpFileManager;\n        public NoticeItemController(INoticeItemAppService noticeitemAppService, IAbpFileManager abpFileManager)\n        {\n            this._abpFileManager = abpFileManager;\n            this._noticeitemAppService = noticeitemAppService;\n        }\n        #endregion\n\n        #region 视图\n        public ActionResult Index()\n        {\n            return View();\n        }\n\n        [AbpMvcAuthorize(\"Plat.NoticeItem.Add\", \"Plat.NoticeItem.Edit\")]\n        public ActionResult CreateOrUpdateModal()\n        {\n            return View();\n        }\n   \n        #region 数据\n        public async Task<JsonResult> GetInfoForEdit(int id)\n        {\n            var output = await _noticeitemAppService.GetInfoForEdit(id);\n\n            if (id == 0)\n            {\n                output.CreationUserName = AbpSession.GetLoginName();\n            }\n\n            NoticeItemViewModel noticeItemViewModel = new NoticeItemViewModel(\n                  _abpFileManager.GetFileOutput(output.FileUrl),\n                  _abpFileManager.GetFileOutput(output.ImgUrl),\n                  output\n                );\n\n            return Json(noticeItemViewModel);\n        }\n\n        [AbpMvcAuthorize(\"Plat.NoticeItem.GetGrid\")]\n        public JsonResult GetGridByCondition(NoticeItemSearchDto input)\n        {\n            var gridData = _noticeitemAppService.GetGridByCondition(input);\n            return Json(gridData);\n        }\n\n        #endregion\n    }\n```\n公告信息因为有文件上传，所以需要新建一个NoticeItemViewModel 类\n在TelSCode.Web中Plat区域Models新建文件夹NoticeItems，新建类NoticeItemViewModel.cs\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-c99897c2255cd117.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n   [AutoMapFrom(typeof(NoticeItemInput))]\n    public class NoticeItemViewModel : NoticeItemInput\n    {\n        public List<AbpFileOutput> AbpFileOutput { get; set; }\n        public List<AbpFileOutput> AbpImgFileOutput { get; set; }\n        public NoticeItemViewModel(List<AbpFileOutput> fileUrlOutputs, List<AbpFileOutput> imgFileUrlOutputs, NoticeItemInput noticeItemInput)\n        {\n            AbpFileOutput = fileUrlOutputs;\n            AbpImgFileOutput = imgFileUrlOutputs;\n\n            noticeItemInput.MapTo(this);\n        }\n    }\n\n```\n\n接下来是界面，新增编辑在一个界面中，一个页面对应一个js，使用@Html.InCludeScript引用，不会有缓存问题，发布之后会生成版本号。\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-4934ca2974d14475.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nIndex.cshtml\n\n```\n@using Abp.Web.Mvc.Extensions\n@{\n    ViewBag.Title = \"通知公告\";\n}\n\n@section scripts{\n    @Html.IncludeScript(\"~/bower_components/webuploader/webuploader.min.js\")\n    @Html.IncludeScript(\"~/bower_components/staticfile/libs/abp.webuploader.js\")\n    @Html.IncludeScript(\"~/bower_components/wangEditor/wangEditor.min.js\")\n    @Html.IncludeScript(\"~/bower_components/wangEditor/wangEditor-plugin.js\")\n\n\n    <script>\n        var gridUI = gridUI ||\n            {\n                BaseItemEnCode: $.util.request['name'] == undefined ? \"\" : $.util.request['name']\n            };\n    </script>\n\n    @Html.IncludeScript(\"~/Areas/Plat/Views/NoticeItem/Index.js\")\n\n}\n\n@section styles{\n    <link href=\"~/bower_components/webuploader/webuploader.css\" rel=\"stylesheet\" />\n    <link href=\"~/bower_components/wangEditor/wangEditor-plugin.css\" rel=\"stylesheet\" />\n    @Html.IncludeStyle(\"~/Areas/Plat/Views/NoticeItem/Index.js\")\n}\n\n<div class=\"easyui-layout\" data-options=\"fit:true\">\n    <div data-options=\"region:'north',border:false\" style=\"height: 54px; overflow: hidden;\">\n        <form id=\"searchForm\">\n            <table class=\"kv-table no-border\">\n                <tr>\n                    <th class=\"kv-label\" style=\"text-align:center\">标题</th>\n                    <td class=\"kv-content\">\n                        <input name=\"Title\" id=\"Title\" class=\"easyui-textbox\" />\n                        <a href=\"javascript:void(0);\" class=\"easyui-linkbutton\" data-options=\"iconCls:'icon-search'\" onclick=\"com.filter('#searchForm', '#dgGrid');\">查询</a>\n                        <a href=\"javascript:void(0);\" class=\"easyui-linkbutton\" data-options=\"iconCls:'icon-undo'\" onclick=\"com.clear('#searchForm', '#dgGrid')\">清空</a>\n                    </td>\n                </tr>\n            </table>\n        </form>\n    </div>\n    <div data-options=\"region:'center',border:false\">\n        <table id=\"dgGrid\"></table>\n    </div>\n</div>\n```\n\n同目录下建一个Index.js ，我们使用闭包的形式来组织代码结构，将可配置项放在了上面，不强制要求，这里只为方便修改。使用时，将NoticeItem替换相应的类名，noticeServcice替换成相应的xxxservcie。abp.services.app.noticeItem中的noticeItem中n是首字母变成小写，这是后台生成的service，要按照此规定使用。\n```\nvar gridUI = gridUI || {};\n(function () {\n    var noticeService = abp.services.app.noticeItem;\n    var gridUrl = '/Plat/NoticeItem/GetGridByCondition?BaseItemEnCode=' + gridUI.BaseItemEnCode;\n    var editModalUrl = '/Plat/NoticeItem/CreateOrUpdateModal';\n    var readModalUrl = '/Plat/NoticeItem/ReadModal';\n    var dgGrid, dgGridId = \"#dgGrid\";\n\n    $.extend(gridUI,\n        {\n            loadGrid: function () {\n                var baseEnCode = 'Plat.NoticeItem.';\n\n                var toolbar = [{ text: \"刷新\", iconCls: \"icon-reload\", handler: function () { com.btnRefresh(dgGridId); } },\n                { text: \"新增\", EnCode: baseEnCode + 'Add', iconCls: \"icon-add\", handler: gridUI.btnAdd },\n                { text: \"编辑\", EnCode: baseEnCode + 'Edit', iconCls: \"icon-edit\", handler: gridUI.btnEdit },\n                { text: \"删除\", EnCode: baseEnCode + 'Delete', iconCls: \"icon-remove\", handler: gridUI.btnDelete }];\n                toolbar = com.authorizeButton(toolbar);\n                if (gridUI.BaseItemEnCode != \"\") {\n                    toolbar = [];\n                }\n\n                dgGrid = $(dgGridId).datagrid({\n                    url: gridUrl,\n                    toolbar: toolbar,\n                    columns: [[\n                        {\n                            field: 'Id', title: '查看', width: 20, align: 'center', formatter: function (value, row) {\n                                return String.format('<button class=\"btn btn-default btn-xs\" type=\"button\" onclick=\"gridUI.showDetails(\\'{0}\\')\"><i class=\"fa fa-search\"></i></button>', value);\n                            }\n                        },\n                        { field: 'Title', title: '标题', width: 80 },\n                        {\n                            field: 'BaseItemId', title: '类别', width: 80, formatter: function (value) {\n                                if (top.clients.dataItems['NoticeItem']) {\n                                    return top.clients.dataItems['NoticeItem'][value];\n                                } else {\n                                    return '';\n                                }\n                            }\n                        },\n                        { field: 'CreationUserName', title: '发布人姓名', width: 160 },\n                        { field: 'IsTop', title: '是否置顶', width: 50, formatter: com.formatYes },\n                        {\n                            field: 'Status', title: '状态', width: 50, formatter: function (value) {\n                                var objMsg = {\n                                    \"primary\": {\n                                        text: \"发布\",\n                                        'case': ['Submit']\n                                    },\n                                    \"info\": {\n                                        text: \"暂存\",\n                                        'case': ['TempSave']\n                                    }\n                                };\n                                return com.formatMsg(value, objMsg);\n                            }\n                        }\n                    ]]\n                });\n            },\n            editInfo: function (title, icon, id) {\n                var pDialog = com.dialog({\n                    title: title,\n                    width: '100%',\n                    height: '100%',\n                    href: editModalUrl,\n                    iconCls: icon,\n                    buttons: [\n                        {\n                            text: '发布',\n                            iconCls: 'icon-ok',\n                            handler: function () {\n                                gridUI.submit(pDialog, \"Submit\");\n                            }\n                        }, {\n                            text: '暂存',\n                            iconCls: 'icon-save',\n                            handler: function () {\n                                gridUI.submit(pDialog, \"TempSave\");\n                            }\n\n                        }\n                    ],\n                    onLoad: function () {\n                        editUI.setForm(id);\n                    }\n                });\n            },\n            showDetails: function (id) {\n                com.dialog({\n                    title: \"详情\",\n                    width: 1500,\n                    height: 800,\n                    href: readModalUrl,\n                    queryParams: {\n                        id: id\n                    }\n                });\n            },\n            btnAdd: function () {\n                gridUI.editInfo('新增公告', 'icon-add');\n            },\n            btnEdit: function () {\n                com.edit(dgGridId, function (id) {\n                    gridUI.editInfo(\"编辑公告\", 'icon-edit', id);\n                });\n            },\n            btnDelete: function () {\n                com.deleted(noticeService, dgGridId);\n            },\n            submit: function (pDialog, status) {\n                var f = $(\"#editForm\");\n                var isValid = f.form('validate');\n                if (!isValid) {\n                    return;\n                }\n\n                var objForm = f.formSerialize();\n                objForm.Content = editor.txt.html();\n                objForm.Status = status;\n\n                com.setBusy(pDialog, true);\n                noticeService.createOrUpdate(objForm, { showMsg: true })\n                    .done(function () {\n                        com.btnRefresh();\n                        pDialog.dialog('close');\n                    })\n                    .always(function () {\n                        com.setBusy(pDialog, false);\n                    });\n            }\n        });\n\n    $(function () {\n        gridUI.loadGrid();\n    });\n\n})();\n\n```\nCreateOrUpdate.cshtml\n\n```\n@using Abp.Web.Mvc.Extensions\n@{\n    Layout = null;\n    ViewBag.Title = \"通知公告管理\";\n}\n@Html.IncludeScript(\"/Areas/Plat/Views/NoticeItem/CreateOrUpdateModal.js\")\n<div class=\"layui-layer-content\">\n    <form id=\"editForm\">\n        <table class=\"kv-table\">\n            <tr>\n                <th class=\"kv-label\"><span class=\"red\">*</span>标题</th>\n                <td class=\"kv-content\" colspan=\"3\">\n                    <input id=\"Title\" name=\"Title\" type=\"text\" class=\"easyui-textbox\" data-options=\"required:true\" style=\"width:569px\" />\n                    <input id=\"Id\" name=\"Id\" type=\"hidden\" />\n                    <input type=\"hidden\" id=\"CreationUserName\" name=\"CreationUserName\" />\n                    <input type=\"hidden\" name=\"BaseItemCode\" value=\"\" />\n                </td>\n            </tr>\n            <tr>\n                <th class=\"kv-label\">置顶</th>\n                <td class=\"kv-content\" style=\"width:215px\">\n                    <input name=\"IsTop\" id=\"IsTop\" class=\"easyui-switchbutton\">\n                </td>\n                <th class=\"kv-label\">公告类别</th>\n                <td class=\"kv-content\">\n                    <input name=\"BaseItemId\" id=\"BaseItemId\" />\n                </td>\n            </tr>\n            <tr>\n                <th>附件</th>\n                <td colspan=\"3\">\n                    <div id=\"fileUrl\"></div>\n                </td>\n            </tr>\n            @*<tr>\n                    <th class=\"kv-label\">是否图片新闻</th>\n                    <td class=\"kv-content\" colspan=\"3\">\n                        <input name=\"IsImg\" id=\"IsImg\" class=\"easyui-switchbutton\">\n                    </td>\n                </tr>*@\n            <tr id=\"IsImgNews\">\n                <th>上传图片</th>\n                <td colspan=\"3\">\n                    <input name=\"IsImg\" id=\"IsImg\" type=\"hidden\" value=\"true\">\n                    <div id=\"imgUrl\" style=\"position: relative;\"></div>\n                </td>\n            </tr>\n            <tr>\n                <th class=\"kv-label\">内容</th>\n                <td class=\"kv-content\" colspan=\"3\">\n                    <div id=\"Content\" style=\"position: relative;\"></div>\n                </td>\n            </tr>\n        </table>\n    </form>\n</div>\n```\nCreateOrUpdate.js\n```\nvar Img;\nvar editor;\nvar editUI = {\n    setForm: function (id) {\n\n        var E = window.wangEditor;\n        editor = new E('#Content');\n        editor.customConfig = com.editor.customConfig;\n        editor.create();\n        E.plugins.init({\n            elem: '#Content',\n            plugins: ['fullscreen']\n        });\n\n\n        //实例化文件上传\n        $(\"#imgUrl\").powerWebUpload({\n            uploadType: 'img'\n        });\n        $(\"#fileUrl\").powerWebUpload();\n\n        $('#BaseItemId').combobox({\n            url: com.baseUrl + '/baseItem/GetComBoJson?enCode=NoticeItem',\n            required: true,\n            validType: \"comboxValidate['请选择公告类别']\"\n        });\n\n        //function changeIsImg(checked) {\n        //    if (checked) {\n        //        $('#IsImgNews').css('display', '');\n        //    } else {\n        //        $('#IsImgNews').css('display', 'none');\n        //    }\n        //}\n\n        //$('#IsImg').switchbutton({\n        //    onChange: function (checked) {\n        //        changeIsImg(checked);\n        //    }\n        //});\n\n        com.setForm(id, function (data) {\n            var f = $(\"#editForm\");\n            if (id) {\n                setTimeout(function () {\n                    editor.txt.html(data.Content);\n                }, 666);\n            }\n\n\n\n            webuploader.loadFile({\n                elem: '#imgUrl',\n                rows: data.AbpImgFileOutput\n            });\n\n            webuploader.loadFile({\n                elem: '#fileUrl',\n                rows: data.AbpFileOutput\n            });\n            com.loadSwithButton($('.layui-layer-content'), data);\n            //changeIsImg(data.IsImg);\n        });\n    }\n}\n```\n\n","source":"_posts/ABP/ABP使用文档.md","raw":"---\ntitle: ABP使用文档\ndate: 2019-03-12 14:40:26\ntags: ABP\ndescription: 旧项目使用ABP框架时，.NET Framework下通用文档，最基础的类，服务，接口等。\ncategory:\n- ABP\n---\n## 具体入门与开发原理可参考此地址\nhttps://blog.csdn.net/wulex/article/category/7256369/3\n\n## abp入门系列\nhttps://www.jianshu.com/p/a6e9ace79345\n\n我们以通知公告为示例\n1. 首先我们有一个公告信息的表结构，如下，像是否删除、新增时间等七个字段只需要继承FullAuditedEntity类即可\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n项目目录位置，在Domain/Plat建立NoticeItems目录，以类+s设置文件夹。\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-0c0a238c497178ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nTelSCode.Domain.Plat.NoticeItems 此命名空间下的类如下，\n\n```\n public class NoticeItem : FullAuditedEntity\n    {\n        /// <summary>\n        /// 公告类别ID\n        /// </summary>\n        [StringLength(50)]\n        public string BaseItemId { get; set; }\n        /// <summary>\n        /// 标题\n        /// </summary>\n        [StringLength(100)]\n        public string Title { get; set; }\n        /// <summary>\n        /// 内容 \n        /// </summary>\n        public string Content { get; set; }\n        /// <summary>\n        ///  打开次数\n        /// </summary>\n        public int Times { get; set; }\n        /// <summary>\n        /// 新增人姓名\n        /// </summary>\n\n        [StringLength(50)]\n        public string CreationUserName { get; set; }\n        /// <summary>\n        /// 部门\n        /// </summary>\n        [StringLength(50)]\n        public string DepName { get; set; }\n        /// <summary>\n        /// 是否置顶\n        /// </summary>\n\n        public bool IsTop { get; set; }\n\n        /// <summary>\n        /// 置顶时间\n        /// </summary>\n        public DateTime? TopTime { get; set; }\n        /// <summary>\n        /// 发布时间\n        /// </summary>\n        public DateTime? DeployTime { get; set; }\n        public bool IsImg { get; set; }\n        /// <summary>\n        /// 状态\n        /// </summary>\n        public string Status { get; set; }\n        /// <summary>\n        /// 图片地址\n        /// </summary>\n        public string ImgUrl { get; set; }\n        /// <summary>\n        /// 附件地址\n        /// </summary>\n        public string FileUrl { get; set; }\n\n        /// <summary>\n        /// 阅读量+1\n        /// </summary>\n        public void NewlyTimes()\n        {\n            this.Times++;\n        }\n\n    }\n```\n\n在此文件夹下把相关权限配置好\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-00a6d4607e89e9fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n具体配置如下\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-310610af5219023f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n数据以树的形式存放，公告信息这个菜单放到基础资料管理下，TypeCode为permission时，在菜单下不展示，是菜单下的权限配置，EnCode不能出现重复值,修改菜单时应在此位置修改对应的文字与排序方式、地址。如果是图标，将不自动更新。\n\n```\nnew SysMenu {  DisplayName = \"公告信息管理\", Icon = \"icon-standard-date-add\", EnCode = \"Plat.NoticeItem\", LinkUrl = \"/Plat/NoticeItem/Index\", TypeCode = menu, SortCode = 20 ,\nChildrens = new List<SysMenu>()\n{\nnew SysMenu { DisplayName = \"新增公告\", EnCode = \"Plat.NoticeItem.Add\", TypeCode = permission, SortCode = 1 },\n    new SysMenu { DisplayName = \"编辑公告\", EnCode = \"Plat.NoticeItem.Edit\", TypeCode = permission, SortCode = 2},\n    new SysMenu { DisplayName = \"删除公告\", EnCode = \"Plat.NoticeItem.Delete\", TypeCode = permission, SortCode = 3 },\n    new SysMenu { DisplayName = \"公告列表\", EnCode = \"Plat.NoticeItem.GetGrid\", TypeCode = permission, SortCode = 4 }\n}\n}\n```\n然后在EntityFramework的TelSCodeDbContext中增加一行 \n```\n        public virtual IDbSet<NoticeItem> NoticeItem { get; set; }\n```\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-67a14080bf65ca46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在Application的Plat区域增加NoticeItems文件夹，我们以类名后缀加s建立文件夹，\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-d8352c0d3dcaff33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nNoticeItemInput.cs文件夹，一般情况下只需要将NoticeItem中的字段复制过来即可\n```\n   [AutoMap(typeof(NoticeItem))]\n    public class NoticeItemInput : EntityDto\n    {\n        public string BaseItemId { get; set; }\n        [StringLength(100,ErrorMessage = \"标题仅限100个字符\")]\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public int Times { get; set; }\n        public string CreationUserName { get; set; }\n        public string DepName { get; set; }\n        public bool IsTop { get; set; }\n        public bool IsImg { get; set; }\n        public string Status { get; set; }\n        public string ImgUrl { get; set; }\n        public string FileUrl { get; set; }\n        public DateTime? TopTime { get; set; }\n        public DateTime? DeployTime { get; set; }\n    }\n```\nNoticeItemListDto 为列表上展示的数据字段\n```\n    [AutoMapFrom(typeof(NoticeItem))]\n    public class NoticeItemListDto : EntityDto, IHasCreationTime\n    {\n        public string BaseItemId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public int Times { get; set; }\n        /// <summary>\n        /// 回复次数\n        /// </summary>\n        public int CommentTimes { get; set; }\n        public string CreationUserName { get; set; }\n        public DateTime CreationTime { get; set; }\n\n        public DateTime? DeployTime { get; set; }\n\n        public bool IsTop { get; set; }\n        public string StatusCode { get; set; }\n    }\n```\nNoticeItemSearchDto为查询条件，继承PageDto即可，需要增加查询条件，则在此类中增加对应的属性。\n```\n    public class NoticeItemSearchDto : PageDto\n    {\n        public string BaseItemEnCode { get; set; }\n        public string Title { get; set; }\n    }\n```\nINoticeItemAppService .cs文件 夹\n~~~\n    public interface INoticeItemAppService : IUsualCrudAppService<NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int>\n    {\n\n    }\n~~~\nNoticeItemAppService.cs文件，一般情况下，此类继承UsualCrudAppService，继承接口INoticeItemAppService，即可拥有增、删、改、查的功能，如果想自定义查询实现，需要重写父类的CreateFilteredQuery方法，由于公告信息中业务要求，有置顶和置顶时间字段，需要根据最后置顶的时间倒序取数据，所以GetGridByCondition方法需要override下，即可解决，权限配置包括二部分，一种是给父类继承的UsualCurdAppService传相应的权限编码，分别：\n```\nbase.DeletePermissionName=\"Plat.NoticeItem.Delete\";\n base.CreatePermissionName = \"Plat.NoticeItem.Add\";\nbase.UpdatePermissionName = \"Plat.NoticeItem.Edit\";\n```\n在方法名上使用此权限属性配置该方法对应的权限信息。\n```\n     [AbpAuthorize(\"Plat.NoticeItem.GetGrid\")]\n```\n调用 base.CreateOrUpdate方法时，即会判断用户是否有Plat.NoticeItem.Add权限\n```\n  public class NoticeItemAppService : UsualCrudAppService<NoticeItem, NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int>, INoticeItemAppService\n    {\n\n        #region 构造函数\n        private readonly IRepository<NoticeItem> _noticeItemRepository;\n        private RoleManager RoleManager;\n        private readonly ISqlExecuter _iSqlExecuter;\n        public NoticeItemAppService(IRepository<NoticeItem> noticeItemRepository, ISqlExecuter iSqlExecuter, RoleManager roleManager) : base(noticeItemRepository)\n        {\n            this._noticeItemRepository = noticeItemRepository;\n            _iSqlExecuter = iSqlExecuter;\n            RoleManager = roleManager;\n            base.DeletePermissionName = \"Plat.NoticeItem.Delete\";\n            base.CreatePermissionName = \"Plat.NoticeItem.Add\";\n            base.UpdatePermissionName = \"Plat.NoticeItem.Edit\";\n        }\n        #endregion\n\n        public override async Task CreateOrUpdate(NoticeItemInput input)\n        {\n            if (input.IsTop)\n            {\n                input.TopTime = DateTime.Now;\n            }\n            else\n            {\n                input.TopTime = null;\n            }\n\n            if (input.Status == StatusCode.Submit.ToString())\n            {\n                input.DeployTime = DateTime.Now;\n            }\n            await base.CreateOrUpdate(input);\n        }\n\n        protected override IQueryable<NoticeItem> CreateFilteredQuery(NoticeItemSearchDto input)\n        {\n            return base.CreateFilteredQuery(input)\n                .WhereIf(!string.IsNullOrWhiteSpace(input.Title), m => m.Title.Contains(input.Title));\n        }\n\n        [AbpAuthorize(\"Plat.NoticeItem.GetGrid\")]\n        public override EasyUiListResultDto<NoticeItemInput> GetGridByCondition(NoticeItemSearchDto input)\n        {\n            var rows = this.CreateFilteredQuery(input).OrderBy(r => r.IsTop).PageEasyUiBy(input).OrderByDescending(r => r.TopTime).MapTo<List<NoticeItemInput>>();\n\n            return new EasyUiListResultDto<NoticeItemInput>(input.Total, rows);\n        }\n```\nNoticeItemController.cs 此类注入IAbpFileManager 去解析保存的文件，供前台编辑页面时使用。\n```\n\n    public class NoticeItemController : TelSCodeControllerBase\n    {\n        #region 构造函数\n        private readonly INoticeItemAppService _noticeitemAppService;\n        private readonly IAbpFileManager _abpFileManager;\n        public NoticeItemController(INoticeItemAppService noticeitemAppService, IAbpFileManager abpFileManager)\n        {\n            this._abpFileManager = abpFileManager;\n            this._noticeitemAppService = noticeitemAppService;\n        }\n        #endregion\n\n        #region 视图\n        public ActionResult Index()\n        {\n            return View();\n        }\n\n        [AbpMvcAuthorize(\"Plat.NoticeItem.Add\", \"Plat.NoticeItem.Edit\")]\n        public ActionResult CreateOrUpdateModal()\n        {\n            return View();\n        }\n   \n        #region 数据\n        public async Task<JsonResult> GetInfoForEdit(int id)\n        {\n            var output = await _noticeitemAppService.GetInfoForEdit(id);\n\n            if (id == 0)\n            {\n                output.CreationUserName = AbpSession.GetLoginName();\n            }\n\n            NoticeItemViewModel noticeItemViewModel = new NoticeItemViewModel(\n                  _abpFileManager.GetFileOutput(output.FileUrl),\n                  _abpFileManager.GetFileOutput(output.ImgUrl),\n                  output\n                );\n\n            return Json(noticeItemViewModel);\n        }\n\n        [AbpMvcAuthorize(\"Plat.NoticeItem.GetGrid\")]\n        public JsonResult GetGridByCondition(NoticeItemSearchDto input)\n        {\n            var gridData = _noticeitemAppService.GetGridByCondition(input);\n            return Json(gridData);\n        }\n\n        #endregion\n    }\n```\n公告信息因为有文件上传，所以需要新建一个NoticeItemViewModel 类\n在TelSCode.Web中Plat区域Models新建文件夹NoticeItems，新建类NoticeItemViewModel.cs\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-c99897c2255cd117.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n```\n   [AutoMapFrom(typeof(NoticeItemInput))]\n    public class NoticeItemViewModel : NoticeItemInput\n    {\n        public List<AbpFileOutput> AbpFileOutput { get; set; }\n        public List<AbpFileOutput> AbpImgFileOutput { get; set; }\n        public NoticeItemViewModel(List<AbpFileOutput> fileUrlOutputs, List<AbpFileOutput> imgFileUrlOutputs, NoticeItemInput noticeItemInput)\n        {\n            AbpFileOutput = fileUrlOutputs;\n            AbpImgFileOutput = imgFileUrlOutputs;\n\n            noticeItemInput.MapTo(this);\n        }\n    }\n\n```\n\n接下来是界面，新增编辑在一个界面中，一个页面对应一个js，使用@Html.InCludeScript引用，不会有缓存问题，发布之后会生成版本号。\n\n![image.png](https://upload-images.jianshu.io/upload_images/2001974-4934ca2974d14475.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nIndex.cshtml\n\n```\n@using Abp.Web.Mvc.Extensions\n@{\n    ViewBag.Title = \"通知公告\";\n}\n\n@section scripts{\n    @Html.IncludeScript(\"~/bower_components/webuploader/webuploader.min.js\")\n    @Html.IncludeScript(\"~/bower_components/staticfile/libs/abp.webuploader.js\")\n    @Html.IncludeScript(\"~/bower_components/wangEditor/wangEditor.min.js\")\n    @Html.IncludeScript(\"~/bower_components/wangEditor/wangEditor-plugin.js\")\n\n\n    <script>\n        var gridUI = gridUI ||\n            {\n                BaseItemEnCode: $.util.request['name'] == undefined ? \"\" : $.util.request['name']\n            };\n    </script>\n\n    @Html.IncludeScript(\"~/Areas/Plat/Views/NoticeItem/Index.js\")\n\n}\n\n@section styles{\n    <link href=\"~/bower_components/webuploader/webuploader.css\" rel=\"stylesheet\" />\n    <link href=\"~/bower_components/wangEditor/wangEditor-plugin.css\" rel=\"stylesheet\" />\n    @Html.IncludeStyle(\"~/Areas/Plat/Views/NoticeItem/Index.js\")\n}\n\n<div class=\"easyui-layout\" data-options=\"fit:true\">\n    <div data-options=\"region:'north',border:false\" style=\"height: 54px; overflow: hidden;\">\n        <form id=\"searchForm\">\n            <table class=\"kv-table no-border\">\n                <tr>\n                    <th class=\"kv-label\" style=\"text-align:center\">标题</th>\n                    <td class=\"kv-content\">\n                        <input name=\"Title\" id=\"Title\" class=\"easyui-textbox\" />\n                        <a href=\"javascript:void(0);\" class=\"easyui-linkbutton\" data-options=\"iconCls:'icon-search'\" onclick=\"com.filter('#searchForm', '#dgGrid');\">查询</a>\n                        <a href=\"javascript:void(0);\" class=\"easyui-linkbutton\" data-options=\"iconCls:'icon-undo'\" onclick=\"com.clear('#searchForm', '#dgGrid')\">清空</a>\n                    </td>\n                </tr>\n            </table>\n        </form>\n    </div>\n    <div data-options=\"region:'center',border:false\">\n        <table id=\"dgGrid\"></table>\n    </div>\n</div>\n```\n\n同目录下建一个Index.js ，我们使用闭包的形式来组织代码结构，将可配置项放在了上面，不强制要求，这里只为方便修改。使用时，将NoticeItem替换相应的类名，noticeServcice替换成相应的xxxservcie。abp.services.app.noticeItem中的noticeItem中n是首字母变成小写，这是后台生成的service，要按照此规定使用。\n```\nvar gridUI = gridUI || {};\n(function () {\n    var noticeService = abp.services.app.noticeItem;\n    var gridUrl = '/Plat/NoticeItem/GetGridByCondition?BaseItemEnCode=' + gridUI.BaseItemEnCode;\n    var editModalUrl = '/Plat/NoticeItem/CreateOrUpdateModal';\n    var readModalUrl = '/Plat/NoticeItem/ReadModal';\n    var dgGrid, dgGridId = \"#dgGrid\";\n\n    $.extend(gridUI,\n        {\n            loadGrid: function () {\n                var baseEnCode = 'Plat.NoticeItem.';\n\n                var toolbar = [{ text: \"刷新\", iconCls: \"icon-reload\", handler: function () { com.btnRefresh(dgGridId); } },\n                { text: \"新增\", EnCode: baseEnCode + 'Add', iconCls: \"icon-add\", handler: gridUI.btnAdd },\n                { text: \"编辑\", EnCode: baseEnCode + 'Edit', iconCls: \"icon-edit\", handler: gridUI.btnEdit },\n                { text: \"删除\", EnCode: baseEnCode + 'Delete', iconCls: \"icon-remove\", handler: gridUI.btnDelete }];\n                toolbar = com.authorizeButton(toolbar);\n                if (gridUI.BaseItemEnCode != \"\") {\n                    toolbar = [];\n                }\n\n                dgGrid = $(dgGridId).datagrid({\n                    url: gridUrl,\n                    toolbar: toolbar,\n                    columns: [[\n                        {\n                            field: 'Id', title: '查看', width: 20, align: 'center', formatter: function (value, row) {\n                                return String.format('<button class=\"btn btn-default btn-xs\" type=\"button\" onclick=\"gridUI.showDetails(\\'{0}\\')\"><i class=\"fa fa-search\"></i></button>', value);\n                            }\n                        },\n                        { field: 'Title', title: '标题', width: 80 },\n                        {\n                            field: 'BaseItemId', title: '类别', width: 80, formatter: function (value) {\n                                if (top.clients.dataItems['NoticeItem']) {\n                                    return top.clients.dataItems['NoticeItem'][value];\n                                } else {\n                                    return '';\n                                }\n                            }\n                        },\n                        { field: 'CreationUserName', title: '发布人姓名', width: 160 },\n                        { field: 'IsTop', title: '是否置顶', width: 50, formatter: com.formatYes },\n                        {\n                            field: 'Status', title: '状态', width: 50, formatter: function (value) {\n                                var objMsg = {\n                                    \"primary\": {\n                                        text: \"发布\",\n                                        'case': ['Submit']\n                                    },\n                                    \"info\": {\n                                        text: \"暂存\",\n                                        'case': ['TempSave']\n                                    }\n                                };\n                                return com.formatMsg(value, objMsg);\n                            }\n                        }\n                    ]]\n                });\n            },\n            editInfo: function (title, icon, id) {\n                var pDialog = com.dialog({\n                    title: title,\n                    width: '100%',\n                    height: '100%',\n                    href: editModalUrl,\n                    iconCls: icon,\n                    buttons: [\n                        {\n                            text: '发布',\n                            iconCls: 'icon-ok',\n                            handler: function () {\n                                gridUI.submit(pDialog, \"Submit\");\n                            }\n                        }, {\n                            text: '暂存',\n                            iconCls: 'icon-save',\n                            handler: function () {\n                                gridUI.submit(pDialog, \"TempSave\");\n                            }\n\n                        }\n                    ],\n                    onLoad: function () {\n                        editUI.setForm(id);\n                    }\n                });\n            },\n            showDetails: function (id) {\n                com.dialog({\n                    title: \"详情\",\n                    width: 1500,\n                    height: 800,\n                    href: readModalUrl,\n                    queryParams: {\n                        id: id\n                    }\n                });\n            },\n            btnAdd: function () {\n                gridUI.editInfo('新增公告', 'icon-add');\n            },\n            btnEdit: function () {\n                com.edit(dgGridId, function (id) {\n                    gridUI.editInfo(\"编辑公告\", 'icon-edit', id);\n                });\n            },\n            btnDelete: function () {\n                com.deleted(noticeService, dgGridId);\n            },\n            submit: function (pDialog, status) {\n                var f = $(\"#editForm\");\n                var isValid = f.form('validate');\n                if (!isValid) {\n                    return;\n                }\n\n                var objForm = f.formSerialize();\n                objForm.Content = editor.txt.html();\n                objForm.Status = status;\n\n                com.setBusy(pDialog, true);\n                noticeService.createOrUpdate(objForm, { showMsg: true })\n                    .done(function () {\n                        com.btnRefresh();\n                        pDialog.dialog('close');\n                    })\n                    .always(function () {\n                        com.setBusy(pDialog, false);\n                    });\n            }\n        });\n\n    $(function () {\n        gridUI.loadGrid();\n    });\n\n})();\n\n```\nCreateOrUpdate.cshtml\n\n```\n@using Abp.Web.Mvc.Extensions\n@{\n    Layout = null;\n    ViewBag.Title = \"通知公告管理\";\n}\n@Html.IncludeScript(\"/Areas/Plat/Views/NoticeItem/CreateOrUpdateModal.js\")\n<div class=\"layui-layer-content\">\n    <form id=\"editForm\">\n        <table class=\"kv-table\">\n            <tr>\n                <th class=\"kv-label\"><span class=\"red\">*</span>标题</th>\n                <td class=\"kv-content\" colspan=\"3\">\n                    <input id=\"Title\" name=\"Title\" type=\"text\" class=\"easyui-textbox\" data-options=\"required:true\" style=\"width:569px\" />\n                    <input id=\"Id\" name=\"Id\" type=\"hidden\" />\n                    <input type=\"hidden\" id=\"CreationUserName\" name=\"CreationUserName\" />\n                    <input type=\"hidden\" name=\"BaseItemCode\" value=\"\" />\n                </td>\n            </tr>\n            <tr>\n                <th class=\"kv-label\">置顶</th>\n                <td class=\"kv-content\" style=\"width:215px\">\n                    <input name=\"IsTop\" id=\"IsTop\" class=\"easyui-switchbutton\">\n                </td>\n                <th class=\"kv-label\">公告类别</th>\n                <td class=\"kv-content\">\n                    <input name=\"BaseItemId\" id=\"BaseItemId\" />\n                </td>\n            </tr>\n            <tr>\n                <th>附件</th>\n                <td colspan=\"3\">\n                    <div id=\"fileUrl\"></div>\n                </td>\n            </tr>\n            @*<tr>\n                    <th class=\"kv-label\">是否图片新闻</th>\n                    <td class=\"kv-content\" colspan=\"3\">\n                        <input name=\"IsImg\" id=\"IsImg\" class=\"easyui-switchbutton\">\n                    </td>\n                </tr>*@\n            <tr id=\"IsImgNews\">\n                <th>上传图片</th>\n                <td colspan=\"3\">\n                    <input name=\"IsImg\" id=\"IsImg\" type=\"hidden\" value=\"true\">\n                    <div id=\"imgUrl\" style=\"position: relative;\"></div>\n                </td>\n            </tr>\n            <tr>\n                <th class=\"kv-label\">内容</th>\n                <td class=\"kv-content\" colspan=\"3\">\n                    <div id=\"Content\" style=\"position: relative;\"></div>\n                </td>\n            </tr>\n        </table>\n    </form>\n</div>\n```\nCreateOrUpdate.js\n```\nvar Img;\nvar editor;\nvar editUI = {\n    setForm: function (id) {\n\n        var E = window.wangEditor;\n        editor = new E('#Content');\n        editor.customConfig = com.editor.customConfig;\n        editor.create();\n        E.plugins.init({\n            elem: '#Content',\n            plugins: ['fullscreen']\n        });\n\n\n        //实例化文件上传\n        $(\"#imgUrl\").powerWebUpload({\n            uploadType: 'img'\n        });\n        $(\"#fileUrl\").powerWebUpload();\n\n        $('#BaseItemId').combobox({\n            url: com.baseUrl + '/baseItem/GetComBoJson?enCode=NoticeItem',\n            required: true,\n            validType: \"comboxValidate['请选择公告类别']\"\n        });\n\n        //function changeIsImg(checked) {\n        //    if (checked) {\n        //        $('#IsImgNews').css('display', '');\n        //    } else {\n        //        $('#IsImgNews').css('display', 'none');\n        //    }\n        //}\n\n        //$('#IsImg').switchbutton({\n        //    onChange: function (checked) {\n        //        changeIsImg(checked);\n        //    }\n        //});\n\n        com.setForm(id, function (data) {\n            var f = $(\"#editForm\");\n            if (id) {\n                setTimeout(function () {\n                    editor.txt.html(data.Content);\n                }, 666);\n            }\n\n\n\n            webuploader.loadFile({\n                elem: '#imgUrl',\n                rows: data.AbpImgFileOutput\n            });\n\n            webuploader.loadFile({\n                elem: '#fileUrl',\n                rows: data.AbpFileOutput\n            });\n            com.loadSwithButton($('.layui-layer-content'), data);\n            //changeIsImg(data.IsImg);\n        });\n    }\n}\n```\n\n","slug":"ABP/ABP使用文档","published":1,"updated":"2019-06-25T15:27:50.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxcrmiv1003o00uxje8vshim","content":"<h2 id=\"具体入门与开发原理可参考此地址\"><a href=\"#具体入门与开发原理可参考此地址\" class=\"headerlink\" title=\"具体入门与开发原理可参考此地址\"></a>具体入门与开发原理可参考此地址</h2><p><a href=\"https://blog.csdn.net/wulex/article/category/7256369/3\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wulex/article/category/7256369/3</a></p>\n<h2 id=\"abp入门系列\"><a href=\"#abp入门系列\" class=\"headerlink\" title=\"abp入门系列\"></a>abp入门系列</h2><p><a href=\"https://www.jianshu.com/p/a6e9ace79345\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a6e9ace79345</a></p>\n<p>我们以通知公告为示例</p>\n<ol>\n<li>首先我们有一个公告信息的表结构，如下，像是否删除、新增时间等七个字段只需要继承FullAuditedEntity类即可</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>项目目录位置，在Domain/Plat建立NoticeItems目录，以类+s设置文件夹。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-0c0a238c497178ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>TelSCode.Domain.Plat.NoticeItems 此命名空间下的类如下，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NoticeItem : FullAuditedEntity</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 公告类别ID</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 标题</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(100)]</span><br><span class=\"line\">       public string Title &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 内容 </span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string Content &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       ///  打开次数</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public int Times &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 新增人姓名</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 部门</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string DepName &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 是否置顶</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 置顶时间</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public DateTime? TopTime &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 发布时间</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\">       public bool IsImg &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 状态</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string Status &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 图片地址</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string ImgUrl &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 附件地址</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string FileUrl &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 阅读量+1</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public void NewlyTimes()</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           this.Times++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在此文件夹下把相关权限配置好</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-00a6d4607e89e9fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>具体配置如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-310610af5219023f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>数据以树的形式存放，公告信息这个菜单放到基础资料管理下，TypeCode为permission时，在菜单下不展示，是菜单下的权限配置，EnCode不能出现重复值,修改菜单时应在此位置修改对应的文字与排序方式、地址。如果是图标，将不自动更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new SysMenu &#123;  DisplayName = &quot;公告信息管理&quot;, Icon = &quot;icon-standard-date-add&quot;, EnCode = &quot;Plat.NoticeItem&quot;, LinkUrl = &quot;/Plat/NoticeItem/Index&quot;, TypeCode = menu, SortCode = 20 ,</span><br><span class=\"line\">Childrens = new List&lt;SysMenu&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">new SysMenu &#123; DisplayName = &quot;新增公告&quot;, EnCode = &quot;Plat.NoticeItem.Add&quot;, TypeCode = permission, SortCode = 1 &#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;编辑公告&quot;, EnCode = &quot;Plat.NoticeItem.Edit&quot;, TypeCode = permission, SortCode = 2&#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;删除公告&quot;, EnCode = &quot;Plat.NoticeItem.Delete&quot;, TypeCode = permission, SortCode = 3 &#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;公告列表&quot;, EnCode = &quot;Plat.NoticeItem.GetGrid&quot;, TypeCode = permission, SortCode = 4 &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在EntityFramework的TelSCodeDbContext中增加一行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public virtual IDbSet&lt;NoticeItem&gt; NoticeItem &#123; get; set; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-67a14080bf65ca46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>在Application的Plat区域增加NoticeItems文件夹，我们以类名后缀加s建立文件夹，</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-d8352c0d3dcaff33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>NoticeItemInput.cs文件夹，一般情况下只需要将NoticeItem中的字段复制过来即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AutoMap(typeof(NoticeItem))]</span><br><span class=\"line\"> public class NoticeItemInput : EntityDto</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">     [StringLength(100,ErrorMessage = &quot;标题仅限100个字符&quot;)]</span><br><span class=\"line\">     public string Title &#123; get; set; &#125;</span><br><span class=\"line\">     public string Content &#123; get; set; &#125;</span><br><span class=\"line\">     public int Times &#123; get; set; &#125;</span><br><span class=\"line\">     public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">     public string DepName &#123; get; set; &#125;</span><br><span class=\"line\">     public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\">     public bool IsImg &#123; get; set; &#125;</span><br><span class=\"line\">     public string Status &#123; get; set; &#125;</span><br><span class=\"line\">     public string ImgUrl &#123; get; set; &#125;</span><br><span class=\"line\">     public string FileUrl &#123; get; set; &#125;</span><br><span class=\"line\">     public DateTime? TopTime &#123; get; set; &#125;</span><br><span class=\"line\">     public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemListDto 为列表上展示的数据字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AutoMapFrom(typeof(NoticeItem))]</span><br><span class=\"line\">public class NoticeItemListDto : EntityDto, IHasCreationTime</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">    public string Title &#123; get; set; &#125;</span><br><span class=\"line\">    public string Content &#123; get; set; &#125;</span><br><span class=\"line\">    public int Times &#123; get; set; &#125;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 回复次数</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public int CommentTimes &#123; get; set; &#125;</span><br><span class=\"line\">    public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">    public DateTime CreationTime &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\">    public string StatusCode &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemSearchDto为查询条件，继承PageDto即可，需要增加查询条件，则在此类中增加对应的属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NoticeItemSearchDto : PageDto</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string BaseItemEnCode &#123; get; set; &#125;</span><br><span class=\"line\">    public string Title &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>INoticeItemAppService .cs文件 夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface INoticeItemAppService : IUsualCrudAppService&lt;NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemAppService.cs文件，一般情况下，此类继承UsualCrudAppService，继承接口INoticeItemAppService，即可拥有增、删、改、查的功能，如果想自定义查询实现，需要重写父类的CreateFilteredQuery方法，由于公告信息中业务要求，有置顶和置顶时间字段，需要根据最后置顶的时间倒序取数据，所以GetGridByCondition方法需要override下，即可解决，权限配置包括二部分，一种是给父类继承的UsualCurdAppService传相应的权限编码，分别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base.DeletePermissionName=&quot;Plat.NoticeItem.Delete&quot;;</span><br><span class=\"line\"> base.CreatePermissionName = &quot;Plat.NoticeItem.Add&quot;;</span><br><span class=\"line\">base.UpdatePermissionName = &quot;Plat.NoticeItem.Edit&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>在方法名上使用此权限属性配置该方法对应的权限信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AbpAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br></pre></td></tr></table></figure>\n\n<p>调用 base.CreateOrUpdate方法时，即会判断用户是否有Plat.NoticeItem.Add权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NoticeItemAppService : UsualCrudAppService&lt;NoticeItem, NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int&gt;, INoticeItemAppService</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      #region 构造函数</span><br><span class=\"line\">      private readonly IRepository&lt;NoticeItem&gt; _noticeItemRepository;</span><br><span class=\"line\">      private RoleManager RoleManager;</span><br><span class=\"line\">      private readonly ISqlExecuter _iSqlExecuter;</span><br><span class=\"line\">      public NoticeItemAppService(IRepository&lt;NoticeItem&gt; noticeItemRepository, ISqlExecuter iSqlExecuter, RoleManager roleManager) : base(noticeItemRepository)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          this._noticeItemRepository = noticeItemRepository;</span><br><span class=\"line\">          _iSqlExecuter = iSqlExecuter;</span><br><span class=\"line\">          RoleManager = roleManager;</span><br><span class=\"line\">          base.DeletePermissionName = &quot;Plat.NoticeItem.Delete&quot;;</span><br><span class=\"line\">          base.CreatePermissionName = &quot;Plat.NoticeItem.Add&quot;;</span><br><span class=\"line\">          base.UpdatePermissionName = &quot;Plat.NoticeItem.Edit&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">      public override async Task CreateOrUpdate(NoticeItemInput input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          if (input.IsTop)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.TopTime = DateTime.Now;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          else</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.TopTime = null;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          if (input.Status == StatusCode.Submit.ToString())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.DeployTime = DateTime.Now;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          await base.CreateOrUpdate(input);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      protected override IQueryable&lt;NoticeItem&gt; CreateFilteredQuery(NoticeItemSearchDto input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          return base.CreateFilteredQuery(input)</span><br><span class=\"line\">              .WhereIf(!string.IsNullOrWhiteSpace(input.Title), m =&gt; m.Title.Contains(input.Title));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      [AbpAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br><span class=\"line\">      public override EasyUiListResultDto&lt;NoticeItemInput&gt; GetGridByCondition(NoticeItemSearchDto input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          var rows = this.CreateFilteredQuery(input).OrderBy(r =&gt; r.IsTop).PageEasyUiBy(input).OrderByDescending(r =&gt; r.TopTime).MapTo&lt;List&lt;NoticeItemInput&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">          return new EasyUiListResultDto&lt;NoticeItemInput&gt;(input.Total, rows);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemController.cs 此类注入IAbpFileManager 去解析保存的文件，供前台编辑页面时使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class NoticeItemController : TelSCodeControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #region 构造函数</span><br><span class=\"line\">    private readonly INoticeItemAppService _noticeitemAppService;</span><br><span class=\"line\">    private readonly IAbpFileManager _abpFileManager;</span><br><span class=\"line\">    public NoticeItemController(INoticeItemAppService noticeitemAppService, IAbpFileManager abpFileManager)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this._abpFileManager = abpFileManager;</span><br><span class=\"line\">        this._noticeitemAppService = noticeitemAppService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">    #region 视图</span><br><span class=\"line\">    public ActionResult Index()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [AbpMvcAuthorize(&quot;Plat.NoticeItem.Add&quot;, &quot;Plat.NoticeItem.Edit&quot;)]</span><br><span class=\"line\">    public ActionResult CreateOrUpdateModal()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    #region 数据</span><br><span class=\"line\">    public async Task&lt;JsonResult&gt; GetInfoForEdit(int id)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var output = await _noticeitemAppService.GetInfoForEdit(id);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (id == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            output.CreationUserName = AbpSession.GetLoginName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        NoticeItemViewModel noticeItemViewModel = new NoticeItemViewModel(</span><br><span class=\"line\">              _abpFileManager.GetFileOutput(output.FileUrl),</span><br><span class=\"line\">              _abpFileManager.GetFileOutput(output.ImgUrl),</span><br><span class=\"line\">              output</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">        return Json(noticeItemViewModel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [AbpMvcAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br><span class=\"line\">    public JsonResult GetGridByCondition(NoticeItemSearchDto input)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var gridData = _noticeitemAppService.GetGridByCondition(input);</span><br><span class=\"line\">        return Json(gridData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #endregion</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>公告信息因为有文件上传，所以需要新建一个NoticeItemViewModel 类<br>在TelSCode.Web中Plat区域Models新建文件夹NoticeItems，新建类NoticeItemViewModel.cs</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-c99897c2255cd117.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AutoMapFrom(typeof(NoticeItemInput))]</span><br><span class=\"line\"> public class NoticeItemViewModel : NoticeItemInput</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     public List&lt;AbpFileOutput&gt; AbpFileOutput &#123; get; set; &#125;</span><br><span class=\"line\">     public List&lt;AbpFileOutput&gt; AbpImgFileOutput &#123; get; set; &#125;</span><br><span class=\"line\">     public NoticeItemViewModel(List&lt;AbpFileOutput&gt; fileUrlOutputs, List&lt;AbpFileOutput&gt; imgFileUrlOutputs, NoticeItemInput noticeItemInput)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         AbpFileOutput = fileUrlOutputs;</span><br><span class=\"line\">         AbpImgFileOutput = imgFileUrlOutputs;</span><br><span class=\"line\"></span><br><span class=\"line\">         noticeItemInput.MapTo(this);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来是界面，新增编辑在一个界面中，一个页面对应一个js，使用@Html.InCludeScript引用，不会有缓存问题，发布之后会生成版本号。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-4934ca2974d14475.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>Index.cshtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@using Abp.Web.Mvc.Extensions</span><br><span class=\"line\">@&#123;</span><br><span class=\"line\">    ViewBag.Title = &quot;通知公告&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@section scripts&#123;</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/webuploader/webuploader.min.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/staticfile/libs/abp.webuploader.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/wangEditor/wangEditor.min.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/wangEditor/wangEditor-plugin.js&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        var gridUI = gridUI ||</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                BaseItemEnCode: $.util.request[&apos;name&apos;] == undefined ? &quot;&quot; : $.util.request[&apos;name&apos;]</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/Areas/Plat/Views/NoticeItem/Index.js&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@section styles&#123;</span><br><span class=\"line\">    &lt;link href=&quot;~/bower_components/webuploader/webuploader.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class=\"line\">    &lt;link href=&quot;~/bower_components/wangEditor/wangEditor-plugin.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class=\"line\">    @Html.IncludeStyle(&quot;~/Areas/Plat/Views/NoticeItem/Index.js&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;easyui-layout&quot; data-options=&quot;fit:true&quot;&gt;</span><br><span class=\"line\">    &lt;div data-options=&quot;region:&apos;north&apos;,border:false&quot; style=&quot;height: 54px; overflow: hidden;&quot;&gt;</span><br><span class=\"line\">        &lt;form id=&quot;searchForm&quot;&gt;</span><br><span class=\"line\">            &lt;table class=&quot;kv-table no-border&quot;&gt;</span><br><span class=\"line\">                &lt;tr&gt;</span><br><span class=\"line\">                    &lt;th class=&quot;kv-label&quot; style=&quot;text-align:center&quot;&gt;标题&lt;/th&gt;</span><br><span class=\"line\">                    &lt;td class=&quot;kv-content&quot;&gt;</span><br><span class=\"line\">                        &lt;input name=&quot;Title&quot; id=&quot;Title&quot; class=&quot;easyui-textbox&quot; /&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:void(0);&quot; class=&quot;easyui-linkbutton&quot; data-options=&quot;iconCls:&apos;icon-search&apos;&quot; onclick=&quot;com.filter(&apos;#searchForm&apos;, &apos;#dgGrid&apos;);&quot;&gt;查询&lt;/a&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:void(0);&quot; class=&quot;easyui-linkbutton&quot; data-options=&quot;iconCls:&apos;icon-undo&apos;&quot; onclick=&quot;com.clear(&apos;#searchForm&apos;, &apos;#dgGrid&apos;)&quot;&gt;清空&lt;/a&gt;</span><br><span class=\"line\">                    &lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;</span><br><span class=\"line\">            &lt;/table&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div data-options=&quot;region:&apos;center&apos;,border:false&quot;&gt;</span><br><span class=\"line\">        &lt;table id=&quot;dgGrid&quot;&gt;&lt;/table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>同目录下建一个Index.js ，我们使用闭包的形式来组织代码结构，将可配置项放在了上面，不强制要求，这里只为方便修改。使用时，将NoticeItem替换相应的类名，noticeServcice替换成相应的xxxservcie。abp.services.app.noticeItem中的noticeItem中n是首字母变成小写，这是后台生成的service，要按照此规定使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gridUI = gridUI || &#123;&#125;;</span><br><span class=\"line\">(function () &#123;</span><br><span class=\"line\">    var noticeService = abp.services.app.noticeItem;</span><br><span class=\"line\">    var gridUrl = &apos;/Plat/NoticeItem/GetGridByCondition?BaseItemEnCode=&apos; + gridUI.BaseItemEnCode;</span><br><span class=\"line\">    var editModalUrl = &apos;/Plat/NoticeItem/CreateOrUpdateModal&apos;;</span><br><span class=\"line\">    var readModalUrl = &apos;/Plat/NoticeItem/ReadModal&apos;;</span><br><span class=\"line\">    var dgGrid, dgGridId = &quot;#dgGrid&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    $.extend(gridUI,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            loadGrid: function () &#123;</span><br><span class=\"line\">                var baseEnCode = &apos;Plat.NoticeItem.&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">                var toolbar = [&#123; text: &quot;刷新&quot;, iconCls: &quot;icon-reload&quot;, handler: function () &#123; com.btnRefresh(dgGridId); &#125; &#125;,</span><br><span class=\"line\">                &#123; text: &quot;新增&quot;, EnCode: baseEnCode + &apos;Add&apos;, iconCls: &quot;icon-add&quot;, handler: gridUI.btnAdd &#125;,</span><br><span class=\"line\">                &#123; text: &quot;编辑&quot;, EnCode: baseEnCode + &apos;Edit&apos;, iconCls: &quot;icon-edit&quot;, handler: gridUI.btnEdit &#125;,</span><br><span class=\"line\">                &#123; text: &quot;删除&quot;, EnCode: baseEnCode + &apos;Delete&apos;, iconCls: &quot;icon-remove&quot;, handler: gridUI.btnDelete &#125;];</span><br><span class=\"line\">                toolbar = com.authorizeButton(toolbar);</span><br><span class=\"line\">                if (gridUI.BaseItemEnCode != &quot;&quot;) &#123;</span><br><span class=\"line\">                    toolbar = [];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                dgGrid = $(dgGridId).datagrid(&#123;</span><br><span class=\"line\">                    url: gridUrl,</span><br><span class=\"line\">                    toolbar: toolbar,</span><br><span class=\"line\">                    columns: [[</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;Id&apos;, title: &apos;查看&apos;, width: 20, align: &apos;center&apos;, formatter: function (value, row) &#123;</span><br><span class=\"line\">                                return String.format(&apos;&lt;button class=&quot;btn btn-default btn-xs&quot; type=&quot;button&quot; onclick=&quot;gridUI.showDetails(\\&apos;&#123;0&#125;\\&apos;)&quot;&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt;&lt;/button&gt;&apos;, value);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;Title&apos;, title: &apos;标题&apos;, width: 80 &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;BaseItemId&apos;, title: &apos;类别&apos;, width: 80, formatter: function (value) &#123;</span><br><span class=\"line\">                                if (top.clients.dataItems[&apos;NoticeItem&apos;]) &#123;</span><br><span class=\"line\">                                    return top.clients.dataItems[&apos;NoticeItem&apos;][value];</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    return &apos;&apos;;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;CreationUserName&apos;, title: &apos;发布人姓名&apos;, width: 160 &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;IsTop&apos;, title: &apos;是否置顶&apos;, width: 50, formatter: com.formatYes &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;Status&apos;, title: &apos;状态&apos;, width: 50, formatter: function (value) &#123;</span><br><span class=\"line\">                                var objMsg = &#123;</span><br><span class=\"line\">                                    &quot;primary&quot;: &#123;</span><br><span class=\"line\">                                        text: &quot;发布&quot;,</span><br><span class=\"line\">                                        &apos;case&apos;: [&apos;Submit&apos;]</span><br><span class=\"line\">                                    &#125;,</span><br><span class=\"line\">                                    &quot;info&quot;: &#123;</span><br><span class=\"line\">                                        text: &quot;暂存&quot;,</span><br><span class=\"line\">                                        &apos;case&apos;: [&apos;TempSave&apos;]</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;;</span><br><span class=\"line\">                                return com.formatMsg(value, objMsg);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]]</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            editInfo: function (title, icon, id) &#123;</span><br><span class=\"line\">                var pDialog = com.dialog(&#123;</span><br><span class=\"line\">                    title: title,</span><br><span class=\"line\">                    width: &apos;100%&apos;,</span><br><span class=\"line\">                    height: &apos;100%&apos;,</span><br><span class=\"line\">                    href: editModalUrl,</span><br><span class=\"line\">                    iconCls: icon,</span><br><span class=\"line\">                    buttons: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            text: &apos;发布&apos;,</span><br><span class=\"line\">                            iconCls: &apos;icon-ok&apos;,</span><br><span class=\"line\">                            handler: function () &#123;</span><br><span class=\"line\">                                gridUI.submit(pDialog, &quot;Submit&quot;);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;, &#123;</span><br><span class=\"line\">                            text: &apos;暂存&apos;,</span><br><span class=\"line\">                            iconCls: &apos;icon-save&apos;,</span><br><span class=\"line\">                            handler: function () &#123;</span><br><span class=\"line\">                                gridUI.submit(pDialog, &quot;TempSave&quot;);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ],</span><br><span class=\"line\">                    onLoad: function () &#123;</span><br><span class=\"line\">                        editUI.setForm(id);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            showDetails: function (id) &#123;</span><br><span class=\"line\">                com.dialog(&#123;</span><br><span class=\"line\">                    title: &quot;详情&quot;,</span><br><span class=\"line\">                    width: 1500,</span><br><span class=\"line\">                    height: 800,</span><br><span class=\"line\">                    href: readModalUrl,</span><br><span class=\"line\">                    queryParams: &#123;</span><br><span class=\"line\">                        id: id</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnAdd: function () &#123;</span><br><span class=\"line\">                gridUI.editInfo(&apos;新增公告&apos;, &apos;icon-add&apos;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnEdit: function () &#123;</span><br><span class=\"line\">                com.edit(dgGridId, function (id) &#123;</span><br><span class=\"line\">                    gridUI.editInfo(&quot;编辑公告&quot;, &apos;icon-edit&apos;, id);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnDelete: function () &#123;</span><br><span class=\"line\">                com.deleted(noticeService, dgGridId);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            submit: function (pDialog, status) &#123;</span><br><span class=\"line\">                var f = $(&quot;#editForm&quot;);</span><br><span class=\"line\">                var isValid = f.form(&apos;validate&apos;);</span><br><span class=\"line\">                if (!isValid) &#123;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var objForm = f.formSerialize();</span><br><span class=\"line\">                objForm.Content = editor.txt.html();</span><br><span class=\"line\">                objForm.Status = status;</span><br><span class=\"line\"></span><br><span class=\"line\">                com.setBusy(pDialog, true);</span><br><span class=\"line\">                noticeService.createOrUpdate(objForm, &#123; showMsg: true &#125;)</span><br><span class=\"line\">                    .done(function () &#123;</span><br><span class=\"line\">                        com.btnRefresh();</span><br><span class=\"line\">                        pDialog.dialog(&apos;close&apos;);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    .always(function () &#123;</span><br><span class=\"line\">                        com.setBusy(pDialog, false);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(function () &#123;</span><br><span class=\"line\">        gridUI.loadGrid();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>CreateOrUpdate.cshtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@using Abp.Web.Mvc.Extensions</span><br><span class=\"line\">@&#123;</span><br><span class=\"line\">    Layout = null;</span><br><span class=\"line\">    ViewBag.Title = &quot;通知公告管理&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Html.IncludeScript(&quot;/Areas/Plat/Views/NoticeItem/CreateOrUpdateModal.js&quot;)</span><br><span class=\"line\">&lt;div class=&quot;layui-layer-content&quot;&gt;</span><br><span class=\"line\">    &lt;form id=&quot;editForm&quot;&gt;</span><br><span class=\"line\">        &lt;table class=&quot;kv-table&quot;&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;&lt;span class=&quot;red&quot;&gt;*&lt;/span&gt;标题&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;input id=&quot;Title&quot; name=&quot;Title&quot; type=&quot;text&quot; class=&quot;easyui-textbox&quot; data-options=&quot;required:true&quot; style=&quot;width:569px&quot; /&gt;</span><br><span class=\"line\">                    &lt;input id=&quot;Id&quot; name=&quot;Id&quot; type=&quot;hidden&quot; /&gt;</span><br><span class=\"line\">                    &lt;input type=&quot;hidden&quot; id=&quot;CreationUserName&quot; name=&quot;CreationUserName&quot; /&gt;</span><br><span class=\"line\">                    &lt;input type=&quot;hidden&quot; name=&quot;BaseItemCode&quot; value=&quot;&quot; /&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;置顶&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; style=&quot;width:215px&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;IsTop&quot; id=&quot;IsTop&quot; class=&quot;easyui-switchbutton&quot;&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;公告类别&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;BaseItemId&quot; id=&quot;BaseItemId&quot; /&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;附件&lt;/th&gt;</span><br><span class=\"line\">                &lt;td colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;fileUrl&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            @*&lt;tr&gt;</span><br><span class=\"line\">                    &lt;th class=&quot;kv-label&quot;&gt;是否图片新闻&lt;/th&gt;</span><br><span class=\"line\">                    &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                        &lt;input name=&quot;IsImg&quot; id=&quot;IsImg&quot; class=&quot;easyui-switchbutton&quot;&gt;</span><br><span class=\"line\">                    &lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;*@</span><br><span class=\"line\">            &lt;tr id=&quot;IsImgNews&quot;&gt;</span><br><span class=\"line\">                &lt;th&gt;上传图片&lt;/th&gt;</span><br><span class=\"line\">                &lt;td colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;IsImg&quot; id=&quot;IsImg&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;imgUrl&quot; style=&quot;position: relative;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;内容&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;Content&quot; style=&quot;position: relative;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>CreateOrUpdate.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Img;</span><br><span class=\"line\">var editor;</span><br><span class=\"line\">var editUI = &#123;</span><br><span class=\"line\">    setForm: function (id) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        var E = window.wangEditor;</span><br><span class=\"line\">        editor = new E(&apos;#Content&apos;);</span><br><span class=\"line\">        editor.customConfig = com.editor.customConfig;</span><br><span class=\"line\">        editor.create();</span><br><span class=\"line\">        E.plugins.init(&#123;</span><br><span class=\"line\">            elem: &apos;#Content&apos;,</span><br><span class=\"line\">            plugins: [&apos;fullscreen&apos;]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //实例化文件上传</span><br><span class=\"line\">        $(&quot;#imgUrl&quot;).powerWebUpload(&#123;</span><br><span class=\"line\">            uploadType: &apos;img&apos;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $(&quot;#fileUrl&quot;).powerWebUpload();</span><br><span class=\"line\"></span><br><span class=\"line\">        $(&apos;#BaseItemId&apos;).combobox(&#123;</span><br><span class=\"line\">            url: com.baseUrl + &apos;/baseItem/GetComBoJson?enCode=NoticeItem&apos;,</span><br><span class=\"line\">            required: true,</span><br><span class=\"line\">            validType: &quot;comboxValidate[&apos;请选择公告类别&apos;]&quot;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        //function changeIsImg(checked) &#123;</span><br><span class=\"line\">        //    if (checked) &#123;</span><br><span class=\"line\">        //        $(&apos;#IsImgNews&apos;).css(&apos;display&apos;, &apos;&apos;);</span><br><span class=\"line\">        //    &#125; else &#123;</span><br><span class=\"line\">        //        $(&apos;#IsImgNews&apos;).css(&apos;display&apos;, &apos;none&apos;);</span><br><span class=\"line\">        //    &#125;</span><br><span class=\"line\">        //&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //$(&apos;#IsImg&apos;).switchbutton(&#123;</span><br><span class=\"line\">        //    onChange: function (checked) &#123;</span><br><span class=\"line\">        //        changeIsImg(checked);</span><br><span class=\"line\">        //    &#125;</span><br><span class=\"line\">        //&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        com.setForm(id, function (data) &#123;</span><br><span class=\"line\">            var f = $(&quot;#editForm&quot;);</span><br><span class=\"line\">            if (id) &#123;</span><br><span class=\"line\">                setTimeout(function () &#123;</span><br><span class=\"line\">                    editor.txt.html(data.Content);</span><br><span class=\"line\">                &#125;, 666);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            webuploader.loadFile(&#123;</span><br><span class=\"line\">                elem: &apos;#imgUrl&apos;,</span><br><span class=\"line\">                rows: data.AbpImgFileOutput</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            webuploader.loadFile(&#123;</span><br><span class=\"line\">                elem: &apos;#fileUrl&apos;,</span><br><span class=\"line\">                rows: data.AbpFileOutput</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            com.loadSwithButton($(&apos;.layui-layer-content&apos;), data);</span><br><span class=\"line\">            //changeIsImg(data.IsImg);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"具体入门与开发原理可参考此地址\"><a href=\"#具体入门与开发原理可参考此地址\" class=\"headerlink\" title=\"具体入门与开发原理可参考此地址\"></a>具体入门与开发原理可参考此地址</h2><p><a href=\"https://blog.csdn.net/wulex/article/category/7256369/3\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wulex/article/category/7256369/3</a></p>\n<h2 id=\"abp入门系列\"><a href=\"#abp入门系列\" class=\"headerlink\" title=\"abp入门系列\"></a>abp入门系列</h2><p><a href=\"https://www.jianshu.com/p/a6e9ace79345\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a6e9ace79345</a></p>\n<p>我们以通知公告为示例</p>\n<ol>\n<li>首先我们有一个公告信息的表结构，如下，像是否删除、新增时间等七个字段只需要继承FullAuditedEntity类即可</li>\n</ol>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>项目目录位置，在Domain/Plat建立NoticeItems目录，以类+s设置文件夹。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-0c0a238c497178ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>TelSCode.Domain.Plat.NoticeItems 此命名空间下的类如下，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NoticeItem : FullAuditedEntity</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 公告类别ID</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 标题</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(100)]</span><br><span class=\"line\">       public string Title &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 内容 </span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string Content &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       ///  打开次数</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public int Times &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 新增人姓名</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 部门</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       [StringLength(50)]</span><br><span class=\"line\">       public string DepName &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 是否置顶</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">       public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 置顶时间</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public DateTime? TopTime &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 发布时间</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\">       public bool IsImg &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 状态</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string Status &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 图片地址</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string ImgUrl &#123; get; set; &#125;</span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 附件地址</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public string FileUrl &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       /// &lt;summary&gt;</span><br><span class=\"line\">       /// 阅读量+1</span><br><span class=\"line\">       /// &lt;/summary&gt;</span><br><span class=\"line\">       public void NewlyTimes()</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           this.Times++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在此文件夹下把相关权限配置好</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-00a6d4607e89e9fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>具体配置如下</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-310610af5219023f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>数据以树的形式存放，公告信息这个菜单放到基础资料管理下，TypeCode为permission时，在菜单下不展示，是菜单下的权限配置，EnCode不能出现重复值,修改菜单时应在此位置修改对应的文字与排序方式、地址。如果是图标，将不自动更新。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new SysMenu &#123;  DisplayName = &quot;公告信息管理&quot;, Icon = &quot;icon-standard-date-add&quot;, EnCode = &quot;Plat.NoticeItem&quot;, LinkUrl = &quot;/Plat/NoticeItem/Index&quot;, TypeCode = menu, SortCode = 20 ,</span><br><span class=\"line\">Childrens = new List&lt;SysMenu&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">new SysMenu &#123; DisplayName = &quot;新增公告&quot;, EnCode = &quot;Plat.NoticeItem.Add&quot;, TypeCode = permission, SortCode = 1 &#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;编辑公告&quot;, EnCode = &quot;Plat.NoticeItem.Edit&quot;, TypeCode = permission, SortCode = 2&#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;删除公告&quot;, EnCode = &quot;Plat.NoticeItem.Delete&quot;, TypeCode = permission, SortCode = 3 &#125;,</span><br><span class=\"line\">    new SysMenu &#123; DisplayName = &quot;公告列表&quot;, EnCode = &quot;Plat.NoticeItem.GetGrid&quot;, TypeCode = permission, SortCode = 4 &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在EntityFramework的TelSCodeDbContext中增加一行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public virtual IDbSet&lt;NoticeItem&gt; NoticeItem &#123; get; set; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-67a14080bf65ca46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>在Application的Plat区域增加NoticeItems文件夹，我们以类名后缀加s建立文件夹，</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-d8352c0d3dcaff33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>NoticeItemInput.cs文件夹，一般情况下只需要将NoticeItem中的字段复制过来即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AutoMap(typeof(NoticeItem))]</span><br><span class=\"line\"> public class NoticeItemInput : EntityDto</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">     [StringLength(100,ErrorMessage = &quot;标题仅限100个字符&quot;)]</span><br><span class=\"line\">     public string Title &#123; get; set; &#125;</span><br><span class=\"line\">     public string Content &#123; get; set; &#125;</span><br><span class=\"line\">     public int Times &#123; get; set; &#125;</span><br><span class=\"line\">     public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">     public string DepName &#123; get; set; &#125;</span><br><span class=\"line\">     public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\">     public bool IsImg &#123; get; set; &#125;</span><br><span class=\"line\">     public string Status &#123; get; set; &#125;</span><br><span class=\"line\">     public string ImgUrl &#123; get; set; &#125;</span><br><span class=\"line\">     public string FileUrl &#123; get; set; &#125;</span><br><span class=\"line\">     public DateTime? TopTime &#123; get; set; &#125;</span><br><span class=\"line\">     public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemListDto 为列表上展示的数据字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AutoMapFrom(typeof(NoticeItem))]</span><br><span class=\"line\">public class NoticeItemListDto : EntityDto, IHasCreationTime</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string BaseItemId &#123; get; set; &#125;</span><br><span class=\"line\">    public string Title &#123; get; set; &#125;</span><br><span class=\"line\">    public string Content &#123; get; set; &#125;</span><br><span class=\"line\">    public int Times &#123; get; set; &#125;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// 回复次数</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    public int CommentTimes &#123; get; set; &#125;</span><br><span class=\"line\">    public string CreationUserName &#123; get; set; &#125;</span><br><span class=\"line\">    public DateTime CreationTime &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public DateTime? DeployTime &#123; get; set; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public bool IsTop &#123; get; set; &#125;</span><br><span class=\"line\">    public string StatusCode &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemSearchDto为查询条件，继承PageDto即可，需要增加查询条件，则在此类中增加对应的属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NoticeItemSearchDto : PageDto</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public string BaseItemEnCode &#123; get; set; &#125;</span><br><span class=\"line\">    public string Title &#123; get; set; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>INoticeItemAppService .cs文件 夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface INoticeItemAppService : IUsualCrudAppService&lt;NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemAppService.cs文件，一般情况下，此类继承UsualCrudAppService，继承接口INoticeItemAppService，即可拥有增、删、改、查的功能，如果想自定义查询实现，需要重写父类的CreateFilteredQuery方法，由于公告信息中业务要求，有置顶和置顶时间字段，需要根据最后置顶的时间倒序取数据，所以GetGridByCondition方法需要override下，即可解决，权限配置包括二部分，一种是给父类继承的UsualCurdAppService传相应的权限编码，分别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base.DeletePermissionName=&quot;Plat.NoticeItem.Delete&quot;;</span><br><span class=\"line\"> base.CreatePermissionName = &quot;Plat.NoticeItem.Add&quot;;</span><br><span class=\"line\">base.UpdatePermissionName = &quot;Plat.NoticeItem.Edit&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>在方法名上使用此权限属性配置该方法对应的权限信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AbpAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br></pre></td></tr></table></figure>\n\n<p>调用 base.CreateOrUpdate方法时，即会判断用户是否有Plat.NoticeItem.Add权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NoticeItemAppService : UsualCrudAppService&lt;NoticeItem, NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int&gt;, INoticeItemAppService</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      #region 构造函数</span><br><span class=\"line\">      private readonly IRepository&lt;NoticeItem&gt; _noticeItemRepository;</span><br><span class=\"line\">      private RoleManager RoleManager;</span><br><span class=\"line\">      private readonly ISqlExecuter _iSqlExecuter;</span><br><span class=\"line\">      public NoticeItemAppService(IRepository&lt;NoticeItem&gt; noticeItemRepository, ISqlExecuter iSqlExecuter, RoleManager roleManager) : base(noticeItemRepository)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          this._noticeItemRepository = noticeItemRepository;</span><br><span class=\"line\">          _iSqlExecuter = iSqlExecuter;</span><br><span class=\"line\">          RoleManager = roleManager;</span><br><span class=\"line\">          base.DeletePermissionName = &quot;Plat.NoticeItem.Delete&quot;;</span><br><span class=\"line\">          base.CreatePermissionName = &quot;Plat.NoticeItem.Add&quot;;</span><br><span class=\"line\">          base.UpdatePermissionName = &quot;Plat.NoticeItem.Edit&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">      public override async Task CreateOrUpdate(NoticeItemInput input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          if (input.IsTop)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.TopTime = DateTime.Now;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          else</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.TopTime = null;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          if (input.Status == StatusCode.Submit.ToString())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              input.DeployTime = DateTime.Now;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          await base.CreateOrUpdate(input);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      protected override IQueryable&lt;NoticeItem&gt; CreateFilteredQuery(NoticeItemSearchDto input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          return base.CreateFilteredQuery(input)</span><br><span class=\"line\">              .WhereIf(!string.IsNullOrWhiteSpace(input.Title), m =&gt; m.Title.Contains(input.Title));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      [AbpAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br><span class=\"line\">      public override EasyUiListResultDto&lt;NoticeItemInput&gt; GetGridByCondition(NoticeItemSearchDto input)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          var rows = this.CreateFilteredQuery(input).OrderBy(r =&gt; r.IsTop).PageEasyUiBy(input).OrderByDescending(r =&gt; r.TopTime).MapTo&lt;List&lt;NoticeItemInput&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">          return new EasyUiListResultDto&lt;NoticeItemInput&gt;(input.Total, rows);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>NoticeItemController.cs 此类注入IAbpFileManager 去解析保存的文件，供前台编辑页面时使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class NoticeItemController : TelSCodeControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #region 构造函数</span><br><span class=\"line\">    private readonly INoticeItemAppService _noticeitemAppService;</span><br><span class=\"line\">    private readonly IAbpFileManager _abpFileManager;</span><br><span class=\"line\">    public NoticeItemController(INoticeItemAppService noticeitemAppService, IAbpFileManager abpFileManager)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this._abpFileManager = abpFileManager;</span><br><span class=\"line\">        this._noticeitemAppService = noticeitemAppService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">    #region 视图</span><br><span class=\"line\">    public ActionResult Index()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [AbpMvcAuthorize(&quot;Plat.NoticeItem.Add&quot;, &quot;Plat.NoticeItem.Edit&quot;)]</span><br><span class=\"line\">    public ActionResult CreateOrUpdateModal()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    #region 数据</span><br><span class=\"line\">    public async Task&lt;JsonResult&gt; GetInfoForEdit(int id)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var output = await _noticeitemAppService.GetInfoForEdit(id);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (id == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            output.CreationUserName = AbpSession.GetLoginName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        NoticeItemViewModel noticeItemViewModel = new NoticeItemViewModel(</span><br><span class=\"line\">              _abpFileManager.GetFileOutput(output.FileUrl),</span><br><span class=\"line\">              _abpFileManager.GetFileOutput(output.ImgUrl),</span><br><span class=\"line\">              output</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">        return Json(noticeItemViewModel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [AbpMvcAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)]</span><br><span class=\"line\">    public JsonResult GetGridByCondition(NoticeItemSearchDto input)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var gridData = _noticeitemAppService.GetGridByCondition(input);</span><br><span class=\"line\">        return Json(gridData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #endregion</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>公告信息因为有文件上传，所以需要新建一个NoticeItemViewModel 类<br>在TelSCode.Web中Plat区域Models新建文件夹NoticeItems，新建类NoticeItemViewModel.cs</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-c99897c2255cd117.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AutoMapFrom(typeof(NoticeItemInput))]</span><br><span class=\"line\"> public class NoticeItemViewModel : NoticeItemInput</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     public List&lt;AbpFileOutput&gt; AbpFileOutput &#123; get; set; &#125;</span><br><span class=\"line\">     public List&lt;AbpFileOutput&gt; AbpImgFileOutput &#123; get; set; &#125;</span><br><span class=\"line\">     public NoticeItemViewModel(List&lt;AbpFileOutput&gt; fileUrlOutputs, List&lt;AbpFileOutput&gt; imgFileUrlOutputs, NoticeItemInput noticeItemInput)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         AbpFileOutput = fileUrlOutputs;</span><br><span class=\"line\">         AbpImgFileOutput = imgFileUrlOutputs;</span><br><span class=\"line\"></span><br><span class=\"line\">         noticeItemInput.MapTo(this);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来是界面，新增编辑在一个界面中，一个页面对应一个js，使用@Html.InCludeScript引用，不会有缓存问题，发布之后会生成版本号。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-4934ca2974d14475.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>Index.cshtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@using Abp.Web.Mvc.Extensions</span><br><span class=\"line\">@&#123;</span><br><span class=\"line\">    ViewBag.Title = &quot;通知公告&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@section scripts&#123;</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/webuploader/webuploader.min.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/staticfile/libs/abp.webuploader.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/wangEditor/wangEditor.min.js&quot;)</span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/bower_components/wangEditor/wangEditor-plugin.js&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        var gridUI = gridUI ||</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                BaseItemEnCode: $.util.request[&apos;name&apos;] == undefined ? &quot;&quot; : $.util.request[&apos;name&apos;]</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Html.IncludeScript(&quot;~/Areas/Plat/Views/NoticeItem/Index.js&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@section styles&#123;</span><br><span class=\"line\">    &lt;link href=&quot;~/bower_components/webuploader/webuploader.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class=\"line\">    &lt;link href=&quot;~/bower_components/wangEditor/wangEditor-plugin.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class=\"line\">    @Html.IncludeStyle(&quot;~/Areas/Plat/Views/NoticeItem/Index.js&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;easyui-layout&quot; data-options=&quot;fit:true&quot;&gt;</span><br><span class=\"line\">    &lt;div data-options=&quot;region:&apos;north&apos;,border:false&quot; style=&quot;height: 54px; overflow: hidden;&quot;&gt;</span><br><span class=\"line\">        &lt;form id=&quot;searchForm&quot;&gt;</span><br><span class=\"line\">            &lt;table class=&quot;kv-table no-border&quot;&gt;</span><br><span class=\"line\">                &lt;tr&gt;</span><br><span class=\"line\">                    &lt;th class=&quot;kv-label&quot; style=&quot;text-align:center&quot;&gt;标题&lt;/th&gt;</span><br><span class=\"line\">                    &lt;td class=&quot;kv-content&quot;&gt;</span><br><span class=\"line\">                        &lt;input name=&quot;Title&quot; id=&quot;Title&quot; class=&quot;easyui-textbox&quot; /&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:void(0);&quot; class=&quot;easyui-linkbutton&quot; data-options=&quot;iconCls:&apos;icon-search&apos;&quot; onclick=&quot;com.filter(&apos;#searchForm&apos;, &apos;#dgGrid&apos;);&quot;&gt;查询&lt;/a&gt;</span><br><span class=\"line\">                        &lt;a href=&quot;javascript:void(0);&quot; class=&quot;easyui-linkbutton&quot; data-options=&quot;iconCls:&apos;icon-undo&apos;&quot; onclick=&quot;com.clear(&apos;#searchForm&apos;, &apos;#dgGrid&apos;)&quot;&gt;清空&lt;/a&gt;</span><br><span class=\"line\">                    &lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;</span><br><span class=\"line\">            &lt;/table&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div data-options=&quot;region:&apos;center&apos;,border:false&quot;&gt;</span><br><span class=\"line\">        &lt;table id=&quot;dgGrid&quot;&gt;&lt;/table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>同目录下建一个Index.js ，我们使用闭包的形式来组织代码结构，将可配置项放在了上面，不强制要求，这里只为方便修改。使用时，将NoticeItem替换相应的类名，noticeServcice替换成相应的xxxservcie。abp.services.app.noticeItem中的noticeItem中n是首字母变成小写，这是后台生成的service，要按照此规定使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gridUI = gridUI || &#123;&#125;;</span><br><span class=\"line\">(function () &#123;</span><br><span class=\"line\">    var noticeService = abp.services.app.noticeItem;</span><br><span class=\"line\">    var gridUrl = &apos;/Plat/NoticeItem/GetGridByCondition?BaseItemEnCode=&apos; + gridUI.BaseItemEnCode;</span><br><span class=\"line\">    var editModalUrl = &apos;/Plat/NoticeItem/CreateOrUpdateModal&apos;;</span><br><span class=\"line\">    var readModalUrl = &apos;/Plat/NoticeItem/ReadModal&apos;;</span><br><span class=\"line\">    var dgGrid, dgGridId = &quot;#dgGrid&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    $.extend(gridUI,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            loadGrid: function () &#123;</span><br><span class=\"line\">                var baseEnCode = &apos;Plat.NoticeItem.&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">                var toolbar = [&#123; text: &quot;刷新&quot;, iconCls: &quot;icon-reload&quot;, handler: function () &#123; com.btnRefresh(dgGridId); &#125; &#125;,</span><br><span class=\"line\">                &#123; text: &quot;新增&quot;, EnCode: baseEnCode + &apos;Add&apos;, iconCls: &quot;icon-add&quot;, handler: gridUI.btnAdd &#125;,</span><br><span class=\"line\">                &#123; text: &quot;编辑&quot;, EnCode: baseEnCode + &apos;Edit&apos;, iconCls: &quot;icon-edit&quot;, handler: gridUI.btnEdit &#125;,</span><br><span class=\"line\">                &#123; text: &quot;删除&quot;, EnCode: baseEnCode + &apos;Delete&apos;, iconCls: &quot;icon-remove&quot;, handler: gridUI.btnDelete &#125;];</span><br><span class=\"line\">                toolbar = com.authorizeButton(toolbar);</span><br><span class=\"line\">                if (gridUI.BaseItemEnCode != &quot;&quot;) &#123;</span><br><span class=\"line\">                    toolbar = [];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                dgGrid = $(dgGridId).datagrid(&#123;</span><br><span class=\"line\">                    url: gridUrl,</span><br><span class=\"line\">                    toolbar: toolbar,</span><br><span class=\"line\">                    columns: [[</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;Id&apos;, title: &apos;查看&apos;, width: 20, align: &apos;center&apos;, formatter: function (value, row) &#123;</span><br><span class=\"line\">                                return String.format(&apos;&lt;button class=&quot;btn btn-default btn-xs&quot; type=&quot;button&quot; onclick=&quot;gridUI.showDetails(\\&apos;&#123;0&#125;\\&apos;)&quot;&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt;&lt;/button&gt;&apos;, value);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;Title&apos;, title: &apos;标题&apos;, width: 80 &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;BaseItemId&apos;, title: &apos;类别&apos;, width: 80, formatter: function (value) &#123;</span><br><span class=\"line\">                                if (top.clients.dataItems[&apos;NoticeItem&apos;]) &#123;</span><br><span class=\"line\">                                    return top.clients.dataItems[&apos;NoticeItem&apos;][value];</span><br><span class=\"line\">                                &#125; else &#123;</span><br><span class=\"line\">                                    return &apos;&apos;;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;CreationUserName&apos;, title: &apos;发布人姓名&apos;, width: 160 &#125;,</span><br><span class=\"line\">                        &#123; field: &apos;IsTop&apos;, title: &apos;是否置顶&apos;, width: 50, formatter: com.formatYes &#125;,</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            field: &apos;Status&apos;, title: &apos;状态&apos;, width: 50, formatter: function (value) &#123;</span><br><span class=\"line\">                                var objMsg = &#123;</span><br><span class=\"line\">                                    &quot;primary&quot;: &#123;</span><br><span class=\"line\">                                        text: &quot;发布&quot;,</span><br><span class=\"line\">                                        &apos;case&apos;: [&apos;Submit&apos;]</span><br><span class=\"line\">                                    &#125;,</span><br><span class=\"line\">                                    &quot;info&quot;: &#123;</span><br><span class=\"line\">                                        text: &quot;暂存&quot;,</span><br><span class=\"line\">                                        &apos;case&apos;: [&apos;TempSave&apos;]</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;;</span><br><span class=\"line\">                                return com.formatMsg(value, objMsg);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]]</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            editInfo: function (title, icon, id) &#123;</span><br><span class=\"line\">                var pDialog = com.dialog(&#123;</span><br><span class=\"line\">                    title: title,</span><br><span class=\"line\">                    width: &apos;100%&apos;,</span><br><span class=\"line\">                    height: &apos;100%&apos;,</span><br><span class=\"line\">                    href: editModalUrl,</span><br><span class=\"line\">                    iconCls: icon,</span><br><span class=\"line\">                    buttons: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            text: &apos;发布&apos;,</span><br><span class=\"line\">                            iconCls: &apos;icon-ok&apos;,</span><br><span class=\"line\">                            handler: function () &#123;</span><br><span class=\"line\">                                gridUI.submit(pDialog, &quot;Submit&quot;);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;, &#123;</span><br><span class=\"line\">                            text: &apos;暂存&apos;,</span><br><span class=\"line\">                            iconCls: &apos;icon-save&apos;,</span><br><span class=\"line\">                            handler: function () &#123;</span><br><span class=\"line\">                                gridUI.submit(pDialog, &quot;TempSave&quot;);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ],</span><br><span class=\"line\">                    onLoad: function () &#123;</span><br><span class=\"line\">                        editUI.setForm(id);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            showDetails: function (id) &#123;</span><br><span class=\"line\">                com.dialog(&#123;</span><br><span class=\"line\">                    title: &quot;详情&quot;,</span><br><span class=\"line\">                    width: 1500,</span><br><span class=\"line\">                    height: 800,</span><br><span class=\"line\">                    href: readModalUrl,</span><br><span class=\"line\">                    queryParams: &#123;</span><br><span class=\"line\">                        id: id</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnAdd: function () &#123;</span><br><span class=\"line\">                gridUI.editInfo(&apos;新增公告&apos;, &apos;icon-add&apos;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnEdit: function () &#123;</span><br><span class=\"line\">                com.edit(dgGridId, function (id) &#123;</span><br><span class=\"line\">                    gridUI.editInfo(&quot;编辑公告&quot;, &apos;icon-edit&apos;, id);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            btnDelete: function () &#123;</span><br><span class=\"line\">                com.deleted(noticeService, dgGridId);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            submit: function (pDialog, status) &#123;</span><br><span class=\"line\">                var f = $(&quot;#editForm&quot;);</span><br><span class=\"line\">                var isValid = f.form(&apos;validate&apos;);</span><br><span class=\"line\">                if (!isValid) &#123;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                var objForm = f.formSerialize();</span><br><span class=\"line\">                objForm.Content = editor.txt.html();</span><br><span class=\"line\">                objForm.Status = status;</span><br><span class=\"line\"></span><br><span class=\"line\">                com.setBusy(pDialog, true);</span><br><span class=\"line\">                noticeService.createOrUpdate(objForm, &#123; showMsg: true &#125;)</span><br><span class=\"line\">                    .done(function () &#123;</span><br><span class=\"line\">                        com.btnRefresh();</span><br><span class=\"line\">                        pDialog.dialog(&apos;close&apos;);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    .always(function () &#123;</span><br><span class=\"line\">                        com.setBusy(pDialog, false);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(function () &#123;</span><br><span class=\"line\">        gridUI.loadGrid();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>CreateOrUpdate.cshtml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@using Abp.Web.Mvc.Extensions</span><br><span class=\"line\">@&#123;</span><br><span class=\"line\">    Layout = null;</span><br><span class=\"line\">    ViewBag.Title = &quot;通知公告管理&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Html.IncludeScript(&quot;/Areas/Plat/Views/NoticeItem/CreateOrUpdateModal.js&quot;)</span><br><span class=\"line\">&lt;div class=&quot;layui-layer-content&quot;&gt;</span><br><span class=\"line\">    &lt;form id=&quot;editForm&quot;&gt;</span><br><span class=\"line\">        &lt;table class=&quot;kv-table&quot;&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;&lt;span class=&quot;red&quot;&gt;*&lt;/span&gt;标题&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;input id=&quot;Title&quot; name=&quot;Title&quot; type=&quot;text&quot; class=&quot;easyui-textbox&quot; data-options=&quot;required:true&quot; style=&quot;width:569px&quot; /&gt;</span><br><span class=\"line\">                    &lt;input id=&quot;Id&quot; name=&quot;Id&quot; type=&quot;hidden&quot; /&gt;</span><br><span class=\"line\">                    &lt;input type=&quot;hidden&quot; id=&quot;CreationUserName&quot; name=&quot;CreationUserName&quot; /&gt;</span><br><span class=\"line\">                    &lt;input type=&quot;hidden&quot; name=&quot;BaseItemCode&quot; value=&quot;&quot; /&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;置顶&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; style=&quot;width:215px&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;IsTop&quot; id=&quot;IsTop&quot; class=&quot;easyui-switchbutton&quot;&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;公告类别&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;BaseItemId&quot; id=&quot;BaseItemId&quot; /&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th&gt;附件&lt;/th&gt;</span><br><span class=\"line\">                &lt;td colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;fileUrl&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            @*&lt;tr&gt;</span><br><span class=\"line\">                    &lt;th class=&quot;kv-label&quot;&gt;是否图片新闻&lt;/th&gt;</span><br><span class=\"line\">                    &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                        &lt;input name=&quot;IsImg&quot; id=&quot;IsImg&quot; class=&quot;easyui-switchbutton&quot;&gt;</span><br><span class=\"line\">                    &lt;/td&gt;</span><br><span class=\"line\">                &lt;/tr&gt;*@</span><br><span class=\"line\">            &lt;tr id=&quot;IsImgNews&quot;&gt;</span><br><span class=\"line\">                &lt;th&gt;上传图片&lt;/th&gt;</span><br><span class=\"line\">                &lt;td colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;input name=&quot;IsImg&quot; id=&quot;IsImg&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;imgUrl&quot; style=&quot;position: relative;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">            &lt;tr&gt;</span><br><span class=\"line\">                &lt;th class=&quot;kv-label&quot;&gt;内容&lt;/th&gt;</span><br><span class=\"line\">                &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt;</span><br><span class=\"line\">                    &lt;div id=&quot;Content&quot; style=&quot;position: relative;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/td&gt;</span><br><span class=\"line\">            &lt;/tr&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>CreateOrUpdate.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Img;</span><br><span class=\"line\">var editor;</span><br><span class=\"line\">var editUI = &#123;</span><br><span class=\"line\">    setForm: function (id) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        var E = window.wangEditor;</span><br><span class=\"line\">        editor = new E(&apos;#Content&apos;);</span><br><span class=\"line\">        editor.customConfig = com.editor.customConfig;</span><br><span class=\"line\">        editor.create();</span><br><span class=\"line\">        E.plugins.init(&#123;</span><br><span class=\"line\">            elem: &apos;#Content&apos;,</span><br><span class=\"line\">            plugins: [&apos;fullscreen&apos;]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        //实例化文件上传</span><br><span class=\"line\">        $(&quot;#imgUrl&quot;).powerWebUpload(&#123;</span><br><span class=\"line\">            uploadType: &apos;img&apos;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        $(&quot;#fileUrl&quot;).powerWebUpload();</span><br><span class=\"line\"></span><br><span class=\"line\">        $(&apos;#BaseItemId&apos;).combobox(&#123;</span><br><span class=\"line\">            url: com.baseUrl + &apos;/baseItem/GetComBoJson?enCode=NoticeItem&apos;,</span><br><span class=\"line\">            required: true,</span><br><span class=\"line\">            validType: &quot;comboxValidate[&apos;请选择公告类别&apos;]&quot;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        //function changeIsImg(checked) &#123;</span><br><span class=\"line\">        //    if (checked) &#123;</span><br><span class=\"line\">        //        $(&apos;#IsImgNews&apos;).css(&apos;display&apos;, &apos;&apos;);</span><br><span class=\"line\">        //    &#125; else &#123;</span><br><span class=\"line\">        //        $(&apos;#IsImgNews&apos;).css(&apos;display&apos;, &apos;none&apos;);</span><br><span class=\"line\">        //    &#125;</span><br><span class=\"line\">        //&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //$(&apos;#IsImg&apos;).switchbutton(&#123;</span><br><span class=\"line\">        //    onChange: function (checked) &#123;</span><br><span class=\"line\">        //        changeIsImg(checked);</span><br><span class=\"line\">        //    &#125;</span><br><span class=\"line\">        //&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        com.setForm(id, function (data) &#123;</span><br><span class=\"line\">            var f = $(&quot;#editForm&quot;);</span><br><span class=\"line\">            if (id) &#123;</span><br><span class=\"line\">                setTimeout(function () &#123;</span><br><span class=\"line\">                    editor.txt.html(data.Content);</span><br><span class=\"line\">                &#125;, 666);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            webuploader.loadFile(&#123;</span><br><span class=\"line\">                elem: &apos;#imgUrl&apos;,</span><br><span class=\"line\">                rows: data.AbpImgFileOutput</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            webuploader.loadFile(&#123;</span><br><span class=\"line\">                elem: &apos;#fileUrl&apos;,</span><br><span class=\"line\">                rows: data.AbpFileOutput</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            com.loadSwithButton($(&apos;.layui-layer-content&apos;), data);</span><br><span class=\"line\">            //changeIsImg(data.IsImg);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","popularPost_tmp_gaData":{"updated":"Tue Jun 25 2019 23:27:50 GMT+0800 (GMT+08:00)","title":"ABP使用文档","path":"2019/03/12/ABP/ABP使用文档/","eyeCatchImage":"https://upload-images.jianshu.io/upload_images/2001974-f36d31bc61fb36a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","excerpt":"旧项目使用ABP框架时，.NET Framework下通用文档，最基础的类，服务，接口等。","date":"2019-03-12T06:40:26.000Z","pv":0,"totalPV":0,"categories":"ABP","tags":["ABP"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"travis-ci 持续集成hexo至Github Pages、腾讯云（ESC)","date":"2019-06-27T02:30:26.000Z","_content":"\n\n## 主要完成的功能\n\n - hexo博客 master 分支 https://github.com/luoyunchong/hexo-blog\n - 放静态资源 https://github.com/luoyunchong/luoyunchong.github.io \n - github帮我发布的github Pages https://luoyunchong.github.io\n - 腾讯云服务器 nginx代理的静态资源，和GitHub Pages内容同步 http://blog.igeekfan.cn\n\n 我使用hexo写博客，每次写完博客，推送到hexo-blog的master分支后，想要让他编译生成静态文件后自动发布至一个ESC上的某个目录上（也推送至 luoyunchong.github.io 的主分支、github会把静态资源作为GitHub Pages内容);\n\n<!-- more -->\n\n### 相关技术\n- travis-ci\n- github、github pages\n- 腾讯云(ESC)、nginx、ssl(私钥、公钥)\n- hexo 使用markdown写的静态博客\n\n### 参考\n- [持续集成服务 Travis CI 教程](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html)\n- [How to Encrypt/Decrypt SSH Keys for Deployment](https://github.com/dwyl/learn-travis/blob/master/encrypted-ssh-keys-deployment.md)\n- [Travis CI 自动化部署博客](https://segmentfault.com/a/1190000011218410)\n- [使用Travis自动部署前端页面到阿里云服务器](https://blog.csdn.net/u011350541/article/details/84034141)\n- [Linux命令详解之–scp命令](https://www.linuxdaxue.com/linux-command-intro-scp.html)\n- [Linux ssh/scp连接时避免输入yes(公钥验证)](https://www.cnblogs.com/imzye/p/5133749.html)\n### 备注\n这个是shell的多行注释\n~~~\n:<<!\n这里的内容 shell 不会执行\n!\n~~~\n单行注释\n~~~\n# 注释。。\n~~~\n\n**$NAME**\n\n在.travis.yml文件中，以$开头的是环境变量，一些敏感数据为了安全保障，可在travis.org 中的settings中配置Environment Variables\n\nscp 命令用于linux下的跨主机之间的文件和目录复制\n\n在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，\n\nscp 拷文件可能会提示密码，或者检查key，如\n\n~~~\nAre you sure you want to continue connecting (yes/no)\n~~~\n\n可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。\n\n~~~\nscp [可选参数] file_source file_target\n#将public目录下的所有文件复制到$DEPLOY_IP下的/var/www/html/hexo-blog目录中。不检查key，\nscp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/\n#可用-i指定私钥。\nscp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder\n#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录\n#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码\ncd ~/.ssh\ncat id_rsa.pub >> authorized_keys\n~~~\n\n### 相关命令行配置\n在要发布的服务器ubuntu中运行\nscp -r \n~~~\ncd ~/.ssh\n# create ssh key\nssh-keygen -t rsa -b 4096 -C \"TravisCIDeployKey\"  #一直回车\n\n#这个是生成ssh key后 命令行显示的内容\n#Your identification has been saved in /home/ubuntu/.ssh/id_rsa.\n#Your public key has been saved in /home/ubuntu/.ssh/id_rsa.pub.\n#The key fingerprint is:\n#SHA256:Oy3Kclw+RigPNHZysyW6R0/ZgiykAB4njmQUJIOLNAk luoyunchong@foxmail.com\n#The key's randomart image is:\n#+---[RSA 2048]----+\n#|E+o              |\n#|+X .             |\n#|X.=              |\n#|=o  * = .        |\n#| . = B BSo       |\n#|  . = * *o.      |\n#|     O *+..      |\n#|    o.=.=o       |\n#|     +o. .       |\n#+----[SHA256]-----+\n\nls\n# 可以看到.ssh目录下得到了两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）\n#id_rsa  id_rsa.pub\n\n#append the public key to the list of \"authorized keys\":\ncat id_rsa.pub >> authorized_keys\n# ubuntu\nsudo apt-get install ruby-full\ngem install travis\ntravis login\n#输入github的用户名和密码，登录成功才能travis encrypt-file \n#Username: luoyunchong@foxmail.com\n#Password for luoyunchong@foxmail.com: ************\n#Successfully logged in as luoyunchong!\n\n# 一开始一直不行，官网介绍没有 -r + GitHub名字/仓库名，用于指定 仓库。\ntouch .travis.yml && travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog    \n# 看到下面，生成了id_rsa.enc\n#storing result as id_rsa.enc\n#storing secure env variables for decryption\n#\n#Make sure to add id_rsa.enc to the git repository.\n#Make sure not to add /home/ubuntu/.ssh/id_rsa to the git repository.\n#Commit all changes to your .travis.yml.\n\n# 查看.travis.yml文件\ncat .travis.yml\n~~~\n你会看到如下内容 \n\n~~~\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in id_rsa.enc -out ./id_rsa -d # 解密已加密的文件\n~~~\n\n### 注意\n把id_rsa.enc从服务器下载下来，放到hexo的项目根目录，id_rsa.enc就是私有秘钥加密后的文件，\n\n\n- www.travis-cli.org （免费,公有仓库）\n- www.travis-cli.com （收费，私有仓库，前100个构建是免费的，不知道为啥在github的M aketplace选择免费版时，他还是进的这个链接）\n\n在 www.travis-cli.com 是找不到key和iV，他们自动进入www.travis-cli.org，执行\n~~~\ntravis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog\n~~~\n自动把 $encrypted_77965d5bdd4d_key 的值 ，$encrypted_77965d5bdd4d_iv的值加入了cli.org中的环境变量中了，所以我们还是用org的 CI build吧。\n\n\nhexo 部署至luoyunchong.github.io后，github会自动部署至github Pages\n部署到自己的服务器：使用ssh 密钥，远程登录，把发布后的文件复制至服务器指定文件夹，此文件夹使用nginx\n\n### 完整.travis.yml文件配置\n~~~\n\nlanguage: node_js\nnode_js: stable\n\ncache:\n    apt: true\n    directories:\n        - node_modules # 缓存不经常更改的内容\n\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_3f5b9d00fa1f_key -iv $encrypted_3f5b9d00fa1f_iv\n  -in id_rsa.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n#before_script:\n # - npm install -g gulp\n\nscript:\n  - hexo clean  #清除\n  - hexo g\n\naddons:\n  ssh_known_hosts: $DEPLOY_IP\n\nafter_script:\n  # - cd ./public\n  # - git init\n  # - git config user.name \"luoyunchong\" # 修改name\n  # - git config user.email \"luoyunchong@foxmail.com\" # 修改email\n  # - git add .\n  # - git commit -m \"Travis CI Auto Builder\"\n  # - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master # GH_TOKEN是在Travis中配置token的名称 # 一种 \n  - git config user.name \"luoyunchong\" # 修改name\n  - git config user.email \"luoyunchong@foxmail.com\" # 修改email\n  - sed -i \"s/gh_token/${GH_TOKEN}/g\" ./_config.yml # 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！\n  - hexo deploy\n\nafter_success:\n  - pwd\n  - scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/\n\nbranches:\n  only:\n    - master\nenv:\n global:\n   - GH_REF: github.com/luoyunchong/luoyunchong.github.io.git\n\n\nnotifications:\n  email:\n    - luoyunchong@foxmail.com\n  on_success: change\n  on_failure: always\n~~~","source":"_posts/devops/travis-ci 持续集成hexo至github pages、腾讯云（ESC).md","raw":"---\ntitle: travis-ci 持续集成hexo至Github Pages、腾讯云（ESC)\ndate: 2019-06-27 10:30:26\ntags: \n- travis-cli\n- ssl\n- Ubuntu\ncategory:\n- DevOps\n---\n\n\n## 主要完成的功能\n\n - hexo博客 master 分支 https://github.com/luoyunchong/hexo-blog\n - 放静态资源 https://github.com/luoyunchong/luoyunchong.github.io \n - github帮我发布的github Pages https://luoyunchong.github.io\n - 腾讯云服务器 nginx代理的静态资源，和GitHub Pages内容同步 http://blog.igeekfan.cn\n\n 我使用hexo写博客，每次写完博客，推送到hexo-blog的master分支后，想要让他编译生成静态文件后自动发布至一个ESC上的某个目录上（也推送至 luoyunchong.github.io 的主分支、github会把静态资源作为GitHub Pages内容);\n\n<!-- more -->\n\n### 相关技术\n- travis-ci\n- github、github pages\n- 腾讯云(ESC)、nginx、ssl(私钥、公钥)\n- hexo 使用markdown写的静态博客\n\n### 参考\n- [持续集成服务 Travis CI 教程](http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html)\n- [How to Encrypt/Decrypt SSH Keys for Deployment](https://github.com/dwyl/learn-travis/blob/master/encrypted-ssh-keys-deployment.md)\n- [Travis CI 自动化部署博客](https://segmentfault.com/a/1190000011218410)\n- [使用Travis自动部署前端页面到阿里云服务器](https://blog.csdn.net/u011350541/article/details/84034141)\n- [Linux命令详解之–scp命令](https://www.linuxdaxue.com/linux-command-intro-scp.html)\n- [Linux ssh/scp连接时避免输入yes(公钥验证)](https://www.cnblogs.com/imzye/p/5133749.html)\n### 备注\n这个是shell的多行注释\n~~~\n:<<!\n这里的内容 shell 不会执行\n!\n~~~\n单行注释\n~~~\n# 注释。。\n~~~\n\n**$NAME**\n\n在.travis.yml文件中，以$开头的是环境变量，一些敏感数据为了安全保障，可在travis.org 中的settings中配置Environment Variables\n\nscp 命令用于linux下的跨主机之间的文件和目录复制\n\n在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，\n\nscp 拷文件可能会提示密码，或者检查key，如\n\n~~~\nAre you sure you want to continue connecting (yes/no)\n~~~\n\n可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。\n\n~~~\nscp [可选参数] file_source file_target\n#将public目录下的所有文件复制到$DEPLOY_IP下的/var/www/html/hexo-blog目录中。不检查key，\nscp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/\n#可用-i指定私钥。\nscp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder\n#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录\n#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码\ncd ~/.ssh\ncat id_rsa.pub >> authorized_keys\n~~~\n\n### 相关命令行配置\n在要发布的服务器ubuntu中运行\nscp -r \n~~~\ncd ~/.ssh\n# create ssh key\nssh-keygen -t rsa -b 4096 -C \"TravisCIDeployKey\"  #一直回车\n\n#这个是生成ssh key后 命令行显示的内容\n#Your identification has been saved in /home/ubuntu/.ssh/id_rsa.\n#Your public key has been saved in /home/ubuntu/.ssh/id_rsa.pub.\n#The key fingerprint is:\n#SHA256:Oy3Kclw+RigPNHZysyW6R0/ZgiykAB4njmQUJIOLNAk luoyunchong@foxmail.com\n#The key's randomart image is:\n#+---[RSA 2048]----+\n#|E+o              |\n#|+X .             |\n#|X.=              |\n#|=o  * = .        |\n#| . = B BSo       |\n#|  . = * *o.      |\n#|     O *+..      |\n#|    o.=.=o       |\n#|     +o. .       |\n#+----[SHA256]-----+\n\nls\n# 可以看到.ssh目录下得到了两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）\n#id_rsa  id_rsa.pub\n\n#append the public key to the list of \"authorized keys\":\ncat id_rsa.pub >> authorized_keys\n# ubuntu\nsudo apt-get install ruby-full\ngem install travis\ntravis login\n#输入github的用户名和密码，登录成功才能travis encrypt-file \n#Username: luoyunchong@foxmail.com\n#Password for luoyunchong@foxmail.com: ************\n#Successfully logged in as luoyunchong!\n\n# 一开始一直不行，官网介绍没有 -r + GitHub名字/仓库名，用于指定 仓库。\ntouch .travis.yml && travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog    \n# 看到下面，生成了id_rsa.enc\n#storing result as id_rsa.enc\n#storing secure env variables for decryption\n#\n#Make sure to add id_rsa.enc to the git repository.\n#Make sure not to add /home/ubuntu/.ssh/id_rsa to the git repository.\n#Commit all changes to your .travis.yml.\n\n# 查看.travis.yml文件\ncat .travis.yml\n~~~\n你会看到如下内容 \n\n~~~\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv\n  -in id_rsa.enc -out ./id_rsa -d # 解密已加密的文件\n~~~\n\n### 注意\n把id_rsa.enc从服务器下载下来，放到hexo的项目根目录，id_rsa.enc就是私有秘钥加密后的文件，\n\n\n- www.travis-cli.org （免费,公有仓库）\n- www.travis-cli.com （收费，私有仓库，前100个构建是免费的，不知道为啥在github的M aketplace选择免费版时，他还是进的这个链接）\n\n在 www.travis-cli.com 是找不到key和iV，他们自动进入www.travis-cli.org，执行\n~~~\ntravis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog\n~~~\n自动把 $encrypted_77965d5bdd4d_key 的值 ，$encrypted_77965d5bdd4d_iv的值加入了cli.org中的环境变量中了，所以我们还是用org的 CI build吧。\n\n\nhexo 部署至luoyunchong.github.io后，github会自动部署至github Pages\n部署到自己的服务器：使用ssh 密钥，远程登录，把发布后的文件复制至服务器指定文件夹，此文件夹使用nginx\n\n### 完整.travis.yml文件配置\n~~~\n\nlanguage: node_js\nnode_js: stable\n\ncache:\n    apt: true\n    directories:\n        - node_modules # 缓存不经常更改的内容\n\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_3f5b9d00fa1f_key -iv $encrypted_3f5b9d00fa1f_iv\n  -in id_rsa.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n\n# S: Build Lifecycle\ninstall:\n  - npm install\n\n#before_script:\n # - npm install -g gulp\n\nscript:\n  - hexo clean  #清除\n  - hexo g\n\naddons:\n  ssh_known_hosts: $DEPLOY_IP\n\nafter_script:\n  # - cd ./public\n  # - git init\n  # - git config user.name \"luoyunchong\" # 修改name\n  # - git config user.email \"luoyunchong@foxmail.com\" # 修改email\n  # - git add .\n  # - git commit -m \"Travis CI Auto Builder\"\n  # - git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master # GH_TOKEN是在Travis中配置token的名称 # 一种 \n  - git config user.name \"luoyunchong\" # 修改name\n  - git config user.email \"luoyunchong@foxmail.com\" # 修改email\n  - sed -i \"s/gh_token/${GH_TOKEN}/g\" ./_config.yml # 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！\n  - hexo deploy\n\nafter_success:\n  - pwd\n  - scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/\n\nbranches:\n  only:\n    - master\nenv:\n global:\n   - GH_REF: github.com/luoyunchong/luoyunchong.github.io.git\n\n\nnotifications:\n  email:\n    - luoyunchong@foxmail.com\n  on_success: change\n  on_failure: always\n~~~","slug":"devops/travis-ci 持续集成hexo至github pages、腾讯云（ESC)","published":1,"updated":"2019-06-29T05:56:14.517Z","_id":"cjxgyeoq70000hsux5hwsme3x","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"主要完成的功能\"><a href=\"#主要完成的功能\" class=\"headerlink\" title=\"主要完成的功能\"></a>主要完成的功能</h2><ul>\n<li><p>hexo博客 master 分支 <a href=\"https://github.com/luoyunchong/hexo-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/hexo-blog</a></p>\n</li>\n<li><p>放静态资源 <a href=\"https://github.com/luoyunchong/luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/luoyunchong.github.io</a> </p>\n</li>\n<li><p>github帮我发布的github Pages <a href=\"https://luoyunchong.github.io\">https://luoyunchong.github.io</a></p>\n</li>\n<li><p>腾讯云服务器 nginx代理的静态资源，和GitHub Pages内容同步 <a href=\"http://blog.igeekfan.cn\" target=\"_blank\" rel=\"noopener\">http://blog.igeekfan.cn</a></p>\n<p>我使用hexo写博客，每次写完博客，推送到hexo-blog的master分支后，想要让他编译生成静态文件后自动发布至一个ESC上的某个目录上（也推送至 luoyunchong.github.io 的主分支、github会把静态资源作为GitHub Pages内容);</p>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"相关技术\"><a href=\"#相关技术\" class=\"headerlink\" title=\"相关技术\"></a>相关技术</h3><ul>\n<li>travis-ci</li>\n<li>github、github pages</li>\n<li>腾讯云(ESC)、nginx、ssl(私钥、公钥)</li>\n<li>hexo 使用markdown写的静态博客</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" rel=\"noopener\">持续集成服务 Travis CI 教程</a></li>\n<li><a href=\"https://github.com/dwyl/learn-travis/blob/master/encrypted-ssh-keys-deployment.md\" target=\"_blank\" rel=\"noopener\">How to Encrypt/Decrypt SSH Keys for Deployment</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011218410\" target=\"_blank\" rel=\"noopener\">Travis CI 自动化部署博客</a></li>\n<li><a href=\"https://blog.csdn.net/u011350541/article/details/84034141\" target=\"_blank\" rel=\"noopener\">使用Travis自动部署前端页面到阿里云服务器</a></li>\n<li><a href=\"https://www.linuxdaxue.com/linux-command-intro-scp.html\" target=\"_blank\" rel=\"noopener\">Linux命令详解之–scp命令</a></li>\n<li><a href=\"https://www.cnblogs.com/imzye/p/5133749.html\" target=\"_blank\" rel=\"noopener\">Linux ssh/scp连接时避免输入yes(公钥验证)</a><h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3>这个是shell的多行注释<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:&lt;&lt;!</span><br><span class=\"line\">这里的内容 shell 不会执行</span><br><span class=\"line\">!</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>单行注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注释。。</span><br></pre></td></tr></table></figure>\n\n<p><strong>$NAME</strong></p>\n<p>在.travis.yml文件中，以$开头的是环境变量，一些敏感数据为了安全保障，可在travis.org 中的settings中配置Environment Variables</p>\n<p>scp 命令用于linux下的跨主机之间的文件和目录复制</p>\n<p>在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，</p>\n<p>scp 拷文件可能会提示密码，或者检查key，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Are you sure you want to continue connecting (yes/no)</span><br></pre></td></tr></table></figure>\n\n<p>可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [可选参数] file_source file_target</span><br><span class=\"line\">#将public目录下的所有文件复制到$DEPLOY_IP下的/var/www/html/hexo-blog目录中。不检查key，</span><br><span class=\"line\">scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/</span><br><span class=\"line\">#可用-i指定私钥。</span><br><span class=\"line\">scp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder</span><br><span class=\"line\">#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录</span><br><span class=\"line\">#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码</span><br><span class=\"line\">cd ~/.ssh</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关命令行配置\"><a href=\"#相关命令行配置\" class=\"headerlink\" title=\"相关命令行配置\"></a>相关命令行配置</h3><p>在要发布的服务器ubuntu中运行<br>scp -r </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh</span><br><span class=\"line\"># create ssh key</span><br><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &quot;TravisCIDeployKey&quot;  #一直回车</span><br><span class=\"line\"></span><br><span class=\"line\">#这个是生成ssh key后 命令行显示的内容</span><br><span class=\"line\">#Your identification has been saved in /home/ubuntu/.ssh/id_rsa.</span><br><span class=\"line\">#Your public key has been saved in /home/ubuntu/.ssh/id_rsa.pub.</span><br><span class=\"line\">#The key fingerprint is:</span><br><span class=\"line\">#SHA256:Oy3Kclw+RigPNHZysyW6R0/ZgiykAB4njmQUJIOLNAk luoyunchong@foxmail.com</span><br><span class=\"line\">#The key&apos;s randomart image is:</span><br><span class=\"line\">#+---[RSA 2048]----+</span><br><span class=\"line\">#|E+o              |</span><br><span class=\"line\">#|+X .             |</span><br><span class=\"line\">#|X.=              |</span><br><span class=\"line\">#|=o  * = .        |</span><br><span class=\"line\">#| . = B BSo       |</span><br><span class=\"line\">#|  . = * *o.      |</span><br><span class=\"line\">#|     O *+..      |</span><br><span class=\"line\">#|    o.=.=o       |</span><br><span class=\"line\">#|     +o. .       |</span><br><span class=\"line\">#+----[SHA256]-----+</span><br><span class=\"line\"></span><br><span class=\"line\">ls</span><br><span class=\"line\"># 可以看到.ssh目录下得到了两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）</span><br><span class=\"line\">#id_rsa  id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">#append the public key to the list of &quot;authorized keys&quot;:</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class=\"line\"># ubuntu</span><br><span class=\"line\">sudo apt-get install ruby-full</span><br><span class=\"line\">gem install travis</span><br><span class=\"line\">travis login</span><br><span class=\"line\">#输入github的用户名和密码，登录成功才能travis encrypt-file </span><br><span class=\"line\">#Username: luoyunchong@foxmail.com</span><br><span class=\"line\">#Password for luoyunchong@foxmail.com: ************</span><br><span class=\"line\">#Successfully logged in as luoyunchong!</span><br><span class=\"line\"></span><br><span class=\"line\"># 一开始一直不行，官网介绍没有 -r + GitHub名字/仓库名，用于指定 仓库。</span><br><span class=\"line\">touch .travis.yml &amp;&amp; travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog    </span><br><span class=\"line\"># 看到下面，生成了id_rsa.enc</span><br><span class=\"line\">#storing result as id_rsa.enc</span><br><span class=\"line\">#storing secure env variables for decryption</span><br><span class=\"line\">#</span><br><span class=\"line\">#Make sure to add id_rsa.enc to the git repository.</span><br><span class=\"line\">#Make sure not to add /home/ubuntu/.ssh/id_rsa to the git repository.</span><br><span class=\"line\">#Commit all changes to your .travis.yml.</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看.travis.yml文件</span><br><span class=\"line\">cat .travis.yml</span><br></pre></td></tr></table></figure>\n\n<p>你会看到如下内容 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv</span><br><span class=\"line\">  -in id_rsa.enc -out ./id_rsa -d # 解密已加密的文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>把id_rsa.enc从服务器下载下来，放到hexo的项目根目录，id_rsa.enc就是私有秘钥加密后的文件，</p>\n<ul>\n<li><a href=\"http://www.travis-cli.org\" target=\"_blank\" rel=\"noopener\">www.travis-cli.org</a> （免费,公有仓库）</li>\n<li><a href=\"http://www.travis-cli.com\" target=\"_blank\" rel=\"noopener\">www.travis-cli.com</a> （收费，私有仓库，前100个构建是免费的，不知道为啥在github的M aketplace选择免费版时，他还是进的这个链接）</li>\n</ul>\n<p>在 <a href=\"http://www.travis-cli.com\" target=\"_blank\" rel=\"noopener\">www.travis-cli.com</a> 是找不到key和iV，他们自动进入<a href=\"http://www.travis-cli.org，执行\" target=\"_blank\" rel=\"noopener\">www.travis-cli.org，执行</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog</span><br></pre></td></tr></table></figure>\n\n<p>自动把 $encrypted_77965d5bdd4d_key 的值 ，$encrypted_77965d5bdd4d_iv的值加入了cli.org中的环境变量中了，所以我们还是用org的 CI build吧。</p>\n<p>hexo 部署至luoyunchong.github.io后，github会自动部署至github Pages<br>部署到自己的服务器：使用ssh 密钥，远程登录，把发布后的文件复制至服务器指定文件夹，此文件夹使用nginx</p>\n<h3 id=\"完整-travis-yml文件配置\"><a href=\"#完整-travis-yml文件配置\" class=\"headerlink\" title=\"完整.travis.yml文件配置\"></a>完整.travis.yml文件配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js: stable</span><br><span class=\"line\"></span><br><span class=\"line\">cache:</span><br><span class=\"line\">    apt: true</span><br><span class=\"line\">    directories:</span><br><span class=\"line\">        - node_modules # 缓存不经常更改的内容</span><br><span class=\"line\"></span><br><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_3f5b9d00fa1f_key -iv $encrypted_3f5b9d00fa1f_iv</span><br><span class=\"line\">  -in id_rsa.enc -out ~/.ssh/id_rsa -d</span><br><span class=\"line\">- chmod 600 ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\"># S: Build Lifecycle</span><br><span class=\"line\">install:</span><br><span class=\"line\">  - npm install</span><br><span class=\"line\"></span><br><span class=\"line\">#before_script:</span><br><span class=\"line\"> # - npm install -g gulp</span><br><span class=\"line\"></span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo clean  #清除</span><br><span class=\"line\">  - hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">addons:</span><br><span class=\"line\">  ssh_known_hosts: $DEPLOY_IP</span><br><span class=\"line\"></span><br><span class=\"line\">after_script:</span><br><span class=\"line\">  # - cd ./public</span><br><span class=\"line\">  # - git init</span><br><span class=\"line\">  # - git config user.name &quot;luoyunchong&quot; # 修改name</span><br><span class=\"line\">  # - git config user.email &quot;luoyunchong@foxmail.com&quot; # 修改email</span><br><span class=\"line\">  # - git add .</span><br><span class=\"line\">  # - git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class=\"line\">  # - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master # GH_TOKEN是在Travis中配置token的名称 # 一种 </span><br><span class=\"line\">  - git config user.name &quot;luoyunchong&quot; # 修改name</span><br><span class=\"line\">  - git config user.email &quot;luoyunchong@foxmail.com&quot; # 修改email</span><br><span class=\"line\">  - sed -i &quot;s/gh_token/$&#123;GH_TOKEN&#125;/g&quot; ./_config.yml # 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！</span><br><span class=\"line\">  - hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\">after_success:</span><br><span class=\"line\">  - pwd</span><br><span class=\"line\">  - scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/</span><br><span class=\"line\"></span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">env:</span><br><span class=\"line\"> global:</span><br><span class=\"line\">   - GH_REF: github.com/luoyunchong/luoyunchong.github.io.git</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">notifications:</span><br><span class=\"line\">  email:</span><br><span class=\"line\">    - luoyunchong@foxmail.com</span><br><span class=\"line\">  on_success: change</span><br><span class=\"line\">  on_failure: always</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"主要完成的功能\"><a href=\"#主要完成的功能\" class=\"headerlink\" title=\"主要完成的功能\"></a>主要完成的功能</h2><ul>\n<li><p>hexo博客 master 分支 <a href=\"https://github.com/luoyunchong/hexo-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/hexo-blog</a></p>\n</li>\n<li><p>放静态资源 <a href=\"https://github.com/luoyunchong/luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/luoyunchong.github.io</a> </p>\n</li>\n<li><p>github帮我发布的github Pages <a href=\"https://luoyunchong.github.io\">https://luoyunchong.github.io</a></p>\n</li>\n<li><p>腾讯云服务器 nginx代理的静态资源，和GitHub Pages内容同步 <a href=\"http://blog.igeekfan.cn\" target=\"_blank\" rel=\"noopener\">http://blog.igeekfan.cn</a></p>\n<p>我使用hexo写博客，每次写完博客，推送到hexo-blog的master分支后，想要让他编译生成静态文件后自动发布至一个ESC上的某个目录上（也推送至 luoyunchong.github.io 的主分支、github会把静态资源作为GitHub Pages内容);</p>\n</li>\n</ul>","more":"<h3 id=\"相关技术\"><a href=\"#相关技术\" class=\"headerlink\" title=\"相关技术\"></a>相关技术</h3><ul>\n<li>travis-ci</li>\n<li>github、github pages</li>\n<li>腾讯云(ESC)、nginx、ssl(私钥、公钥)</li>\n<li>hexo 使用markdown写的静态博客</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html\" target=\"_blank\" rel=\"noopener\">持续集成服务 Travis CI 教程</a></li>\n<li><a href=\"https://github.com/dwyl/learn-travis/blob/master/encrypted-ssh-keys-deployment.md\" target=\"_blank\" rel=\"noopener\">How to Encrypt/Decrypt SSH Keys for Deployment</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000011218410\" target=\"_blank\" rel=\"noopener\">Travis CI 自动化部署博客</a></li>\n<li><a href=\"https://blog.csdn.net/u011350541/article/details/84034141\" target=\"_blank\" rel=\"noopener\">使用Travis自动部署前端页面到阿里云服务器</a></li>\n<li><a href=\"https://www.linuxdaxue.com/linux-command-intro-scp.html\" target=\"_blank\" rel=\"noopener\">Linux命令详解之–scp命令</a></li>\n<li><a href=\"https://www.cnblogs.com/imzye/p/5133749.html\" target=\"_blank\" rel=\"noopener\">Linux ssh/scp连接时避免输入yes(公钥验证)</a><h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3>这个是shell的多行注释<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:&lt;&lt;!</span><br><span class=\"line\">这里的内容 shell 不会执行</span><br><span class=\"line\">!</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>单行注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 注释。。</span><br></pre></td></tr></table></figure>\n\n<p><strong>$NAME</strong></p>\n<p>在.travis.yml文件中，以$开头的是环境变量，一些敏感数据为了安全保障，可在travis.org 中的settings中配置Environment Variables</p>\n<p>scp 命令用于linux下的跨主机之间的文件和目录复制</p>\n<p>在首次连接服务器时，会弹出公钥确认的提示。这会导致某些自动化任务，由于初次连接服务器而导致自动化任务中断，</p>\n<p>scp 拷文件可能会提示密码，或者检查key，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Are you sure you want to continue connecting (yes/no)</span><br></pre></td></tr></table></figure>\n\n<p>可在 StrictHostKeyChecking选项，用 -o 参数指定后，则不检查该项。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [可选参数] file_source file_target</span><br><span class=\"line\">#将public目录下的所有文件复制到$DEPLOY_IP下的/var/www/html/hexo-blog目录中。不检查key，</span><br><span class=\"line\">scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/</span><br><span class=\"line\">#可用-i指定私钥。</span><br><span class=\"line\">scp -o  StrictHostKeyChecking=no -i .ssh/id_rsa yourfile user@destinate_ip:/dest_folder</span><br><span class=\"line\">#或将自己的公钥放到目标机的authorized_keys文件里，使自己为目标机的信任机器，实现无密码登录</span><br><span class=\"line\">#这个是在生成ssh key 后，将公钥放到authorized_keys文件中。使用密钥对可以实现不输入密码</span><br><span class=\"line\">cd ~/.ssh</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关命令行配置\"><a href=\"#相关命令行配置\" class=\"headerlink\" title=\"相关命令行配置\"></a>相关命令行配置</h3><p>在要发布的服务器ubuntu中运行<br>scp -r </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.ssh</span><br><span class=\"line\"># create ssh key</span><br><span class=\"line\">ssh-keygen -t rsa -b 4096 -C &quot;TravisCIDeployKey&quot;  #一直回车</span><br><span class=\"line\"></span><br><span class=\"line\">#这个是生成ssh key后 命令行显示的内容</span><br><span class=\"line\">#Your identification has been saved in /home/ubuntu/.ssh/id_rsa.</span><br><span class=\"line\">#Your public key has been saved in /home/ubuntu/.ssh/id_rsa.pub.</span><br><span class=\"line\">#The key fingerprint is:</span><br><span class=\"line\">#SHA256:Oy3Kclw+RigPNHZysyW6R0/ZgiykAB4njmQUJIOLNAk luoyunchong@foxmail.com</span><br><span class=\"line\">#The key&apos;s randomart image is:</span><br><span class=\"line\">#+---[RSA 2048]----+</span><br><span class=\"line\">#|E+o              |</span><br><span class=\"line\">#|+X .             |</span><br><span class=\"line\">#|X.=              |</span><br><span class=\"line\">#|=o  * = .        |</span><br><span class=\"line\">#| . = B BSo       |</span><br><span class=\"line\">#|  . = * *o.      |</span><br><span class=\"line\">#|     O *+..      |</span><br><span class=\"line\">#|    o.=.=o       |</span><br><span class=\"line\">#|     +o. .       |</span><br><span class=\"line\">#+----[SHA256]-----+</span><br><span class=\"line\"></span><br><span class=\"line\">ls</span><br><span class=\"line\"># 可以看到.ssh目录下得到了两个文件：id_rsa（私有秘钥）和id_rsa.pub（公有密钥）</span><br><span class=\"line\">#id_rsa  id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">#append the public key to the list of &quot;authorized keys&quot;:</span><br><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class=\"line\"># ubuntu</span><br><span class=\"line\">sudo apt-get install ruby-full</span><br><span class=\"line\">gem install travis</span><br><span class=\"line\">travis login</span><br><span class=\"line\">#输入github的用户名和密码，登录成功才能travis encrypt-file </span><br><span class=\"line\">#Username: luoyunchong@foxmail.com</span><br><span class=\"line\">#Password for luoyunchong@foxmail.com: ************</span><br><span class=\"line\">#Successfully logged in as luoyunchong!</span><br><span class=\"line\"></span><br><span class=\"line\"># 一开始一直不行，官网介绍没有 -r + GitHub名字/仓库名，用于指定 仓库。</span><br><span class=\"line\">touch .travis.yml &amp;&amp; travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog    </span><br><span class=\"line\"># 看到下面，生成了id_rsa.enc</span><br><span class=\"line\">#storing result as id_rsa.enc</span><br><span class=\"line\">#storing secure env variables for decryption</span><br><span class=\"line\">#</span><br><span class=\"line\">#Make sure to add id_rsa.enc to the git repository.</span><br><span class=\"line\">#Make sure not to add /home/ubuntu/.ssh/id_rsa to the git repository.</span><br><span class=\"line\">#Commit all changes to your .travis.yml.</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看.travis.yml文件</span><br><span class=\"line\">cat .travis.yml</span><br></pre></td></tr></table></figure>\n\n<p>你会看到如下内容 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_77965d5bdd4d_key -iv $encrypted_77965d5bdd4d_iv</span><br><span class=\"line\">  -in id_rsa.enc -out ./id_rsa -d # 解密已加密的文件</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>把id_rsa.enc从服务器下载下来，放到hexo的项目根目录，id_rsa.enc就是私有秘钥加密后的文件，</p>\n<ul>\n<li><a href=\"http://www.travis-cli.org\" target=\"_blank\" rel=\"noopener\">www.travis-cli.org</a> （免费,公有仓库）</li>\n<li><a href=\"http://www.travis-cli.com\" target=\"_blank\" rel=\"noopener\">www.travis-cli.com</a> （收费，私有仓库，前100个构建是免费的，不知道为啥在github的M aketplace选择免费版时，他还是进的这个链接）</li>\n</ul>\n<p>在 <a href=\"http://www.travis-cli.com\" target=\"_blank\" rel=\"noopener\">www.travis-cli.com</a> 是找不到key和iV，他们自动进入<a href=\"http://www.travis-cli.org，执行\" target=\"_blank\" rel=\"noopener\">www.travis-cli.org，执行</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">travis encrypt-file ~/.ssh/id_rsa --add -r luoyunchong/hexo-blog</span><br></pre></td></tr></table></figure>\n\n<p>自动把 $encrypted_77965d5bdd4d_key 的值 ，$encrypted_77965d5bdd4d_iv的值加入了cli.org中的环境变量中了，所以我们还是用org的 CI build吧。</p>\n<p>hexo 部署至luoyunchong.github.io后，github会自动部署至github Pages<br>部署到自己的服务器：使用ssh 密钥，远程登录，把发布后的文件复制至服务器指定文件夹，此文件夹使用nginx</p>\n<h3 id=\"完整-travis-yml文件配置\"><a href=\"#完整-travis-yml文件配置\" class=\"headerlink\" title=\"完整.travis.yml文件配置\"></a>完整.travis.yml文件配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js: stable</span><br><span class=\"line\"></span><br><span class=\"line\">cache:</span><br><span class=\"line\">    apt: true</span><br><span class=\"line\">    directories:</span><br><span class=\"line\">        - node_modules # 缓存不经常更改的内容</span><br><span class=\"line\"></span><br><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_3f5b9d00fa1f_key -iv $encrypted_3f5b9d00fa1f_iv</span><br><span class=\"line\">  -in id_rsa.enc -out ~/.ssh/id_rsa -d</span><br><span class=\"line\">- chmod 600 ~/.ssh/id_rsa</span><br><span class=\"line\"></span><br><span class=\"line\"># S: Build Lifecycle</span><br><span class=\"line\">install:</span><br><span class=\"line\">  - npm install</span><br><span class=\"line\"></span><br><span class=\"line\">#before_script:</span><br><span class=\"line\"> # - npm install -g gulp</span><br><span class=\"line\"></span><br><span class=\"line\">script:</span><br><span class=\"line\">  - hexo clean  #清除</span><br><span class=\"line\">  - hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">addons:</span><br><span class=\"line\">  ssh_known_hosts: $DEPLOY_IP</span><br><span class=\"line\"></span><br><span class=\"line\">after_script:</span><br><span class=\"line\">  # - cd ./public</span><br><span class=\"line\">  # - git init</span><br><span class=\"line\">  # - git config user.name &quot;luoyunchong&quot; # 修改name</span><br><span class=\"line\">  # - git config user.email &quot;luoyunchong@foxmail.com&quot; # 修改email</span><br><span class=\"line\">  # - git add .</span><br><span class=\"line\">  # - git commit -m &quot;Travis CI Auto Builder&quot;</span><br><span class=\"line\">  # - git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master # GH_TOKEN是在Travis中配置token的名称 # 一种 </span><br><span class=\"line\">  - git config user.name &quot;luoyunchong&quot; # 修改name</span><br><span class=\"line\">  - git config user.email &quot;luoyunchong@foxmail.com&quot; # 修改email</span><br><span class=\"line\">  - sed -i &quot;s/gh_token/$&#123;GH_TOKEN&#125;/g&quot; ./_config.yml # 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！</span><br><span class=\"line\">  - hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\">after_success:</span><br><span class=\"line\">  - pwd</span><br><span class=\"line\">  - scp -o StrictHostKeyChecking=no -r public/*  ubuntu@$DEPLOY_IP:/var/www/html/hexo-blog/</span><br><span class=\"line\"></span><br><span class=\"line\">branches:</span><br><span class=\"line\">  only:</span><br><span class=\"line\">    - master</span><br><span class=\"line\">env:</span><br><span class=\"line\"> global:</span><br><span class=\"line\">   - GH_REF: github.com/luoyunchong/luoyunchong.github.io.git</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">notifications:</span><br><span class=\"line\">  email:</span><br><span class=\"line\">    - luoyunchong@foxmail.com</span><br><span class=\"line\">  on_success: change</span><br><span class=\"line\">  on_failure: always</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Jun 29 2019 13:56:14 GMT+0800 (GMT+08:00)","title":"travis-ci 持续集成hexo至Github Pages、腾讯云（ESC)","path":"2019/06/27/devops/travis-ci 持续集成hexo至github pages、腾讯云（ESC)/","eyeCatchImage":null,"excerpt":"<h2 id=\"主要完成的功能\"><a href=\"#主要完成的功能\" class=\"headerlink\" title=\"主要完成的功能\"></a>主要完成的功能</h2><ul>\n<li><p>hexo博客 master 分支 <a href=\"https://github.com/luoyunchong/hexo-blog\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/hexo-blog</a></p>\n</li>\n<li><p>放静态资源 <a href=\"https://github.com/luoyunchong/luoyunchong.github.io\" target=\"_blank\" rel=\"noopener\">https://github.com/luoyunchong/luoyunchong.github.io</a> </p>\n</li>\n<li><p>github帮我发布的github Pages <a href=\"https://luoyunchong.github.io\">https://luoyunchong.github.io</a></p>\n</li>\n<li><p>腾讯云服务器 nginx代理的静态资源，和GitHub Pages内容同步 <a href=\"http://blog.igeekfan.cn\" target=\"_blank\" rel=\"noopener\">http://blog.igeekfan.cn</a></p>\n<p>我使用hexo写博客，每次写完博客，推送到hexo-blog的master分支后，想要让他编译生成静态文件后自动发布至一个ESC上的某个目录上（也推送至 luoyunchong.github.io 的主分支、github会把静态资源作为GitHub Pages内容);</p>\n</li>\n</ul>","date":"2019-06-27T02:30:26.000Z","pv":0,"totalPV":0,"categories":"DevOps","tags":["Ubuntu","travis-cli","ssl"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"cjxcrmiti000600uxejm2r7ox","category_id":"cjxcrmitn000800uxy5hcr2sy","_id":"cjxcrmitx000j00uxjqeyr710"},{"post_id":"cjxcrmitl000700uxmyml0u3j","category_id":"cjxcrmitn000800uxy5hcr2sy","_id":"cjxcrmiu0000o00ux86qq9urh"},{"post_id":"cjxcrmitp000a00uxyxrxv7rm","category_id":"cjxcrmitx000i00uxmln0w03h","_id":"cjxcrmiu2000t00uxkb0wee1d"},{"post_id":"cjxcrmitq000b00ux9fmpf5kl","category_id":"cjxcrmiu0000p00uxl638inyh","_id":"cjxcrmiu4000y00uxy40tewiw"},{"post_id":"cjxcrmits000c00uxu6zkysd0","category_id":"cjxcrmiu3000u00ux8ja1x5nb","_id":"cjxcrmiu7001400uxonhio1k5"},{"post_id":"cjxcrmitx000h00uxdsve5631","category_id":"cjxcrmiu5000z00uxsb89o0qb","_id":"cjxcrmiua001d00uxpr7n8rj8"},{"post_id":"cjxcrmiu8001a00ux2yqsoy1r","category_id":"cjxcrmiu8001700uxrwg1upv1","_id":"cjxcrmiud001j00uxl42srtpk"},{"post_id":"cjxcrmity000l00ux3nkitiq0","category_id":"cjxcrmiu8001700uxrwg1upv1","_id":"cjxcrmiue001m00ux1iqyjnzx"},{"post_id":"cjxcrmiu1000r00uxurdfb3yd","category_id":"cjxcrmiua001e00ux6f6e3yjn","_id":"cjxcrmiue001n00uxf2kq0ltr"},{"post_id":"cjxcrmiu2000s00ux6zj9nt3w","category_id":"cjxcrmiud001k00uxz6e55p79","_id":"cjxcrmiuf001q00uxcbxmqovu"},{"post_id":"cjxcrmiu3000w00ux14yhwqhu","category_id":"cjxcrmiue001o00ux0an7vw01","_id":"cjxcrmiug001v00uxkx07w4bx"},{"post_id":"cjxcrmiu4000x00uxoc8t1axy","category_id":"cjxcrmiue001o00ux0an7vw01","_id":"cjxcrmiuh001z00uxmsje9may"},{"post_id":"cjxcrmiu5001000ux3h41gxao","category_id":"cjxcrmiug001u00uxjj2mgwe9","_id":"cjxcrmiui002300uxp8qip9fx"},{"post_id":"cjxcrmiu6001300uxumffpszy","category_id":"cjxcrmiu8001700uxrwg1upv1","_id":"cjxcrmiui002600uxnf1w6hns"},{"post_id":"cjxcrmiu7001600uxrk777o9d","category_id":"cjxcrmiui002200uxyj2f05d7","_id":"cjxcrmiuj002b00ux5t9udth6"},{"post_id":"cjxcrmiu9001c00uxsw06v370","category_id":"cjxcrmiuj002700ux1izhwc81","_id":"cjxcrmiul002g00uxfcj35735"},{"post_id":"cjxcrmiub001g00ux8qdclfy9","category_id":"cjxcrmiuj002700ux1izhwc81","_id":"cjxcrmiul002k00uxc67zsyjx"},{"post_id":"cjxcrmiuc001i00uxu3w4l533","category_id":"cjxcrmiuk002f00ux3ekzvo4s","_id":"cjxcrmium002m00uxkvxo5hwv"},{"post_id":"cjxcrmiuy003i00uxhn6gup0x","category_id":"cjxcrmiug001u00uxjj2mgwe9","_id":"cjxcrmiuz003k00ux8c5jfc54"},{"post_id":"cjxcrmiv1003o00uxje8vshim","category_id":"cjxcrmitn000800uxy5hcr2sy","_id":"cjxcrmiv2003q00uxhoi9zu7p"},{"post_id":"cjxgyeoq70000hsux5hwsme3x","category_id":"cjxgyeoqd0001hsuxbf2bzmqn","_id":"cjxgyeoqj0004hsux69z42s4k"}],"PostTag":[{"post_id":"cjxcrmiti000600uxejm2r7ox","tag_id":"cjxcrmito000900uxoj1ckw0c","_id":"cjxcrmitv000f00uxeawj3icb"},{"post_id":"cjxcrmitl000700uxmyml0u3j","tag_id":"cjxcrmitu000e00uxgi4qwkee","_id":"cjxcrmitz000m00ux9q7rxl3c"},{"post_id":"cjxcrmitq000b00ux9fmpf5kl","tag_id":"cjxcrmity000k00uxt6cw5glm","_id":"cjxcrmiu6001200ux29iwlplx"},{"post_id":"cjxcrmitq000b00ux9fmpf5kl","tag_id":"cjxcrmiu1000q00ux0z8lw3zn","_id":"cjxcrmiu7001500uxsi0ars00"},{"post_id":"cjxcrmitq000b00ux9fmpf5kl","tag_id":"cjxcrmiu3000v00uxke47kgau","_id":"cjxcrmiu8001900uxybaf4fqu"},{"post_id":"cjxcrmits000c00uxu6zkysd0","tag_id":"cjxcrmiu5001100ux7xz5x9u1","_id":"cjxcrmiu9001b00uxp0234kmc"},{"post_id":"cjxcrmitw000g00ux78l3w7v6","tag_id":"cjxcrmiu8001800uxaumku1ks","_id":"cjxcrmiuc001h00uxqfam1mmq"},{"post_id":"cjxcrmitx000h00uxdsve5631","tag_id":"cjxcrmiua001f00uxc7s6ude9","_id":"cjxcrmiuf001t00ux76z05yu4"},{"post_id":"cjxcrmitx000h00uxdsve5631","tag_id":"cjxcrmiud001l00uxleoncy0u","_id":"cjxcrmiug001w00uxzuqakwkt"},{"post_id":"cjxcrmitx000h00uxdsve5631","tag_id":"cjxcrmiue001p00uxweeksyoy","_id":"cjxcrmiuh001y00uxc9ikk65z"},{"post_id":"cjxcrmity000l00ux3nkitiq0","tag_id":"cjxcrmiuf001s00ux8rhd79vu","_id":"cjxcrmiui002500uxhmmtix6k"},{"post_id":"cjxcrmity000l00ux3nkitiq0","tag_id":"cjxcrmiua001f00uxc7s6ude9","_id":"cjxcrmiuj002800uxjl49ggof"},{"post_id":"cjxcrmity000l00ux3nkitiq0","tag_id":"cjxcrmiuh002100uxecdqgy4c","_id":"cjxcrmiuj002a00uxb6crmce0"},{"post_id":"cjxcrmitz000n00uxtxy32ivi","tag_id":"cjxcrmiui002400ux0yh4xqsb","_id":"cjxcrmiuk002e00ux38x11ckc"},{"post_id":"cjxcrmitz000n00uxtxy32ivi","tag_id":"cjxcrmiuj002900ux6lzj6clx","_id":"cjxcrmiul002h00uxkworf7nu"},{"post_id":"cjxcrmiu1000r00uxurdfb3yd","tag_id":"cjxcrmiuk002d00uxsi1aezg6","_id":"cjxcrmiul002j00uxoulzalbi"},{"post_id":"cjxcrmiu2000s00ux6zj9nt3w","tag_id":"cjxcrmiul002i00uxnhj0kege","_id":"cjxcrmiun002o00uxbxxsc1ie"},{"post_id":"cjxcrmiu2000s00ux6zj9nt3w","tag_id":"cjxcrmiuh002100uxecdqgy4c","_id":"cjxcrmiun002p00uxxl8ftnu8"},{"post_id":"cjxcrmiu3000w00ux14yhwqhu","tag_id":"cjxcrmiuk002d00uxsi1aezg6","_id":"cjxcrmiuo002s00uxurr5y5yz"},{"post_id":"cjxcrmiu3000w00ux14yhwqhu","tag_id":"cjxcrmiun002q00ux0m44iyed","_id":"cjxcrmiuo002t00ux8odnu09k"},{"post_id":"cjxcrmiu4000x00uxoc8t1axy","tag_id":"cjxcrmiuk002d00uxsi1aezg6","_id":"cjxcrmiuo002v00uxbl1u0rrl"},{"post_id":"cjxcrmiu4000x00uxoc8t1axy","tag_id":"cjxcrmitu000e00uxgi4qwkee","_id":"cjxcrmiup002w00uxsqxr9n3z"},{"post_id":"cjxcrmiu5001000ux3h41gxao","tag_id":"cjxcrmiuo002u00uxzy47lgit","_id":"cjxcrmiuq003000ux27hfxyz4"},{"post_id":"cjxcrmiu5001000ux3h41gxao","tag_id":"cjxcrmiup002x00uxm0cjov3v","_id":"cjxcrmiuq003100uxzpfwvfrl"},{"post_id":"cjxcrmiu5001000ux3h41gxao","tag_id":"cjxcrmiup002y00uxgq4gymts","_id":"cjxcrmiur003300uxy9ycune5"},{"post_id":"cjxcrmiu6001300uxumffpszy","tag_id":"cjxcrmiuq002z00uxi0rvzv2h","_id":"cjxcrmiur003400ux3dybo208"},{"post_id":"cjxcrmiu7001600uxrk777o9d","tag_id":"cjxcrmiuq003200ux9i85rkeb","_id":"cjxcrmius003700uxf5ht3ri5"},{"post_id":"cjxcrmiu7001600uxrk777o9d","tag_id":"cjxcrmiur003500uxvdckighg","_id":"cjxcrmius003800uxt68hveie"},{"post_id":"cjxcrmiu8001a00ux2yqsoy1r","tag_id":"cjxcrmiur003600ux1281s273","_id":"cjxcrmius003a00uxde088kjz"},{"post_id":"cjxcrmiu9001c00uxsw06v370","tag_id":"cjxcrmius003900uxm6r033sg","_id":"cjxcrmiut003c00uxok5r6an6"},{"post_id":"cjxcrmiub001g00ux8qdclfy9","tag_id":"cjxcrmius003b00uxx8qk82c6","_id":"cjxcrmiut003e00ux3gp2shdk"},{"post_id":"cjxcrmiuc001i00uxu3w4l533","tag_id":"cjxcrmiut003d00uxv3e7euao","_id":"cjxcrmiuu003g00uxotz1arpi"},{"post_id":"cjxcrmiuc001i00uxu3w4l533","tag_id":"cjxcrmiut003f00ux2r3yjazk","_id":"cjxcrmiuu003h00ux5z6qmv3l"},{"post_id":"cjxcrmiuy003i00uxhn6gup0x","tag_id":"cjxcrmitu000e00uxgi4qwkee","_id":"cjxcrmiuz003l00uxqzf6d050"},{"post_id":"cjxcrmiuy003i00uxhn6gup0x","tag_id":"cjxcrmiuo002u00uxzy47lgit","_id":"cjxcrmiv0003m00ux4d7p1rd9"},{"post_id":"cjxcrmiuy003i00uxhn6gup0x","tag_id":"cjxcrmiuz003j00ux8skbeplz","_id":"cjxcrmiv0003n00ux258ncz5g"},{"post_id":"cjxcrmiv1003o00uxje8vshim","tag_id":"cjxcrmitu000e00uxgi4qwkee","_id":"cjxcrmiv2003p00uxgepjqwit"},{"post_id":"cjxgyeoq70000hsux5hwsme3x","tag_id":"cjxgyeoqh0002hsuxpf0nv8fr","_id":"cjxgyeoqj0005hsux230kjpn1"},{"post_id":"cjxgyeoq70000hsux5hwsme3x","tag_id":"cjxgyeoqi0003hsuxr6dni7mk","_id":"cjxgyeoqk0006hsux3tgq0m74"},{"post_id":"cjxgyeoq70000hsux5hwsme3x","tag_id":"cjxcrmiua001f00uxc7s6ude9","_id":"cjxgyeoqk0007hsuxsz1tc2rt"}],"Tag":[{"name":"ABP 代码生成器","_id":"cjxcrmito000900uxoj1ckw0c"},{"name":"ABP","_id":"cjxcrmitu000e00uxgi4qwkee"},{"name":"hexo","_id":"cjxcrmity000k00uxt6cw5glm"},{"name":"material-x","_id":"cjxcrmiu1000q00ux0z8lw3zn"},{"name":"gitalk","_id":"cjxcrmiu3000v00uxke47kgau"},{"name":"Git","_id":"cjxcrmiu5001100ux7xz5x9u1"},{"name":"TypeScript","_id":"cjxcrmiu8001800uxaumku1ks"},{"name":"Ubuntu","_id":"cjxcrmiua001f00uxc7s6ude9"},{"name":"Redis","_id":"cjxcrmiud001l00uxleoncy0u"},{"name":"IIS","_id":"cjxcrmiue001p00uxweeksyoy"},{"name":"ASP.NET Core","_id":"cjxcrmiuf001s00ux8rhd79vu"},{"name":"Docker","_id":"cjxcrmiuh002100uxecdqgy4c"},{"name":"RabbitMQ","_id":"cjxcrmiui002400ux0yh4xqsb"},{"name":"Mongodb","_id":"cjxcrmiuj002900ux6lzj6clx"},{"name":"MySQL","_id":"cjxcrmiuk002d00uxsi1aezg6"},{"name":"nginx","_id":"cjxcrmiul002i00uxnhj0kege"},{"name":"Navicat Premium 12","_id":"cjxcrmiun002q00ux0m44iyed"},{"name":".NET Framework","_id":"cjxcrmiuo002u00uxzy47lgit"},{"name":"RazorEngine","_id":"cjxcrmiup002x00uxm0cjov3v"},{"name":"代码生成器","_id":"cjxcrmiup002y00uxgq4gymts"},{"name":"Rshiny","_id":"cjxcrmiuq002z00uxi0rvzv2h"},{"name":".NET","_id":"cjxcrmiuq003200ux9i85rkeb"},{"name":"Visual Studio","_id":"cjxcrmiur003500uxvdckighg"},{"name":"Node.js","_id":"cjxcrmiur003600ux1281s273"},{"name":"webpack","_id":"cjxcrmius003900uxm6r033sg"},{"name":".NET Core","_id":"cjxcrmius003b00uxx8qk82c6"},{"name":"账号安全","_id":"cjxcrmiut003d00uxv3e7euao"},{"name":"隐私","_id":"cjxcrmiut003f00ux2r3yjazk"},{"name":"R.NET","_id":"cjxcrmiuz003j00ux8skbeplz"},{"name":"travis-cli","_id":"cjxgyeoqh0002hsuxpf0nv8fr"},{"name":"ssl","_id":"cjxgyeoqi0003hsuxr6dni7mk"}]}}