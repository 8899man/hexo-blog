{"meta":{"title":"天上有木月博客","subtitle":null,"description":null,"author":"IGeekFan","url":"https://luoyunchong.github.io/hexo-blog","root":"/hexo-blog/"},"pages":[{"title":"404 Not Found","date":"2019-06-25T06:56:00.679Z","updated":"2019-06-25T06:56:00.679Z","comments":true,"path":"404.html","permalink":"https://luoyunchong.github.io/hexo-blog/404.html","excerpt":"","text":"404 Not Found 很抱歉，您访问的页面不存在可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2019-06-25T06:22:05.393Z","updated":"2019-06-25T06:22:05.393Z","comments":true,"path":"about/index.html","permalink":"https://luoyunchong.github.io/hexo-blog/about/index.html","excerpt":"","text":"你如今的气质里，藏着你走过的路，读过的书，和爱过的人"},{"title":"所有分类","date":"2019-06-25T06:22:05.394Z","updated":"2019-06-25T06:22:05.394Z","comments":true,"path":"categories/index.html","permalink":"https://luoyunchong.github.io/hexo-blog/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2019-06-25T06:22:05.395Z","updated":"2019-06-25T06:22:05.395Z","comments":true,"path":"friends/index.html","permalink":"https://luoyunchong.github.io/hexo-blog/friends/index.html","excerpt":"","text":"各位大佬想交换友链的话可以在下方留言，必须要有名称、头像链接、和至少一个标签哦～ 名称： xaoxuu’s blog头像： https://img.vim-cn.com/76/c339fd7092750f472da9ad17bd7c0081a1f0e2.jpg网址： https://xaoxuu.com/blog/标签： iOS"},{"title":"所有标签","date":"2019-06-25T06:22:05.397Z","updated":"2019-06-25T06:22:05.397Z","comments":true,"path":"tags/index.html","permalink":"https://luoyunchong.github.io/hexo-blog/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-06-25T06:22:05.396Z","updated":"2019-06-25T06:22:05.396Z","comments":true,"path":"mylist/index.html","permalink":"https://luoyunchong.github.io/hexo-blog/mylist/index.html","excerpt":"","text":""}],"posts":[{"title":"Git的使用学习","slug":"命令行专题/Git的使用学习","date":"2019-06-25T05:58:06.000Z","updated":"2019-06-25T06:22:05.377Z","comments":true,"path":"2019/06/25/命令行专题/Git的使用学习/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/25/命令行专题/Git的使用学习/","excerpt":"","text":"git 默认不区分文件名大小写,配置git大小写敏感 1git config core.ignorecase false","categories":[{"name":"Git","slug":"Git","permalink":"https://luoyunchong.github.io/hexo-blog/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Git/"}]},{"title":"hexo-theme-material-x+gitalk","slug":"大前端/hexo-theme-material-x-gitalk","date":"2019-06-25T05:57:09.000Z","updated":"2019-06-25T06:22:05.381Z","comments":true,"path":"2019/06/25/大前端/hexo-theme-material-x-gitalk/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/25/大前端/hexo-theme-material-x-gitalk/","excerpt":"hexo-theme-material-x +gitalk 实现评论系统集成关于hexo 中使用Material-x为主题时，增加评论系统 gitalk material-x 主题 https://xaoxuu.com/wiki/material-x/third-party-services/index.html gitalk开源地址 https://github.com/gitalk/gitalk","text":"hexo-theme-material-x +gitalk 实现评论系统集成关于hexo 中使用Material-x为主题时，增加评论系统 gitalk material-x 主题 https://xaoxuu.com/wiki/material-x/third-party-services/index.html gitalk开源地址 https://github.com/gitalk/gitalk 根目录的配置项 123456gitalk: 要使用哪个请复制到根目录配置文件！ clientID: 你的clientID clientSecret: 你的clientSecret repo: 你的repo名 #这个直接就是仓储名 owner: 你的GitHub名 admin: [] 至少填写你的GitHub名 clientID和clientSecret如何得到： 先要有github账号， 点击 New OAuth App（后面这个链接）： https://github.com/settings/applications/new 填写信息：Application name 随便填，Homepage URL 和 Authorization callback URL 都写你的 网址，我的是：https://luoyunchong.github.io/hexo-blog/ 生成后，就会有clientID和clientSecret 参考我的配置项 https://github.com/luoyunchong/hexo-blog/blob/docs/_config.yml 123456gitalk: clientID: 70ba179c7cf0f158ad7d clientSecret: 76bea5d6863b98331709de2d6220bf439426d957 repo: hexo-blog owner: luoyunchong admin: [luoyunchong] 这个repo一定要是仓储名，而不是仓储地址，不然，会一直返回404 NOT FOUND 报错出现 Error: Validation Failed.https://github.com/gitalk/gitalk/issues/102总结主要的原因是 由于label太长导致的无法评论,label的长度上限是50个字符，所以文章名有些长的都会生成label失败,也就没办法评论了. 解决办法 ：文章名经URL编码后转MD5，然后再生成label，MD5值是固定长度的。引用md5的js,然后，给location.pathname使用md5加密 我使用的material-x，打开themes/material-x/layout/_partial/scripts.ejs文件，修改成如下内容 1234567891011121314151617&lt;script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; var gitalk = new Gitalk(&#123; clientID: \"&lt;%- config.gitalk.clientID %&gt;\", clientSecret: \"&lt;%- config.gitalk.clientSecret %&gt;\", repo: \"&lt;%- config.gitalk.repo %&gt;\", owner: \"&lt;%- config.gitalk.owner %&gt;\", admin: \"&lt;%- config.gitalk.admin %&gt;\", &lt;% if(page.gitalk &amp;&amp; page.gitalk.id) &#123; %&gt; id: \"&lt;%= page.gitalk.id %&gt;\", &lt;% &#125; else &#123; %&gt; id: md5(location.pathname), // Ensure uniqueness and length less than 50 &lt;% &#125; %&gt; distractionFreeMode: false // Facebook-like distraction free mode &#125;); gitalk.render('gitalk-container');&lt;/script&gt; 最重要的是引用 1&lt;script src=&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;&gt;&lt;/script&gt; 和 1id: md5(location.pathname","categories":[{"name":"hexo","slug":"hexo","permalink":"https://luoyunchong.github.io/hexo-blog/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://luoyunchong.github.io/hexo-blog/tags/hexo/"},{"name":"material-x","slug":"material-x","permalink":"https://luoyunchong.github.io/hexo-blog/tags/material-x/"},{"name":"gitalk","slug":"gitalk","permalink":"https://luoyunchong.github.io/hexo-blog/tags/gitalk/"}]},{"title":"2. 重新出发-learn webpack","slug":"重新出发/2. 重新出发-learn webpack","date":"2019-06-24T14:43:22.000Z","updated":"2019-07-01T14:22:22.000Z","comments":true,"path":"2019/06/24/重新出发/2. 重新出发-learn webpack/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/24/重新出发/2. 重新出发-learn webpack/","excerpt":"重新出发-learn webpackgithub 上搜索 webpack learn或webpack awesome 基于 Webpack4 渐进式教程 为基础这个非常适合初学者，24个demo，渐进式文档学习， https://github.com/webpack-china/awesome-webpack-cn","text":"重新出发-learn webpackgithub 上搜索 webpack learn或webpack awesome 基于 Webpack4 渐进式教程 为基础这个非常适合初学者，24个demo，渐进式文档学习， https://github.com/webpack-china/awesome-webpack-cn","categories":[{"name":"重新出发","slug":"重新出发","permalink":"https://luoyunchong.github.io/hexo-blog/categories/重新出发/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://luoyunchong.github.io/hexo-blog/tags/webpack/"}]},{"title":"1.重新出发-起航","slug":"重新出发/1.重新出发-起航","date":"2019-06-17T07:19:22.000Z","updated":"2019-06-25T06:44:24.951Z","comments":true,"path":"2019/06/17/重新出发/1.重新出发-起航/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/17/重新出发/1.重新出发-起航/","excerpt":"","text":"重新出发还有几天大学就毕业了(21号毕业典礼)，我在大学期间，在学校跟着老师一起做了一些项目，用到的技术是 easyui+ .net framework4.x+sql server 2008+ef 5+vs2012，框架是旧三层架构，没有批量操作和事务，编辑操作时，也极易出错。 后来升级架构，用了一段时间layui+vue.js（非单页面）+abp (.net frameowork)+mysql 5.7+ef 6+vs2017，后来由于人少，还是换成了easyui 1.51 insdep 版本 我自己也了解到了一些新的技术,如vue.js的SPA,跨平台的 .net core，容器化的docker,负载均衡的nginx，只是帮别人做的一些小项目，用到了vue和 .NET Core，其他的就没有实际上线的经验，每次使用时，总是去查询相应的博客、官网，没有系统的学习文档，所以让我觉得这些基础没有打好，所以我打算重新学习一次。系统地整理出相应的知识点，打好基础。 目前用到的一些技术栈、架构风格、开发工具如下 vue.js(SPA)+.netNET Core2.2(JWT+EF Core)+Mysql 5.6+ docker+nginx+Ubuntu+vs2019（vscode) .NET Core 可学习的框架，社区等 awesome-dotnet 关于 .NET Core 的优秀项目应该都能在这找到 https://github.com/quozd/awesome-dotnet/ abp vnext ，可参考https://cn.abp.io/documents/abp/latest/Index，我觉得它的特点是：分层更细，但复杂度更大，不过有着完善的文档与社区，架构风格统一，对于每个模块都有着相应的风格指导，另外如官网所说，他的“主要目标是提供一个便捷的基础设施来创建微服务解决方案”（目前还处于0.18待Release版本，2019-6-17） surging 专注与 .net core下的微服务引擎的解决方案，（1.0于19年初发布，以我的水平，没有良好的入门文档，我还需要继续学习才能使用。） .NET Core Community 国内的开源组织，有着优秀的基于.net core 的开源项目，大家可以去学习学习https://github.com/dotnetcore csredis对标的是stackExchange.Redis，大家都说stackExchange.redis有的时候会超时（Timeout Bug），好像一直没有解决(项目全部使用异常可解决)，https://github.com/2881099/csredis FreeSql是 .net 、.net core的最方便的 ORM, https://github.com/2881099/FreeSql（我还没用，但做这个项目的大佬一直推荐，我相信一定不错）也是做csredis的作者 小技巧： 如果你想找什么资料，去github搜索可以使用 awesome + 关键字1awesome vue 技术学习1.前端相应的知识点 es6 webpack vue.js vuex vue-router typescript 后端技术栈 nginx linux 如：Ubuntu docker c# 如: .net core 、asp .net core java 如: spring boot Github打磨 我的github还没什么特别有价值的东西，我需要不断地打磨自己的技术 https://github.com/luoyunchong 一个博客，.NET 版本，http://igeekfan.cn/ 一个ABP的代码生成器，使用 .NET Core2.2、Razor Pages、RazorEngine的cshtml的模板，配置生成相应的代码 http://www.dotnetcore.xin/ 基于abp (.NET版本)的前端js、结合easyui的前端js，可打包成bower，之前为了统一不同项目下的前端基础类库。 https://luoyunchong.github.io/staticfiles/ 基于 ABP vNext 的MicroserviceDemo、增加了iview的SPA界面， 实现前后端分离的用户角色授权管理功能 一个使用hexo的博客,采用Material X主题，docs分支为博客源文件，发布github Pages https://luoyunchong.github.io/hexo-blog/ 一个基于 ASP .NET Core 2.2 的基础集成方案 https://github.com/luoyunchong/BasicTemplate JWT集成 EF实现事务一致性 统一的创建人、创建时间、删除人、删除时间，软删除 集成 EF Core MySQL版本 AutoMapper集成","categories":[{"name":"重新出发","slug":"重新出发","permalink":"https://luoyunchong.github.io/hexo-blog/categories/重新出发/"}],"tags":[{"name":".NET Core","slug":"NET-Core","permalink":"https://luoyunchong.github.io/hexo-blog/tags/NET-Core/"}],"author":"IGeekFan"},{"title":"现阶段的痛点","slug":"工作/现阶段的痛点","date":"2019-06-12T14:46:22.000Z","updated":"2019-06-25T06:22:05.390Z","comments":true,"path":"2019/06/12/工作/现阶段的痛点/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/12/工作/现阶段的痛点/","excerpt":"","text":"现阶段的痛点： 账号的集中式管理，密码复杂，需要记忆不同账户体系下的账号，使用相同的密码会有安全问题，若某一系统的账号泄露，易造成其他系统被撞库。 小型网站不提供注销功能，无法保证用户信息安全，就如现阶段（2019-6-12），CSDN也无法注销账号，而有时没有记住使用何种方法注册，易造成多账号情况。Microsoft提供完整的隐私删除服务，用户可自行删除搜索记录，包括浏览器，语音，位置等。简书也提供注销，QQ也提供注销功能，注销是保证用户的重要入口。 用户买卖微信，手机号，平台账号，当出现服务商出现一些活动时，薅羊毛党就会出来占便宜，会导致运营成本失控、数据样体失值、数据有效性失常、平台服务器失效、平台发展失衡 刷单、任务、黄牛、黑客、漏研族。 云服务商不遵守开源精神，看不惯云计算公司流氓行为，MongoDB 更改开源协议 IT产业逐渐向服务化转型。用户不需要购买软硬件，而是通过互联网向厂商订购所属的应用软件服务。IT厂商越来越倾向于通过服务收费，而不是通过售卖软硬件收费。此种情况下，一些云服务厂商将MangoDB的社区版本修改后向用户提供其数据库的托管商业版本，而不将修改的源代码公开回馈给社区。如此一来，这些云服务厂商相当于从MangoDB企业版销售中分了一杯羹，抢占了其销售份额。MangoDB更换许可协议就是要遏制云服务提供商攫取开源软件价值却不给予开源社区任何回报的行为。 手机Android推送频繁，如何合理监控。","categories":[{"name":"工作","slug":"工作","permalink":"https://luoyunchong.github.io/hexo-blog/categories/工作/"}],"tags":[{"name":"账号安全","slug":"账号安全","permalink":"https://luoyunchong.github.io/hexo-blog/tags/账号安全/"},{"name":"隐私","slug":"隐私","permalink":"https://luoyunchong.github.io/hexo-blog/tags/隐私/"}]},{"title":"ABP代码生成器","slug":"ABP/ABP代码生成器","date":"2019-06-12T06:40:26.000Z","updated":"2019-06-25T06:22:05.370Z","comments":true,"path":"2019/06/12/ABP/ABP代码生成器/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/12/ABP/ABP代码生成器/","excerpt":"","text":"ABP代码生成器基于 DotNET Core、RazorPage，借鉴SmartCode，完成ABP的代码生成器。github地址如下： https://github.com/i542873057/SJNScaffolding 代码生成器计划 1、中文转英文字段，自动起名字，主要关键字段转换。 2、主分表代码生成 3、下拉代码自动生成，勾选 4、代码生成器部署到某一服务器中，生成后可下载生成后的代码，复制至项目中即可。 文档：csdn/部署至linux.md 、github/docs/部署至linux.md 项目部署地址 :http://47.106.80.39、http://www.dotnetcore.xin/ CodeLF帮程序员起变量名的网站:https://unbug.github.io/codelf/ 这里主要介绍的是SJNScaffolding.RazorPage新项目的使用，他使用了. NET Core下的Microsoft.AspNetCore.Mvc.Razor类库，对于熟悉razor语法的开发者来说是非常容易的。 使用方法准备一个这样格式的数据字典 运行程序，然后首先来到配置界面，这里可以配置你要生成的表名，以及项目名称等，配置完成之后点击保存配置 表结构设置：在这里将你需要生成的字段从数据字典里面复制进来如图： 注意：ID，IsDeleted，DeleterUserId，DeletionTime等字段是ABP自动生成的字段这里不必复制进来 字段复制进来后点击导入字段，生成如下图列表，自行确定每个字段是否需要后点击生成代码 代码生成之后会在对应的目录下面生成对应的文件，只需要手动添加到项目中即可使用（这里还有待改进）","categories":[{"name":"ABP","slug":"ABP","permalink":"https://luoyunchong.github.io/hexo-blog/categories/ABP/"}],"tags":[{"name":"ABP 代码生成器","slug":"ABP-代码生成器","permalink":"https://luoyunchong.github.io/hexo-blog/tags/ABP-代码生成器/"}]},{"title":"TypeScript学习记录- 数据类型基础","slug":"大前端/TypeScript学习记录- 数据类型基础","date":"2019-06-12T06:27:54.000Z","updated":"2019-06-25T06:22:05.380Z","comments":true,"path":"2019/06/12/大前端/TypeScript学习记录- 数据类型基础/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/12/大前端/TypeScript学习记录- 数据类型基础/","excerpt":"TS 学习笔记记录相关文档 TypeScript 入门教程-xcatliu JavaScript高级程序设计（第三版）pdf的下载地址 JS 函数式编程指南 Typescript教程_Typescript视频教程 ts入门实战视频教程","text":"TS 学习笔记记录相关文档 TypeScript 入门教程-xcatliu JavaScript高级程序设计（第三版）pdf的下载地址 JS 函数式编程指南 Typescript教程_Typescript视频教程 ts入门实战视频教程 原始数据类型原始数据类型包括布尔值、数值、字符串、null、undefined、Symbol。 定义一个布尔值 1let isOk:boolean =false; 定义一个数值 1let literal:number=10; 定义 字符串 1let name:string=&quot;luo&quot;; 空值 123 function alertName(name:string):void&#123; alert(&quot;my name is &quot;+name);&#125; null 和undefined 12let u: undefined = undefined;let n: null = null; void 与null和undefined不同点在于，null和undefined是所有类型的子类型，null和undefined可赋值给他的父类型。 任意值 任意值类型12let name:any=&quot;1234&quot;;name = 111; 如果是 any 类型，则允许被赋值为任意类型。 未声明类型的变量变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：不管后来有没有被赋值，都会推断成any类型。123let st;st=&quot;1111&quot;;st=111; 类型推断 当定义变量时，未指定明确的类型时，TS会根据类型推论的规则推断出这个变量的类型 1let myFav=“This is a string!&quot;; 等价于 1let myFav:string=&quot;This is a string!&quot;; 联合类型表示取值可以为多种类型中的一种。 let 变量名:变量类型|变量类型;使用 | 分隔数据类型。123let myFavoriteNumber:string|number;myFavoriteNumber = &apos;seven&apos;;myFavoriteNumber = 7; 访问联合类型属性或方法。要注意只有当TypeScript不确定一个联合类型的变量到底是哪个类型时，只能访问联合属性中共有的属性或方法123456function getLength(something: string | number): number &#123; return something.length;&#125;// index.ts(2,22): error TS2339: Property &apos;length&apos; does not exist on type &apos;string | number&apos;.// Property &apos;length&apos; does not exist on type &apos;number&apos;. 报错原因是无法知道参数是string 还是number，number类型没有length属性，所以异常。 1234567let myFavoriteNumber: string | number;myFavoriteNumber = &apos;seven&apos;;console.log(myFavoriteNumber.length); // 5myFavoriteNumber = 7;console.log(myFavoriteNumber.length); // 编译时报错// index.ts(5,30): error TS2339: Property &apos;length&apos; does not exist on type &apos;number&apos;. 只有console.log(myFavoriteNumber.length); // 编译时报错，第二行中 myFavoriteNumber 被推断成 string，所以 访问length时无异常，第四行 其被推断成 number,访问length会异常。 对象的类型-接口接口是一种规范，他定义了一个事物的基础属性，规则。 定义接口123456interface Person &#123; readonly id:number; name: string; age?: number; [propName: string]:any;&#125; id 前加 readonly 表示该字段为只读属性，只有第一次给对象 Person赋值时 id 必须有值，后面无法给此值赋值。age后面加 ? 表示该属性为可选属性。定义变量时可为空，[propName: string] 任意属性 ,定义属性值 为 string 类型的值。当定义任意属性后，确定的属性和可选属性必须为这个类型的子集 数组类型 「类型 + 方括号」来表示数组 1234let fibonacci: number[] = [1, 1, 2, 3, 5];let fibonacci: (number | string)[] = [1, &apos;1&apos;, 2, 3, 5];// any 表示数组中可出现任意类型,也可使用默认的类型推断。去掉类型 any[]let list: any[] = [&apos;Xcat Liu&apos;, 25, &#123; website: &apos;http://xcatliu.com&apos; &#125;]; 数组泛型 123Array&lt;elemType&gt; 来表示数组let fibonacci: Array&lt;number&gt; = [1, 1, 2, 3, 5]; 使用接口实现数组 1234interface NumberArray &#123; [index: number]: number;&#125;let fibonacci: NumberArray = [1, 1, 2, 3, 5]; 类数组内置对象 IArguments 123function sum() &#123; let args: IArguments = arguments;&#125; 函数的类型 函数声明123function sum(x: number, y: number): number &#123; return x + y;&#125; 函数表达式 123let mySum=function(x:number,y:number):number&#123; return x+y;&#125; mySum其实未指定类型，而是通过类型推断实现的，手动指定mySum的类型 123let mySum:(x:number,y:number)=&gt;number=function(x:number,y:number):number&#123; return x+y;&#125; 在TyepScript中 =&gt; 表示函数的定义，左边是输入类型，右边是输出类型 ES6中的箭头函数相关介绍 使用接口定义函数类型 12345678interface searchFunc&#123; (source:string,subString:string):boolean;&#125;let mySearch:searchFunc;mySearch=function(source:string,subString:string):boolean&#123; return source.search(subString) !== -1;&#125; 可选参数、参数默认值使用 ？ 表示可选择的参数，有默认值的参数为可选参数，但不受 「可选参数必须接在必需参数后面」的限制了可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必须参数了 123456789function buildName(firstName: string=&apos;Tom&apos;, lastName?: string) &#123; if (lastName) &#123; return firstName + &apos; &apos; + lastName; &#125; else &#123; return firstName; &#125;&#125;let tomcat = buildName(&apos;Tom&apos;, &apos;Cat&apos;);let tom = buildName(&apos;Tom&apos;); 类型断言断言，不是类型转换，无法将一个联合类型转换成一个不存在的类型是不可以的。 1234//定义类型:&lt;类型&gt;值let something: string | number=&quot;1234&quot;;let str=&lt;string&gt;something;//这是正确的，可以将联合类型转换成一个更加具体的类型let bol=&lt;boolearn&gt;something;//异常，Type &apos;string | number&apos; cannot be converted to type &apos;boolean&apos;","categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","permalink":"https://luoyunchong.github.io/hexo-blog/tags/TypeScript/"}]},{"title":"Visual Studio如何增加版权信息","slug":"大后端/Visual Studio如何增加版权信息","date":"2019-06-11T16:56:03.000Z","updated":"2019-06-25T06:22:05.389Z","comments":true,"path":"2019/06/12/大后端/Visual Studio如何增加版权信息/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/12/大后端/Visual Studio如何增加版权信息/","excerpt":"","text":"Visual Studio如何增加版权信息 怎么实现，上面链接里的文章应该已经很清楚了，记录一下本地的版权情况。 我本地vs2017安装位置的如下：E:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\ItemTemplates\\CSharp\\Code\\2052\\Class /* * CLR版本: $clrversion$ * 命名空间名称/文件名: $rootnamespace$/$safeitemname$ * 作 者：天上有木月 * 创建时间：$time$ * 邮箱：igeekfan@foxmail.com * 文件功能描述： * * 修改人： * 时间： * 修改说明： */ 参数 描述 clrversion 当前系统CLR版本号 GUID [1-10] 生成全局唯一标识符,可以生成10个 (例如:guid1) itemname 打开添加新建项时输入的文件名称 machinename 当前机器的名称(如:pc1) registeredorganization 注册的组织名 rootnamespace 命名空间名 safeitemname 保存的文件名 time 当前系统时间,格式:DD/MM/YYYY 00:00:00. userdomain 用户所在的域 username 当前系统用户名 year 当前系统时间 YYY","categories":[{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://luoyunchong.github.io/hexo-blog/categories/Visual-Studio/"}],"tags":[{"name":".NET","slug":"NET","permalink":"https://luoyunchong.github.io/hexo-blog/tags/NET/"},{"name":"Visual Studio","slug":"Visual-Studio","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Visual-Studio/"}]},{"title":".NET Framework 下的RazorEngine代码生成原理介绍","slug":"大后端/RazorEngine代码生成原理介绍","date":"2019-06-11T16:56:03.000Z","updated":"2019-06-25T06:22:05.388Z","comments":true,"path":"2019/06/12/大后端/RazorEngine代码生成原理介绍/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/12/大后端/RazorEngine代码生成原理介绍/","excerpt":"","text":"RazorEngine模板引擎在旧版本下https://github.com/i542873057/SJNScaffolding 旧版本中使用RazorEngine模板引擎技术，对于熟悉razor语法的开发者来说是非常容易的。 如何使用Razor实现代码生成器这里提供最简单的一个栗子 CopyRightTemplate.cshtml模板代码如下 123456@model SJNScaffolding.Models.TemplateModels.CopyRightUserInfo //============================================================= // 创建人: @Model.UserName // 创建时间: @Model.CreateTime // 邮箱： @Model.EmailAddress //============================================================== 对应的实体类 1234567public class CopyRightUserInfo&#123; public string UserName &#123; get; set; &#125; public string EmailAddress &#123; get; set; &#125; public DateTime CreateTime &#123; get; set; &#125; public string FileRemark &#123; get; set; &#125;&#125; 对应的test方法 12345678910111213141516//根据路径。要根据自己实际情况调整private const string BasePath = @\"..\\..\\..\\SJNScaffolding\\\";[TestMethod]public void testCorpyRight()&#123; var path = BasePath + \"Templates\\\\CopyRightTemplate.cshtml\"; var template = File.ReadAllText(path); string content = Engine.Razor.RunCompile(template, \"CopyRightTemplate\", typeof(CopyRightUserInfo), new CopyRightUserInfo &#123; CreateTime = DateTime.Now, EmailAddress = \"710277267@qq.com\", UserName = \"IGeekFan\" &#125;);&#125; 下断点后运行，content变量 旧版本使用WPF进行开发，对应的项目名为：SJNScaffolding.WPF，已弃用","categories":[{"name":".NET Framework","slug":"NET-Framework","permalink":"https://luoyunchong.github.io/hexo-blog/categories/NET-Framework/"}],"tags":[{"name":".NET Framework","slug":"NET-Framework","permalink":"https://luoyunchong.github.io/hexo-blog/tags/NET-Framework/"},{"name":"RazorEngine","slug":"RazorEngine","permalink":"https://luoyunchong.github.io/hexo-blog/tags/RazorEngine/"},{"name":"代码生成器","slug":"代码生成器","permalink":"https://luoyunchong.github.io/hexo-blog/tags/代码生成器/"}]},{"title":"Docker 、nginx 学习记录","slug":"大后端/Docker 、nginx 学习记录","date":"2019-06-09T17:00:22.000Z","updated":"2019-06-25T06:44:24.952Z","comments":true,"path":"2019/06/10/大后端/Docker 、nginx 学习记录/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/10/大后端/Docker 、nginx 学习记录/","excerpt":"Docker 学习记录Docker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器-&gt;Windows日志-&gt;系统中，Hyper-V-VmSwitch 一直提示 类似”VMSwitch driver due to error” Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事 别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。 hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错 后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.","text":"Docker 学习记录Docker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器-&gt;Windows日志-&gt;系统中，Hyper-V-VmSwitch 一直提示 类似”VMSwitch driver due to error” Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事 别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。 hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错 后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V. Docker 相关文档Docker最全教程——从理论到实战(一) 八个Docker的真实应用场景 docker pull很慢解决办法、配置阿里镜像 ASP.NET Core开发Docker部署 Docker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository） 一个Image可有多个Container，我们可以把Image发布至Dokcer提供的仓库中，提供给他人使用。 Dockerfile 文件规则12 Docker 命令行 Command-Line Interfaces https://docs.docker.com/engine/reference/run/1234567891011121314151617181920212223242526272829docker images # 查看所有镜像docker ps -a #所有正在运行的容器Containerdocker ps -l #最后启动的容器docker rm 容器id #删除容器ocker rm $(docker ps -q -a) #一次性删除所有的容器docker rmi 镜像id/镜像名称 #删除镜像docker rmi $(docker images -q) #一次性删除所有的镜像。docker build -t igeekfan/demo . #运行构建命令,构建Docker 镜像。 docker run 镜像 #运行docker run -it -p 5000:80 igeekfan/demo#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80docker run -d -p 5000:80 igeekfan/demo -d 参数后台运行docker start 容器iddocker restart 容器iddocker stop 容器id #终止容器。docker logs $CONTAINER_ID ##在container外面查看它的输出 docker attach $CONTAINER_ID ##连接上容器实时查看：docker pull microsoft/dotnet #单独安装某一镜像docker save 镜像id &gt; 文件 #持久化镜像docker load &lt; 文件 我们如果想将Docker 放置到其他机器运行，很简单。 1234567#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。docker save igeekfan/demo &gt; demo.tar#然后加载命令docker load &lt; demo.tar nginx 相关命令Ubuntu 进入root 权限，不用每次加sudo 12sudo su #然后输入root 密码 配置nginx 1vim /etc/nginx/nginx.conf nginx 验证配置是否成功 1nginx -t 重新加载nginx配置项 1nginx -s reload 状态、重启、停止、启动 1234service nginx status service nginx restartservice nginx stop service nginx start Ubuntu18.04更换镜像源","categories":[{"name":"学习记录","slug":"学习记录","permalink":"https://luoyunchong.github.io/hexo-blog/categories/学习记录/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://luoyunchong.github.io/hexo-blog/tags/nginx/"},{"name":"Docker","slug":"Docker","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Docker/"}]},{"title":"好用的前后端类库及安装包整合下载","slug":"大前端/好用的前后端类库及安装包整合下载","date":"2019-06-09T17:00:22.000Z","updated":"2019-06-25T06:42:58.563Z","comments":true,"path":"2019/06/10/大前端/好用的前后端类库及安装包整合下载/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/10/大前端/好用的前后端类库及安装包整合下载/","excerpt":"","text":"记录平常使用的一些前端插件 wangEditor3 基于javascript和css开发的 Web富文本编辑器， 轻量、简洁、易用、开源免费 webuploader 上传控件，flash+H5 兼容IE6+，Andorid 4+，IOS 6+ docsify.js 一个基础markdown的文档生成器，可以写API接口文档。A magical documentation site generator. cropper 头像上传，裁剪，旋转等，blueimp-canvas-to-blob 解决部分浏览器兼容性 JQuery-EasyUI-insdep 基于Easyui的样式扩展UI，变得更好看，多了许多插件。 jquery-extensions 源文件下载地址 已无人维护，开源地址已经找不到了，该扩展基于easyui1.3.6，在本项目中不可直接引用发布后的压缩文件，必须拆分引用,按照依赖顺序引用该目录下的扩展:bower_components\\jquery-extensions\\jeasyui-extensions,部分bug已解决，有些扩展在新版本的easyui已经有了，所以在extensions中，有些可删除。 jquery.jdirk.js 为js扩展了许多通用的方法,extensions-master依赖此js,完整的代码都在extensions-master中 安装包下载 redis.msi文件 安装包 缓存使用redis redis-desktop-manager.exe 文件 链接：https://pan.baidu.com/s/1c3ra73E 密码：k81k SQL Server 2012 链接：https://pan.baidu.com/s/1KcJ0nKW-PUcXImXPbb7MJQ 密码：g8av Visual Studio 2017 直接从官网下载，安装时，只选择ASP.NET和Web开发即可。 TortoiseSVN 官网 MYSQL 官网下载即可，选择5.7.22版本 Navicat for mysql 百度网盘地址 密码：mi2p 另外vs2017中的插件(可选) visualsvn for visual studio 2017 resharper staticfiles开源库介绍、通用js 维护地址为 http://ip/summary/libs/staticfiles.gitbower 静态资源地址 http://ip:5678/ easyui.default-extension.js为easyui增加默认属性，扩展jquery方法 base.js 大多数项目通用的com对象， passwordComplexityHelper.js 让密码也可以在后台配置 libs 这个文件夹下的js是Abp自带的通用js，改了abp.jquery.js，增加了abp.easyui.js,abp.layer.js，统一的调用接口，可以实现不同的弹框效果 根目录新建.bowerrc文件，实现自定义bower仓库 1234&#123; &quot;registry&quot;: &quot;http://ip:5678&quot;, &quot;timeout&quot;: 30000&#125; 在web项目目录执行以下命令 1bower install staticfiles --save 后端技术 后端使用语言为C#,访问数据库技术主要采用EntityFrameWork6,复杂sql可使用dapper，数据库使用SQL server ,可切换成mysql,框架使用的ABP 官网 ABP框架有哪些好处，可以参考如下文章ABP的一些优点 在使用框架时，我们会发现，代码会更加规范，系统也更加稳定， ABP 后端已完成的功能 后端系统基本功能已经完善,还差一些，如:导入excel,导出excel,工作流。 用户-角色-权限-日志-设置-文件-组织-登录-注册-找回密码-注册邮件激活-短信-双身份登录验证-通用增删改查-集成Dapper-自动迁移-svn提交后自动发布-缓存redis-字典管理-错误处理（跳404，403等）-兼容性差跳下载浏览器页面-不同开发模式下，使用不同的配置","categories":[{"name":"大前端","slug":"大前端","permalink":"https://luoyunchong.github.io/hexo-blog/categories/大前端/"}],"tags":[]},{"title":"ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker","slug":"大后端/ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker","date":"2019-06-08T16:54:15.000Z","updated":"2019-06-25T06:44:26.891Z","comments":true,"path":"2019/06/09/大后端/ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/06/09/大后端/ASP.NET Core 部署至ubuntu、部署至ubuntu下的Docker/","excerpt":"关于ABP代码 生成器的使用介绍 https://blog.csdn.net/q710777720/article/details/91358450 将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： https://github.com/i542873057/SJNScaffolding 部署至ubuntu、Docker的记录 相关技术 .NET Core2.2+Docker+Nginx+Supervisor","text":"关于ABP代码 生成器的使用介绍 https://blog.csdn.net/q710777720/article/details/91358450 将自定义-ABP代码生成器，使用. NET Core下的Razor模板引擎，配合RazorPage界面，可自定义cshtml模板，开源地址： https://github.com/i542873057/SJNScaffolding 部署至ubuntu、Docker的记录 相关技术 .NET Core2.2+Docker+Nginx+Supervisor 部署至ubuntu下可参考 https://www.cnblogs.com/linezero/p/aspnetcoreubuntu.html 需要安装 .NET Core 2.2，直接看官网 https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current 发布使用VS2017或VS2019,右击SJNScaffolding.RazorPage-&gt;发布-&gt;配置后，如下图所示，点击保存后，生成发布包。 将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。使用以下命令运行 12cd /home/admin/SJNScaffolding # 先cd的项目目录 dotnet SJNScaffolding.RazorPage.dll #启动web项目，默认应该是http://localhost:5000 参考下图 ![https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png](https://miao.su/images/2019/06/09/5NOPVXLDV0IMA_QO7cdd8d.png) ip:端口是无法访问到的，命令行中执行，下面这行命令，是正常的，但只能服务器访问，外网无法访问。 1wget http://localhost:5000 需要使用nginx反向代理1sudo apt-get install nginx 安装好以后，定位到 /etc/nginx/sites-available/default 文件。更改server 节点如下 1234567891011server &#123; listen 80; location / &#123; proxy_pass http://localhost:5000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection keep-alive; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; &#125;&#125; 然后重新启动 Nginx 12sudo service nginx restart #sudo nginx -s reload #也可以使用这条命令重新加载配置项 Supervisor 守护进程此时使用ctrl+c会退出项目运行状态，无法关闭shell,可使用Supervisor，目的是上的是服务器开机时即启动服务器上的发布的 ASP .NET Core Web项目 ASP.NET Core Linux下为 dotnet 创建守护进程（必备知识）前言 结合Nginx将asp net core部署在Linux(Ubuntu)上[基于微软官方文档翻译并补充] Ubuntu 18.04 安装部署Net Core、Nginx全过程 123sudo apt-get install supervisor # 安装 守护进程 supervisorcd /etc/supervisor/conf.d/ # 进入配置目录 vim SJNScaffolding.conf # 新建 一个配置文件 ，只要以 .conf结尾即可。 在文件SJNScaffolding.conf中配置如下内容， 1234567891011[program:SJNScaffolding]command=dotnet /home/admin/SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.dlldirectory=/home/admin/SJNScaffolding.RazorPageenvironment=ASPNETCORE__ENVIRONMENT=Productionuser=www-datastopsignal=INTautostart=trueautorestart=true startsecs=1stderr_logfile=/var/log/SJNScaffolding.RazorPage.err.log stdout_logfile=/var/log/SJNScaffolding.RazorPage.out.log 有相应注释的，conf不能有注释，虽然没有任何异常，但无法启动服务。 1234567891011[program:HelloWebApp]command=dotnet HelloWebApp.dll #要执行的命令directory=/home/yxd/Workspace/publish #命令执行的目录environment=ASPNETCORE__ENVIRONMENT=Production #环境变量user=www-data #进程执行的用户身份stopsignal=INTautostart=true #是否自动启动autorestart=true #是否自动重启startsecs=1 #自动重启间隔stderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志stdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志 重启守护进程 1234567sudo /etc/init.d/supervisor restart #或 sudo service supervisor restart#或# 暂停服务supervisor，启动服务supervisorsudo service supervisor stopsudo service supervisor start#查看日志tail -f /var/log/SJNScaffolding.RazorPage.out.log 设置ubuntu下的supervisor开机 自启动 1vi /etc/rc.local 在exit 0 之前加入以下命令 1/usr/local/bin/supervisord 使用Docker 方式部署可参考此文档 ：ASP.NET Core开发Docker部署 12345678910111213141516171819202122232425262728#1.本地安装Docker for Windows后，可使用Docker方式运行FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS baseWORKDIR /appEXPOSE 80FROM mcr.microsoft.com/dotnet/core/sdk:2.2-stretch AS buildWORKDIR /srcCOPY [&quot;SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj&quot;, &quot;SJNScaffolding.RazorPage/&quot;]COPY [&quot;SJNScaffolding/SJNScaffolding.csproj&quot;, &quot;SJNScaffolding/&quot;]RUN dotnet restore &quot;SJNScaffolding.RazorPage/SJNScaffolding.RazorPage.csproj&quot;COPY . .WORKDIR &quot;/src/SJNScaffolding.RazorPage&quot;RUN dotnet build &quot;SJNScaffolding.RazorPage.csproj&quot; -c Release -o /appFROM build AS publishRUN dotnet publish &quot;SJNScaffolding.RazorPage.csproj&quot; -c Release -o /appFROM base AS finalWORKDIR /appCOPY --from=publish /app .ENTRYPOINT [&quot;dotnet&quot;, &quot;SJNScaffolding.RazorPage.dll&quot;]#2. 发布时，使用此Dockerfile配置#FROM mcr.microsoft.com/dotnet/core/aspnet:2.2-stretch-slim AS base#COPY . /app#WORKDIR /app#EXPOSE 80#ENTRYPOINT [&quot;dotnet&quot;, &quot;SJNScaffolding.RazorPage.dll&quot;] 把第”2. 发布时，使用此Dockerfile配置“后面的注释展开，上面的全部注释。 右击SJNScaffolding.RazorPage-&gt;发布-&gt;配置后，如下图所示，点击保存后，生成发布包。 将生成的这个文件夹内容，使用xftp上传至linux的某一文件夹中。 具体上传步骤就不说了。 前置条件，在ubuntu上安装好了docker。并且正常运行。 -d 代表后台运行，此时将对外显露5000端口运行，5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80 123cd /home/admin/SJNScaffolding # 先cd的项目目录 docker build -t igeekfan/sjnscaffolding . #生成imagesdocker run -d -p 5000:80 igeekfan/sjnscaffolding # 生成 container 并运行在5000端口 此时打开 浏览器， ip+端口5000即可访问服务。","categories":[{"name":"大后端","slug":"大后端","permalink":"https://luoyunchong.github.io/hexo-blog/categories/大后端/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Ubuntu/"},{"name":"Docker","slug":"Docker","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Docker/"},{"name":"ASP.NET Core","slug":"ASP-NET-Core","permalink":"https://luoyunchong.github.io/hexo-blog/tags/ASP-NET-Core/"}]},{"title":"日常命令行记录","slug":"命令行专题/日常命令行记录","date":"2019-05-15T06:41:21.000Z","updated":"2019-06-25T06:22:05.379Z","comments":true,"path":"2019/05/15/命令行专题/日常命令行记录/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/05/15/命令行专题/日常命令行记录/","excerpt":"","text":"windows 查看具体某一端口 是否被占用 1netstat -ano | findstr &quot;5000&quot; npm 包安装，运行项目 123npm installnpm run servenpm run build .ef code first 生成数据库，迁移数据库.net framework /.net core code first 1234Add-Migration &quot;name&quot;Update-Database Update-Database -ForceUpdate-Database -Verbose dotnet core cil 1dotnet watch run windows 运行 打开我的电脑等图标 1rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0 Mysql下载地址：https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.25-winx64.zip windows安装Mysql，并配置密码 12345678910111213141516171819202122运行-》cmd。首先 cd E:/Program Files/mysql-5.7.25-winx64/bin 命令：mysqld --initialize #直接初始化mysql，生成data文件夹中的文件。命令：mysqld -install #安装mysql命令：net start mysql #启动服务器#跳过密码验证，在my.ini文件中配置如下[mysqld]skip-grant-tables#cmd运行到mysql/bin目录下mysql -u root -p#进入mysql命令行use mysql;#执行修改密码操作update user set authentication_string=password(&apos;123qwe&apos;) where user=&apos;root&apos; and Host = &apos;localhost&apos;;#刷新数据库flush privileges;net start mysqlnet stop mysqlsc.exe delete &quot;服务名&quot; redis 密码配置 12345安装目录下的winodws-serve.confrequirepass 123qwe #此处注意，行前不能有空格重启redis服务、cmd进入安装目录下执行，验证密码是否配置成功redis-cli.exe -h 127.0.0.1 -p 6379 -a 123qwe IDEA 快捷键 12Ctrl+Alt+L 格式化代码Ctrl+Shfit+F 全局查询 Vscode 1ALT+SHIFT+F 格式化代码 Windows server 2016激活 1DISM /online /Set-Edition:ServerDatacenter /ProductKey:CB7KF-BWN84-R7R2Y-793K2-8XDDG /AcceptEula idea配置激活地址 1http://idea.merle.com.cn VS2019激活码 123Visual Studio 2019 Enterprise:BF8Y8-GN2QH-T84XB-QVY3B-RC4DFVisual Studio 2019 Professional:NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y","categories":[{"name":"命令行","slug":"命令行","permalink":"https://luoyunchong.github.io/hexo-blog/categories/命令行/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://luoyunchong.github.io/hexo-blog/tags/MySQL/"}]},{"title":"博客记录RabbitMQ、Mongodb","slug":"命令行专题/博客记录Rabbitmq、Mongodb","date":"2019-05-08T06:41:21.000Z","updated":"2019-06-25T06:22:05.378Z","comments":true,"path":"2019/05/08/命令行专题/博客记录Rabbitmq、Mongodb/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/05/08/命令行专题/博客记录Rabbitmq、Mongodb/","excerpt":"","text":"Rabbitmq 服务开启后，管理地址：http://localhost:15672/ 帐号：guest 密码 : guest rabbitmq安装后，web管理端口http://localhost:15672/ 无法访问的解决 1.https://blog.csdn.net/sxf359/article/details/78239382 2. 此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。1rabbitmq-plugins enable rabbitmq_management Mongodb 删除服务1sc delete mongodb","categories":[],"tags":[{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"https://luoyunchong.github.io/hexo-blog/tags/RabbitMQ/"},{"name":"Mongodb","slug":"Mongodb","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Mongodb/"}]},{"title":"收集文档","slug":"命令行专题/收集文档","date":"2019-03-24T06:42:01.000Z","updated":"2019-06-25T06:44:24.951Z","comments":true,"path":"2019/03/24/命令行专题/收集文档/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/03/24/命令行专题/收集文档/","excerpt":"","text":"Ubuntu 安装redis两种方式 教程解决方案 在Ubuntu中安装Redis,设置密码，远程访问解决方案 关于学习算法的路上，有哪些需要学习的（南阳理工的题目）学习思路 IIS 7.5 部署项目解决问题 Service Unavailable HTTP Error 503. The service is unavailable解决方案 出现：发布mvc报错：403.14-Forbidden Web 服务器被配置为不列出此目录的内容解决方案 出现.svg .woff .woff2 文件，需要有以下配置 解决方案 不能在此路径中使用此配置节。如果在父级别上锁定了该节,便会出现这种情况 500.19 解决方案","categories":[{"name":"日常问题","slug":"日常问题","permalink":"https://luoyunchong.github.io/hexo-blog/categories/日常问题/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Ubuntu/"},{"name":"Redis","slug":"Redis","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Redis/"},{"name":"IIS","slug":"IIS","permalink":"https://luoyunchong.github.io/hexo-blog/tags/IIS/"}]},{"title":"ABP使用文档","slug":"ABP/ABP使用文档","date":"2019-03-12T06:40:26.000Z","updated":"2019-06-25T06:22:05.375Z","comments":true,"path":"2019/03/12/ABP/ABP使用文档/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/03/12/ABP/ABP使用文档/","excerpt":"","text":"具体入门与开发原理可参考此地址https://blog.csdn.net/wulex/article/category/7256369/3 abp入门系列https://www.jianshu.com/p/a6e9ace79345 我们以通知公告为示例 首先我们有一个公告信息的表结构，如下，像是否删除、新增时间等七个字段只需要继承FullAuditedEntity类即可 项目目录位置，在Domain/Plat建立NoticeItems目录，以类+s设置文件夹。 TelSCode.Domain.Plat.NoticeItems 此命名空间下的类如下， 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768public class NoticeItem : FullAuditedEntity &#123; /// &lt;summary&gt; /// 公告类别ID /// &lt;/summary&gt; [StringLength(50)] public string BaseItemId &#123; get; set; &#125; /// &lt;summary&gt; /// 标题 /// &lt;/summary&gt; [StringLength(100)] public string Title &#123; get; set; &#125; /// &lt;summary&gt; /// 内容 /// &lt;/summary&gt; public string Content &#123; get; set; &#125; /// &lt;summary&gt; /// 打开次数 /// &lt;/summary&gt; public int Times &#123; get; set; &#125; /// &lt;summary&gt; /// 新增人姓名 /// &lt;/summary&gt; [StringLength(50)] public string CreationUserName &#123; get; set; &#125; /// &lt;summary&gt; /// 部门 /// &lt;/summary&gt; [StringLength(50)] public string DepName &#123; get; set; &#125; /// &lt;summary&gt; /// 是否置顶 /// &lt;/summary&gt; public bool IsTop &#123; get; set; &#125; /// &lt;summary&gt; /// 置顶时间 /// &lt;/summary&gt; public DateTime? TopTime &#123; get; set; &#125; /// &lt;summary&gt; /// 发布时间 /// &lt;/summary&gt; public DateTime? DeployTime &#123; get; set; &#125; public bool IsImg &#123; get; set; &#125; /// &lt;summary&gt; /// 状态 /// &lt;/summary&gt; public string Status &#123; get; set; &#125; /// &lt;summary&gt; /// 图片地址 /// &lt;/summary&gt; public string ImgUrl &#123; get; set; &#125; /// &lt;summary&gt; /// 附件地址 /// &lt;/summary&gt; public string FileUrl &#123; get; set; &#125; /// &lt;summary&gt; /// 阅读量+1 /// &lt;/summary&gt; public void NewlyTimes() &#123; this.Times++; &#125; &#125; 在此文件夹下把相关权限配置好 具体配置如下 数据以树的形式存放，公告信息这个菜单放到基础资料管理下，TypeCode为permission时，在菜单下不展示，是菜单下的权限配置，EnCode不能出现重复值,修改菜单时应在此位置修改对应的文字与排序方式、地址。如果是图标，将不自动更新。 123456789new SysMenu &#123; DisplayName = &quot;公告信息管理&quot;, Icon = &quot;icon-standard-date-add&quot;, EnCode = &quot;Plat.NoticeItem&quot;, LinkUrl = &quot;/Plat/NoticeItem/Index&quot;, TypeCode = menu, SortCode = 20 ,Childrens = new List&lt;SysMenu&gt;()&#123;new SysMenu &#123; DisplayName = &quot;新增公告&quot;, EnCode = &quot;Plat.NoticeItem.Add&quot;, TypeCode = permission, SortCode = 1 &#125;, new SysMenu &#123; DisplayName = &quot;编辑公告&quot;, EnCode = &quot;Plat.NoticeItem.Edit&quot;, TypeCode = permission, SortCode = 2&#125;, new SysMenu &#123; DisplayName = &quot;删除公告&quot;, EnCode = &quot;Plat.NoticeItem.Delete&quot;, TypeCode = permission, SortCode = 3 &#125;, new SysMenu &#123; DisplayName = &quot;公告列表&quot;, EnCode = &quot;Plat.NoticeItem.GetGrid&quot;, TypeCode = permission, SortCode = 4 &#125;&#125;&#125; 然后在EntityFramework的TelSCodeDbContext中增加一行 1public virtual IDbSet&lt;NoticeItem&gt; NoticeItem &#123; get; set; &#125; 在Application的Plat区域增加NoticeItems文件夹，我们以类名后缀加s建立文件夹， NoticeItemInput.cs文件夹，一般情况下只需要将NoticeItem中的字段复制过来即可 123456789101112131415161718[AutoMap(typeof(NoticeItem))] public class NoticeItemInput : EntityDto &#123; public string BaseItemId &#123; get; set; &#125; [StringLength(100,ErrorMessage = &quot;标题仅限100个字符&quot;)] public string Title &#123; get; set; &#125; public string Content &#123; get; set; &#125; public int Times &#123; get; set; &#125; public string CreationUserName &#123; get; set; &#125; public string DepName &#123; get; set; &#125; public bool IsTop &#123; get; set; &#125; public bool IsImg &#123; get; set; &#125; public string Status &#123; get; set; &#125; public string ImgUrl &#123; get; set; &#125; public string FileUrl &#123; get; set; &#125; public DateTime? TopTime &#123; get; set; &#125; public DateTime? DeployTime &#123; get; set; &#125; &#125; NoticeItemListDto 为列表上展示的数据字段 12345678910111213141516171819[AutoMapFrom(typeof(NoticeItem))]public class NoticeItemListDto : EntityDto, IHasCreationTime&#123; public string BaseItemId &#123; get; set; &#125; public string Title &#123; get; set; &#125; public string Content &#123; get; set; &#125; public int Times &#123; get; set; &#125; /// &lt;summary&gt; /// 回复次数 /// &lt;/summary&gt; public int CommentTimes &#123; get; set; &#125; public string CreationUserName &#123; get; set; &#125; public DateTime CreationTime &#123; get; set; &#125; public DateTime? DeployTime &#123; get; set; &#125; public bool IsTop &#123; get; set; &#125; public string StatusCode &#123; get; set; &#125;&#125; NoticeItemSearchDto为查询条件，继承PageDto即可，需要增加查询条件，则在此类中增加对应的属性。 12345public class NoticeItemSearchDto : PageDto&#123; public string BaseItemEnCode &#123; get; set; &#125; public string Title &#123; get; set; &#125;&#125; INoticeItemAppService .cs文件 夹 1234public interface INoticeItemAppService : IUsualCrudAppService&lt;NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int&gt;&#123;&#125; NoticeItemAppService.cs文件，一般情况下，此类继承UsualCrudAppService，继承接口INoticeItemAppService，即可拥有增、删、改、查的功能，如果想自定义查询实现，需要重写父类的CreateFilteredQuery方法，由于公告信息中业务要求，有置顶和置顶时间字段，需要根据最后置顶的时间倒序取数据，所以GetGridByCondition方法需要override下，即可解决，权限配置包括二部分，一种是给父类继承的UsualCurdAppService传相应的权限编码，分别： 123base.DeletePermissionName=&quot;Plat.NoticeItem.Delete&quot;; base.CreatePermissionName = &quot;Plat.NoticeItem.Add&quot;;base.UpdatePermissionName = &quot;Plat.NoticeItem.Edit&quot;; 在方法名上使用此权限属性配置该方法对应的权限信息。 1[AbpAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)] 调用 base.CreateOrUpdate方法时，即会判断用户是否有Plat.NoticeItem.Add权限 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class NoticeItemAppService : UsualCrudAppService&lt;NoticeItem, NoticeItemInput, NoticeItemSearchDto, NoticeItemInput, int&gt;, INoticeItemAppService &#123; #region 构造函数 private readonly IRepository&lt;NoticeItem&gt; _noticeItemRepository; private RoleManager RoleManager; private readonly ISqlExecuter _iSqlExecuter; public NoticeItemAppService(IRepository&lt;NoticeItem&gt; noticeItemRepository, ISqlExecuter iSqlExecuter, RoleManager roleManager) : base(noticeItemRepository) &#123; this._noticeItemRepository = noticeItemRepository; _iSqlExecuter = iSqlExecuter; RoleManager = roleManager; base.DeletePermissionName = &quot;Plat.NoticeItem.Delete&quot;; base.CreatePermissionName = &quot;Plat.NoticeItem.Add&quot;; base.UpdatePermissionName = &quot;Plat.NoticeItem.Edit&quot;; &#125; #endregion public override async Task CreateOrUpdate(NoticeItemInput input) &#123; if (input.IsTop) &#123; input.TopTime = DateTime.Now; &#125; else &#123; input.TopTime = null; &#125; if (input.Status == StatusCode.Submit.ToString()) &#123; input.DeployTime = DateTime.Now; &#125; await base.CreateOrUpdate(input); &#125; protected override IQueryable&lt;NoticeItem&gt; CreateFilteredQuery(NoticeItemSearchDto input) &#123; return base.CreateFilteredQuery(input) .WhereIf(!string.IsNullOrWhiteSpace(input.Title), m =&gt; m.Title.Contains(input.Title)); &#125; [AbpAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)] public override EasyUiListResultDto&lt;NoticeItemInput&gt; GetGridByCondition(NoticeItemSearchDto input) &#123; var rows = this.CreateFilteredQuery(input).OrderBy(r =&gt; r.IsTop).PageEasyUiBy(input).OrderByDescending(r =&gt; r.TopTime).MapTo&lt;List&lt;NoticeItemInput&gt;&gt;(); return new EasyUiListResultDto&lt;NoticeItemInput&gt;(input.Total, rows); &#125; NoticeItemController.cs 此类注入IAbpFileManager 去解析保存的文件，供前台编辑页面时使用。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253public class NoticeItemController : TelSCodeControllerBase&#123; #region 构造函数 private readonly INoticeItemAppService _noticeitemAppService; private readonly IAbpFileManager _abpFileManager; public NoticeItemController(INoticeItemAppService noticeitemAppService, IAbpFileManager abpFileManager) &#123; this._abpFileManager = abpFileManager; this._noticeitemAppService = noticeitemAppService; &#125; #endregion #region 视图 public ActionResult Index() &#123; return View(); &#125; [AbpMvcAuthorize(&quot;Plat.NoticeItem.Add&quot;, &quot;Plat.NoticeItem.Edit&quot;)] public ActionResult CreateOrUpdateModal() &#123; return View(); &#125; #region 数据 public async Task&lt;JsonResult&gt; GetInfoForEdit(int id) &#123; var output = await _noticeitemAppService.GetInfoForEdit(id); if (id == 0) &#123; output.CreationUserName = AbpSession.GetLoginName(); &#125; NoticeItemViewModel noticeItemViewModel = new NoticeItemViewModel( _abpFileManager.GetFileOutput(output.FileUrl), _abpFileManager.GetFileOutput(output.ImgUrl), output ); return Json(noticeItemViewModel); &#125; [AbpMvcAuthorize(&quot;Plat.NoticeItem.GetGrid&quot;)] public JsonResult GetGridByCondition(NoticeItemSearchDto input) &#123; var gridData = _noticeitemAppService.GetGridByCondition(input); return Json(gridData); &#125; #endregion&#125; 公告信息因为有文件上传，所以需要新建一个NoticeItemViewModel 类在TelSCode.Web中Plat区域Models新建文件夹NoticeItems，新建类NoticeItemViewModel.cs 12345678910111213[AutoMapFrom(typeof(NoticeItemInput))] public class NoticeItemViewModel : NoticeItemInput &#123; public List&lt;AbpFileOutput&gt; AbpFileOutput &#123; get; set; &#125; public List&lt;AbpFileOutput&gt; AbpImgFileOutput &#123; get; set; &#125; public NoticeItemViewModel(List&lt;AbpFileOutput&gt; fileUrlOutputs, List&lt;AbpFileOutput&gt; imgFileUrlOutputs, NoticeItemInput noticeItemInput) &#123; AbpFileOutput = fileUrlOutputs; AbpImgFileOutput = imgFileUrlOutputs; noticeItemInput.MapTo(this); &#125; &#125; 接下来是界面，新增编辑在一个界面中，一个页面对应一个js，使用@Html.InCludeScript引用，不会有缓存问题，发布之后会生成版本号。 Index.cshtml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748@using Abp.Web.Mvc.Extensions@&#123; ViewBag.Title = &quot;通知公告&quot;;&#125;@section scripts&#123; @Html.IncludeScript(&quot;~/bower_components/webuploader/webuploader.min.js&quot;) @Html.IncludeScript(&quot;~/bower_components/staticfile/libs/abp.webuploader.js&quot;) @Html.IncludeScript(&quot;~/bower_components/wangEditor/wangEditor.min.js&quot;) @Html.IncludeScript(&quot;~/bower_components/wangEditor/wangEditor-plugin.js&quot;) &lt;script&gt; var gridUI = gridUI || &#123; BaseItemEnCode: $.util.request[&apos;name&apos;] == undefined ? &quot;&quot; : $.util.request[&apos;name&apos;] &#125;; &lt;/script&gt; @Html.IncludeScript(&quot;~/Areas/Plat/Views/NoticeItem/Index.js&quot;)&#125;@section styles&#123; &lt;link href=&quot;~/bower_components/webuploader/webuploader.css&quot; rel=&quot;stylesheet&quot; /&gt; &lt;link href=&quot;~/bower_components/wangEditor/wangEditor-plugin.css&quot; rel=&quot;stylesheet&quot; /&gt; @Html.IncludeStyle(&quot;~/Areas/Plat/Views/NoticeItem/Index.js&quot;)&#125;&lt;div class=&quot;easyui-layout&quot; data-options=&quot;fit:true&quot;&gt; &lt;div data-options=&quot;region:&apos;north&apos;,border:false&quot; style=&quot;height: 54px; overflow: hidden;&quot;&gt; &lt;form id=&quot;searchForm&quot;&gt; &lt;table class=&quot;kv-table no-border&quot;&gt; &lt;tr&gt; &lt;th class=&quot;kv-label&quot; style=&quot;text-align:center&quot;&gt;标题&lt;/th&gt; &lt;td class=&quot;kv-content&quot;&gt; &lt;input name=&quot;Title&quot; id=&quot;Title&quot; class=&quot;easyui-textbox&quot; /&gt; &lt;a href=&quot;javascript:void(0);&quot; class=&quot;easyui-linkbutton&quot; data-options=&quot;iconCls:&apos;icon-search&apos;&quot; onclick=&quot;com.filter(&apos;#searchForm&apos;, &apos;#dgGrid&apos;);&quot;&gt;查询&lt;/a&gt; &lt;a href=&quot;javascript:void(0);&quot; class=&quot;easyui-linkbutton&quot; data-options=&quot;iconCls:&apos;icon-undo&apos;&quot; onclick=&quot;com.clear(&apos;#searchForm&apos;, &apos;#dgGrid&apos;)&quot;&gt;清空&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/div&gt; &lt;div data-options=&quot;region:&apos;center&apos;,border:false&quot;&gt; &lt;table id=&quot;dgGrid&quot;&gt;&lt;/table&gt; &lt;/div&gt;&lt;/div&gt; 同目录下建一个Index.js ，我们使用闭包的形式来组织代码结构，将可配置项放在了上面，不强制要求，这里只为方便修改。使用时，将NoticeItem替换相应的类名，noticeServcice替换成相应的xxxservcie。abp.services.app.noticeItem中的noticeItem中n是首字母变成小写，这是后台生成的service，要按照此规定使用。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139var gridUI = gridUI || &#123;&#125;;(function () &#123; var noticeService = abp.services.app.noticeItem; var gridUrl = &apos;/Plat/NoticeItem/GetGridByCondition?BaseItemEnCode=&apos; + gridUI.BaseItemEnCode; var editModalUrl = &apos;/Plat/NoticeItem/CreateOrUpdateModal&apos;; var readModalUrl = &apos;/Plat/NoticeItem/ReadModal&apos;; var dgGrid, dgGridId = &quot;#dgGrid&quot;; $.extend(gridUI, &#123; loadGrid: function () &#123; var baseEnCode = &apos;Plat.NoticeItem.&apos;; var toolbar = [&#123; text: &quot;刷新&quot;, iconCls: &quot;icon-reload&quot;, handler: function () &#123; com.btnRefresh(dgGridId); &#125; &#125;, &#123; text: &quot;新增&quot;, EnCode: baseEnCode + &apos;Add&apos;, iconCls: &quot;icon-add&quot;, handler: gridUI.btnAdd &#125;, &#123; text: &quot;编辑&quot;, EnCode: baseEnCode + &apos;Edit&apos;, iconCls: &quot;icon-edit&quot;, handler: gridUI.btnEdit &#125;, &#123; text: &quot;删除&quot;, EnCode: baseEnCode + &apos;Delete&apos;, iconCls: &quot;icon-remove&quot;, handler: gridUI.btnDelete &#125;]; toolbar = com.authorizeButton(toolbar); if (gridUI.BaseItemEnCode != &quot;&quot;) &#123; toolbar = []; &#125; dgGrid = $(dgGridId).datagrid(&#123; url: gridUrl, toolbar: toolbar, columns: [[ &#123; field: &apos;Id&apos;, title: &apos;查看&apos;, width: 20, align: &apos;center&apos;, formatter: function (value, row) &#123; return String.format(&apos;&lt;button class=&quot;btn btn-default btn-xs&quot; type=&quot;button&quot; onclick=&quot;gridUI.showDetails(\\&apos;&#123;0&#125;\\&apos;)&quot;&gt;&lt;i class=&quot;fa fa-search&quot;&gt;&lt;/i&gt;&lt;/button&gt;&apos;, value); &#125; &#125;, &#123; field: &apos;Title&apos;, title: &apos;标题&apos;, width: 80 &#125;, &#123; field: &apos;BaseItemId&apos;, title: &apos;类别&apos;, width: 80, formatter: function (value) &#123; if (top.clients.dataItems[&apos;NoticeItem&apos;]) &#123; return top.clients.dataItems[&apos;NoticeItem&apos;][value]; &#125; else &#123; return &apos;&apos;; &#125; &#125; &#125;, &#123; field: &apos;CreationUserName&apos;, title: &apos;发布人姓名&apos;, width: 160 &#125;, &#123; field: &apos;IsTop&apos;, title: &apos;是否置顶&apos;, width: 50, formatter: com.formatYes &#125;, &#123; field: &apos;Status&apos;, title: &apos;状态&apos;, width: 50, formatter: function (value) &#123; var objMsg = &#123; &quot;primary&quot;: &#123; text: &quot;发布&quot;, &apos;case&apos;: [&apos;Submit&apos;] &#125;, &quot;info&quot;: &#123; text: &quot;暂存&quot;, &apos;case&apos;: [&apos;TempSave&apos;] &#125; &#125;; return com.formatMsg(value, objMsg); &#125; &#125; ]] &#125;); &#125;, editInfo: function (title, icon, id) &#123; var pDialog = com.dialog(&#123; title: title, width: &apos;100%&apos;, height: &apos;100%&apos;, href: editModalUrl, iconCls: icon, buttons: [ &#123; text: &apos;发布&apos;, iconCls: &apos;icon-ok&apos;, handler: function () &#123; gridUI.submit(pDialog, &quot;Submit&quot;); &#125; &#125;, &#123; text: &apos;暂存&apos;, iconCls: &apos;icon-save&apos;, handler: function () &#123; gridUI.submit(pDialog, &quot;TempSave&quot;); &#125; &#125; ], onLoad: function () &#123; editUI.setForm(id); &#125; &#125;); &#125;, showDetails: function (id) &#123; com.dialog(&#123; title: &quot;详情&quot;, width: 1500, height: 800, href: readModalUrl, queryParams: &#123; id: id &#125; &#125;); &#125;, btnAdd: function () &#123; gridUI.editInfo(&apos;新增公告&apos;, &apos;icon-add&apos;); &#125;, btnEdit: function () &#123; com.edit(dgGridId, function (id) &#123; gridUI.editInfo(&quot;编辑公告&quot;, &apos;icon-edit&apos;, id); &#125;); &#125;, btnDelete: function () &#123; com.deleted(noticeService, dgGridId); &#125;, submit: function (pDialog, status) &#123; var f = $(&quot;#editForm&quot;); var isValid = f.form(&apos;validate&apos;); if (!isValid) &#123; return; &#125; var objForm = f.formSerialize(); objForm.Content = editor.txt.html(); objForm.Status = status; com.setBusy(pDialog, true); noticeService.createOrUpdate(objForm, &#123; showMsg: true &#125;) .done(function () &#123; com.btnRefresh(); pDialog.dialog(&apos;close&apos;); &#125;) .always(function () &#123; com.setBusy(pDialog, false); &#125;); &#125; &#125;); $(function () &#123; gridUI.loadGrid(); &#125;);&#125;)(); CreateOrUpdate.cshtml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556@using Abp.Web.Mvc.Extensions@&#123; Layout = null; ViewBag.Title = &quot;通知公告管理&quot;;&#125;@Html.IncludeScript(&quot;/Areas/Plat/Views/NoticeItem/CreateOrUpdateModal.js&quot;)&lt;div class=&quot;layui-layer-content&quot;&gt; &lt;form id=&quot;editForm&quot;&gt; &lt;table class=&quot;kv-table&quot;&gt; &lt;tr&gt; &lt;th class=&quot;kv-label&quot;&gt;&lt;span class=&quot;red&quot;&gt;*&lt;/span&gt;标题&lt;/th&gt; &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt; &lt;input id=&quot;Title&quot; name=&quot;Title&quot; type=&quot;text&quot; class=&quot;easyui-textbox&quot; data-options=&quot;required:true&quot; style=&quot;width:569px&quot; /&gt; &lt;input id=&quot;Id&quot; name=&quot;Id&quot; type=&quot;hidden&quot; /&gt; &lt;input type=&quot;hidden&quot; id=&quot;CreationUserName&quot; name=&quot;CreationUserName&quot; /&gt; &lt;input type=&quot;hidden&quot; name=&quot;BaseItemCode&quot; value=&quot;&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th class=&quot;kv-label&quot;&gt;置顶&lt;/th&gt; &lt;td class=&quot;kv-content&quot; style=&quot;width:215px&quot;&gt; &lt;input name=&quot;IsTop&quot; id=&quot;IsTop&quot; class=&quot;easyui-switchbutton&quot;&gt; &lt;/td&gt; &lt;th class=&quot;kv-label&quot;&gt;公告类别&lt;/th&gt; &lt;td class=&quot;kv-content&quot;&gt; &lt;input name=&quot;BaseItemId&quot; id=&quot;BaseItemId&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;附件&lt;/th&gt; &lt;td colspan=&quot;3&quot;&gt; &lt;div id=&quot;fileUrl&quot;&gt;&lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; @*&lt;tr&gt; &lt;th class=&quot;kv-label&quot;&gt;是否图片新闻&lt;/th&gt; &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt; &lt;input name=&quot;IsImg&quot; id=&quot;IsImg&quot; class=&quot;easyui-switchbutton&quot;&gt; &lt;/td&gt; &lt;/tr&gt;*@ &lt;tr id=&quot;IsImgNews&quot;&gt; &lt;th&gt;上传图片&lt;/th&gt; &lt;td colspan=&quot;3&quot;&gt; &lt;input name=&quot;IsImg&quot; id=&quot;IsImg&quot; type=&quot;hidden&quot; value=&quot;true&quot;&gt; &lt;div id=&quot;imgUrl&quot; style=&quot;position: relative;&quot;&gt;&lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th class=&quot;kv-label&quot;&gt;内容&lt;/th&gt; &lt;td class=&quot;kv-content&quot; colspan=&quot;3&quot;&gt; &lt;div id=&quot;Content&quot; style=&quot;position: relative;&quot;&gt;&lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt;&lt;/div&gt; CreateOrUpdate.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465var Img;var editor;var editUI = &#123; setForm: function (id) &#123; var E = window.wangEditor; editor = new E(&apos;#Content&apos;); editor.customConfig = com.editor.customConfig; editor.create(); E.plugins.init(&#123; elem: &apos;#Content&apos;, plugins: [&apos;fullscreen&apos;] &#125;); //实例化文件上传 $(&quot;#imgUrl&quot;).powerWebUpload(&#123; uploadType: &apos;img&apos; &#125;); $(&quot;#fileUrl&quot;).powerWebUpload(); $(&apos;#BaseItemId&apos;).combobox(&#123; url: com.baseUrl + &apos;/baseItem/GetComBoJson?enCode=NoticeItem&apos;, required: true, validType: &quot;comboxValidate[&apos;请选择公告类别&apos;]&quot; &#125;); //function changeIsImg(checked) &#123; // if (checked) &#123; // $(&apos;#IsImgNews&apos;).css(&apos;display&apos;, &apos;&apos;); // &#125; else &#123; // $(&apos;#IsImgNews&apos;).css(&apos;display&apos;, &apos;none&apos;); // &#125; //&#125; //$(&apos;#IsImg&apos;).switchbutton(&#123; // onChange: function (checked) &#123; // changeIsImg(checked); // &#125; //&#125;); com.setForm(id, function (data) &#123; var f = $(&quot;#editForm&quot;); if (id) &#123; setTimeout(function () &#123; editor.txt.html(data.Content); &#125;, 666); &#125; webuploader.loadFile(&#123; elem: &apos;#imgUrl&apos;, rows: data.AbpImgFileOutput &#125;); webuploader.loadFile(&#123; elem: &apos;#fileUrl&apos;, rows: data.AbpFileOutput &#125;); com.loadSwithButton($(&apos;.layui-layer-content&apos;), data); //changeIsImg(data.IsImg); &#125;); &#125;&#125;","categories":[{"name":"ABP","slug":"ABP","permalink":"https://luoyunchong.github.io/hexo-blog/categories/ABP/"}],"tags":[{"name":"ABP","slug":"ABP","permalink":"https://luoyunchong.github.io/hexo-blog/tags/ABP/"}]},{"title":"ABP源码解析","slug":"ABP/ABP源码解析","date":"2019-01-09T06:40:26.000Z","updated":"2019-06-25T06:22:05.376Z","comments":true,"path":"2019/01/09/ABP/ABP源码解析/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2019/01/09/ABP/ABP源码解析/","excerpt":"","text":"2.Abp简介 ABP是“ASP.NET Boilerplate Project (ASP.NET样板项目)”的简称。ASP.NET Boilerplate是一个用最佳实践和流行技术开发现代WEB应用程序的新起点，它旨在成为一个通用的WEB应用程序框架和项目模板。 框架ABP是基于最新的ASP.NET CORE，ASP.NET MVC和Web API技术的应用程序框架。并使用流行的框架和库，它提供了便于使用的授权，依赖注入，验证，异常处理，本地化，日志记录，缓存等常用功能。 架构ABP实现了多层架构（领域层，应用层，基础设施层和表示层），以及领域驱动设计（实体，存储库，领域服务，应用程序服务，DTO等）。还实现和提供了良好的基础设施来实现最佳实践，如依赖注入。 模板ABP轻松地为您的项目创建启动模板。它默认包括最常用的框架和库。还允许您选择单页（Angularjs）或多页架构，EntityFramework或NHibernate作为ORM。访问官网，了解更多。 用户接口层（Presentation）：提供一个界面，实现用户交互操作。 应用 层（Application):进行展现层与领域层之间的协调，协调业务对象来执行特定的应用 程序的任务。不包含业务逻辑。 领域层（Domain)：包括业务对象和业务规则，这是应用程序的核心层。 基础设计层：（Infrastructure）:提供通用技术来支持更高的层。仓储可通过ORM来实现数据库的交互 ABP基础原则： 应用层不包含业务逻辑 领域服务处理业务逻辑 应用服务(AppLIcationService)VS领域服务（Manager) 在什么情况下应使用领域服务 执行某个具体的业务操作。 领域对象的转换 以多个领域对象为输入，返回一个值对象 参考此文档 总结： 领域服务和应用服务的区别在于只有领域服务才处理业务逻辑。应用服务作为领域服务的消费方，是很薄的一层。 过度使用领域服务会导致贫血领域模型（即所有的业务逻辑都位于领域服务中，而不是实体和值对象中）。 领域服务（Domain Service） 摘要： 当处理的业务规则跨越两个（及以上）实体时，应该写在 领域服务方法里 领域事件 (Domain Event) 领域事件用来定义特定于领域的事件，领域服务与实体一起实现了不属于单个实体的业务规则","categories":[{"name":"ABP","slug":"ABP","permalink":"https://luoyunchong.github.io/hexo-blog/categories/ABP/"}],"tags":[{"name":"ABP","slug":"ABP","permalink":"https://luoyunchong.github.io/hexo-blog/tags/ABP/"}]},{"title":"工作内容Rshiny框架使用","slug":"大后端/工作内容Rshiny框架使用","date":"2018-12-25T16:56:03.000Z","updated":"2019-06-25T06:22:05.389Z","comments":true,"path":"2018/12/26/大后端/工作内容Rshiny框架使用/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2018/12/26/大后端/工作内容Rshiny框架使用/","excerpt":"","text":"shiny Server学习记录-网络计算 http://218.94.144.229:8098/NetworkEntropy/ 用户名 admin 密码 123qwe shiny api文档http://shiny.rstudio.com/reference/shiny/latest/ shiny github https://github.com/rstudio/shiny Shiny Server配置 https://blog.csdn.net/wendaomudong_l2d4/article/details/75105440 R shiny基础教程 https://blog.csdn.net/u014801157/article/category/5690387 windows下无法正常安装某个类库时,Windows 下R软件如何安装GO.db程序包https://blog.csdn.net/hhl_csdn/article/details/51933673?tdsourcetag=s_pctim_aiomsg 内网是在浏览器下输入 http://:3838/APP_NAME/即可 一些重要的命令 先复制shiny包自带样例到目录下1cp -r /usr/lib64/R/library/shiny/examples/* /srv/shiny-server/ shiny server 服务设置状态 12345678#查看状态sudo systemctl status shiny-server#开启sudo systemctl start shiny-server#停止sudo systemctl stop shiny-server#重启sudo systemctl restart shiny-server 1) 配置文件位置：/etc/shiny-server/shiny-server.conf2) 报错时查看日志[服务器运行日志]/var/log/shiny-server.log3) shiny运行日志[类似R的运行日志]/var/log/shiny-server 当无法安装某些包时可使用下面的代码进行安装： 12source(&quot;http://bioconductor.org/biocLite.R&quot;)biocLite(&quot;包名&quot;) R 3.3.3 R语言执行需要安装的程序包 以管理员权限运行Rgui,并指定包安装的位置，防止安装到其他目录 1.libPaths(\"C:/Program Files/R/R-3.3.3/library\") 123456789101112131415install.packages(&apos;pillar&apos;)install.packages(&quot;ClustOfVar&quot;)install.packages(&quot;psych&quot;)install.packages(&quot;GPArotation&quot;)install.packages(&quot;stringr&quot;)install.packages(&quot;readxl&quot;)install.packages(&quot;ca&quot;)## 这个包可能也不正常install.packages(&quot;arulesViz&quot;)## 这些包无法正常安装install.packages(&quot;arules&quot;) install.packages(&quot;lavaan&quot;) 中医网络分析模块1234567biocLite(&apos;GO.db&apos;)biocLite(&apos;org.Hs.eg.db&apos;)biocLite(&apos;clusterProfiler&apos;)biocLite(&apos;WGCNA&apos;)intsall.packages(&apos;WGCNA&apos;) 2018-12-26可以不阻塞当前运行的程序 shiny 异步 编程 https://rstudio.github.io/promises/articles/intro.html","categories":[{"name":"大后端","slug":"大后端","permalink":"https://luoyunchong.github.io/hexo-blog/categories/大后端/"}],"tags":[{"name":"Rshiny","slug":"Rshiny","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Rshiny/"}]},{"title":"MySQL学习记录","slug":"大后端/MySQL学习记录","date":"2018-12-02T15:21:22.000Z","updated":"2019-06-25T06:26:30.354Z","comments":true,"path":"2018/12/02/大后端/MySQL学习记录/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2018/12/02/大后端/MySQL学习记录/","excerpt":"","text":"Navicat Premium 12连接MySQL8+时出现2059错误解决方法 1ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;; 上面那行以mysql_native_password的加密规则更新了用户的密码password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。 Navicat Premium 12连接MySQL8.0出现2059错误 ubuntu16.04 安装mysql5.7并设置root远程访问 Docker最全教程之MySQL容器化 （二十五） 根据父菜单id得到所有的子节点MYSQL写法 12345678select id from ( select t1.id, if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild from ( select id,parentId from re_menu t where t.status = 1 order by parentId, id ) t1, (select @pids := 要查询的菜单节点 id) t2 ) t3 where ischild != 0 由于@符号与参数冲突，使用存储过程解决 1234567891011CREATE DEFINER=`root`@`localhost` PROCEDURE `OrganizationChildrens`(IN `pid` BIGINT)BEGIN select Id,ParentId,DisplayName as Text from ( select t1.id,t1.ParentId,t1.DisplayName, if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild from ( select Id,ParentId,DisplayName from AbpOrganizationUnits t where t.IsDeleted = &apos;0&apos; order by ParentId, id ) t1, (select @pids :=pid) t2 ) t3 where ischild != 0; END ABP框架中调用存储过程 123456public List&lt;TreeSelectModel&gt; GetChildrens(long? pid)&#123; string sql = $&quot;call OrganizationChildrens(&#123;pid&#125;)&quot;; return _orginazationDapperRepository.Query&lt;TreeSelectModel&gt;(sql).ToList();&#125;","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://luoyunchong.github.io/hexo-blog/categories/MySQL/"}],"tags":[{"name":"ABP","slug":"ABP","permalink":"https://luoyunchong.github.io/hexo-blog/tags/ABP/"},{"name":"MySQL","slug":"MySQL","permalink":"https://luoyunchong.github.io/hexo-blog/tags/MySQL/"}]},{"title":"记一次.NET 与R语言交互","slug":"ABP/记一次.NET 与R语言交互","date":"2018-07-02T16:50:27.000Z","updated":"2019-06-25T06:34:12.271Z","comments":true,"path":"2018/07/03/ABP/记一次.NET 与R语言交互/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2018/07/03/ABP/记一次.NET 与R语言交互/","excerpt":"项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！ 使用的类库是 RDotNet ,开源地址：R.NET他有官网的：对R.NET的一些介绍 ，这个可能需要翻墙。","text":"项目主要使用.NET相关技术，最近因为项目中要将写好的R语言的代码，直接通过.NET调用，得到计算结果，遇到了这么多的坑，在此记下一些过程，文档太少，英文不好！！！ 使用的类库是 RDotNet ,开源地址：R.NET他有官网的：对R.NET的一些介绍 ，这个可能需要翻墙。 我找了很多博客，在CSDN上的代码，基本都是重复的，也没有太多的介绍，一般情况都是官网直接翻译下来的，遇到一些问题时，根本查不到是什么原因。那么，遇到问题，怎么办？1、看官网，里面有一些示例的链接：这个相当于示例代码库2、看github上，开源地址的Issue，看不懂英语，也要看，有些问题，看完你就会懂了。 R.NET是什么？ 我的理解，R语言就像是SQL语言，用于数据计算，数据处理。R.Net这个类库就类似ADO.NET的技术，帮助我们实现.NET程序访问R语言代码，R.NET就相当于一个驱动程序。当然，严格意义上，我也不知道RDotNet是不是这样子，看他介绍，应该是起一R引擎。。。。（不懂.jpg） 使用RDotNet的步骤：1、首先，你要看懂一些简单的R程序，就像，你不懂sql 语句，你怎么写ADO.NETt程序一样（安装R的环境，不要装最新的3.5版本，因为，R.NET并没有做到最新的版本，看他的github就知道了，我本地装的3.3.3，一点问题都没有。如果你安装3.5版本，会一直报一个空指针异常，反正我被坑了。）2、将我上面所说的示例代码库下载下来，从最简单的代码开始看起。 如下为开发过程中可能出现的问题！ 而我遇到什么样的问题呢？ 我是如何解决的？ 还有哪些问题需要解决？ 这个类库还有哪些问题不能解决，他有哪些缺点？ 回答上面的问题. 1.我遇到的问题。1）、安装过新的R环境3.5导致一直报错，一点思路都没有。如何解决：看github的issue，看到有人提的问题，大意是指。R.NET不能支持到最新的R语言版本。2）、一个简单的程序，在控制台上执行，是OK的。然而在ASP.NET MVC程序上一直不成功。如何解决：第一步：先把R的环境变量配置好，类似JDK的环境变量配置找到自己的R语言位置，将32位和64位的环境都配置至path中 1;C:\\Program Files\\R\\R-3.3.3\\bin\\i386;C:\\Program Files\\R\\R-3.3.3\\bin\\x64; 第二步，如何还有问题的话：比如一直报StackOverflowException的异常，建议你看他的issue:这个是他们的讨论原本我也遇到这个问题，但R的版本用了3.3,就没这个错了。3）、当R的引擎正常结束后，调用 dispose后，下次调用 就会报错，那就不调用 dispose方法吧。那个作者说：There can only be one R engine in a process, and R itself is largely not thread-safe. 2.还有哪些问题需要解决？1) 以管理员权限运行Rgui,并指定包安装的位置，防止安装到其他目录此命令设置当前包安装的位置， 1.libPaths(&quot;C:/Program Files/R/R-3.3.3/library&quot;) 此命令查看当前包会安装的位置 1.libPaths() 2) 如果有些包无法正常安装，如果能找到那个包，可直接复制其至目录C:/Program Files/R/R-3.3.3/library3) 运行和发布后的代码都应运行在64位机子及平台上。 3.这个类库还有哪些问题不能解决，他有哪些缺点？1) 不能兼容所有的R版本，目前只兼容到R3.3.3。2) 如下代码在本机windows10 专业版 中文版电脑上运行会乱码 1CharacterVector datFname = engine.CreateCharacter(&quot;我是中文&quot;); 我研究下代码，是这个类中的方法有问题InternalString 下的方法 StringFromNativeUtf8 12345678910111213/// &lt;summary&gt;/// Convert utf8 to string/// &lt;/summary&gt;/// &lt;param name=&quot;utf8&quot;&gt;utf8 to convert&lt;/param&gt;public static string StringFromNativeUtf8(IntPtr utf8)&#123; int len = 0; while (Marshal.ReadByte(utf8, len) != 0) ++len; byte[] buffer = new byte[len]; Marshal.Copy(utf8, buffer, 0, buffer.Length); return Encoding.UTF8.GetString(buffer);&#125; 我在我本地调试源码时，发现，如果包含中文时，采用Encoding.Default.GetString(buffer);转换，这里就可以正常转换，但这样子，就只支持中文和英文了。而且，好像在测试过程中，改成Default后，如下方法中包含中文，反而乱码了。 1string[] rownames = engine.GetSymbol(&quot;rownames&quot;).AsCharacter().ToArray(); 所以我准备直接用最简单的方式 ，判断buffer的编码，如果不为UTF8,Convert为UTF8，然后返回，否则，这里就需要多此一举，因为，在测试过程发现，判断UTF8，不准确，明明不是UTF8，还是返回了UTF8，所以在这里需要判断，转换后的数据是否包含中文，如果包含，则直接返回，否则要从Default（根据系统的编码决定），转换为UTF8，就能返回中文 。 12345678910111213141516171819202122232425262728293031/// &lt;summary&gt;/// Convert utf8 to string/// &lt;/summary&gt;/// &lt;param name=&quot;utf8&quot;&gt;utf8 to convert&lt;/param&gt;public static string StringFromNativeUtf8(IntPtr utf8)&#123; int len = 0; while (Marshal.ReadByte(utf8, len) != 0) ++len; byte[] buffer = new byte[len]; Marshal.Copy(utf8, buffer, 0, buffer.Length); Encoding encoding = GetType(buffer); if (encoding.Equals(Encoding.UTF8)) &#123; string r = Encoding.UTF8.GetString(buffer); if (System.Text.RegularExpressions.Regex.IsMatch(r, @&quot;[\\u4e00-\\u9fbb]+$&quot;)) &#123; return r; &#125; else &#123; byte[] newBuffer = Encoding.Convert(Encoding.Default, Encoding.UTF8, buffer); return Encoding.UTF8.GetString(newBuffer); &#125; &#125; else &#123; byte[] newBuffer = Encoding.Convert(encoding, Encoding.UTF8, buffer); return Encoding.UTF8.GetString(newBuffer); &#125;&#125; 代码已放到github 由于该 R.NET类库 长期未维护，还是有很多BUG，所以我fork了一份，以便解决部分简单BUG问题， github开源地址 相关博客介绍 用C#调用R语言开发.NET MVC Web服务 此文章中介绍了.NET启动控制台调用R代码，这个思路非常好，一开始对R语言了解甚少，所以还是使用R.NET来实现.NET与R语言的交互，反而耗时耗力。 一键运行R脚本 这个文章让我了解到Rscript.exe这个程序的作用，以及执行方式。 c#调用R语言（原创翻译） 由于开发过程中，有个R程序运行时间非常长，最长可达2小时，所以只能以后台任务方式执行，但 RDotNET，一次只能运行一个，不执行完，其他的程序在WEB项目下无法正常运行，看了上面的文章，有了思路 ：使用.NET的进程Process起一个cmd命令，类似 java配置好环境变量后可使用java,javac命令一样，配置到Path中后，可直接在cmd中使用如下命令 1Rscript.exe \"某目录下\\test.R\" agruments 其中R程序包要有双引号 多个参数使用空格分隔 ，如下为.NET下使用Process启动cmd命令，并执行Rscript.exe 命令启动R引擎，让其后台运行，运行结束后，才会往后执行。 123456789101112131415161718192021222324252627 public void Execute() &#123; List&lt;string&gt; arguments = new List&lt;string&gt; &#123; 参数 &#125;; Process cmd = new Process &#123; StartInfo = &#123; FileName = @&quot;Rscript.exe&quot;, WorkingDirectory = AppFolders.RSourceCodeFolder,//.R代码的位置 &quot;E:\\svn\\CHNMed\\CHNMed.Web\\DataUsers\\RSourceCode&quot; UseShellExecute = false, RedirectStandardOutput = true, RedirectStandardError = true, Arguments = &quot; Test.r &quot; + string.Join(&quot; &quot;, arguments), CreateNoWindow = true,//不显示程序窗口 &#125; &#125;; cmd.Start();//启动程序 var output = cmd.StandardOutput.ReadToEnd(); var error = cmd.StandardError.ReadToEnd(); cmd.WaitForExit();//等待控制台程序执行完成cmd.Close();//关闭该进程 Logger.InfoFormat($&quot;参数：&#123;output&#125;出错信息:&#123;error&#125;&quot;); &#125;","categories":[{"name":".NET Framework","slug":"NET-Framework","permalink":"https://luoyunchong.github.io/hexo-blog/categories/NET-Framework/"}],"tags":[{"name":"ABP","slug":"ABP","permalink":"https://luoyunchong.github.io/hexo-blog/tags/ABP/"},{"name":".NET Framework","slug":"NET-Framework","permalink":"https://luoyunchong.github.io/hexo-blog/tags/NET-Framework/"},{"name":"R.NET","slug":"R-NET","permalink":"https://luoyunchong.github.io/hexo-blog/tags/R-NET/"}]},{"title":"Navicat Premium 12  破解版免费下载","slug":"大后端/Navicat Premium 12  破解版免费下载","date":"2018-06-02T15:21:22.000Z","updated":"2019-06-25T06:22:05.387Z","comments":true,"path":"2018/06/02/大后端/Navicat Premium 12  破解版免费下载/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2018/06/02/大后端/Navicat Premium 12  破解版免费下载/","excerpt":"Navicat Premium 12 破解版免费下载下载链接如下：百度网盘地址 密码：mi2p里面也有readm.txt，是一个很简单的说明 由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12 连接不上，会报错 navicat连接MySQL8.0出现2059错误 最重要的就是这么一行代码就行了 ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;上面那行以mysql_native_password的加密规则更新了用户的密码password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。","text":"Navicat Premium 12 破解版免费下载下载链接如下：百度网盘地址 密码：mi2p里面也有readm.txt，是一个很简单的说明 由于本地安装的Mysql版本较高，版本为8.0.11,Navicat Premium 12 连接不上，会报错 navicat连接MySQL8.0出现2059错误 最重要的就是这么一行代码就行了 ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;上面那行以mysql_native_password的加密规则更新了用户的密码password 对应的字符串改成你原本的密码就行了。具体原因就是如上个博客所说，mysql8.0版本以后的密码规则有变更，旧的连接工具必须升级新的驱动才可解决此问题，但，升级后，就要提示只有14天使用权限。所以，将加密规则改成mysql_native_password 即可。","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://luoyunchong.github.io/hexo-blog/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://luoyunchong.github.io/hexo-blog/tags/MySQL/"},{"name":"Navicat Premium 12","slug":"Navicat-Premium-12","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Navicat-Premium-12/"}]},{"title":"Node.js  功能点树形结构操作","slug":"大后端/Node.js  功能点树形结构操作","date":"2017-01-10T06:10:47.000Z","updated":"2019-06-25T06:40:39.622Z","comments":true,"path":"2017/01/10/大后端/Node.js  功能点树形结构操作/","link":"","permalink":"https://luoyunchong.github.io/hexo-blog/2017/01/10/大后端/Node.js  功能点树形结构操作/","excerpt":"Node.js 下生成递归的树形结构 如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索 var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好. 在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。","text":"Node.js 下生成递归的树形结构 如何将数据库取取的数组形式的数据转换成前端需要的树形格式呢，此demo借助DFS 深度优先搜索 var tree=new treeNode中是最关键的，根据pid为0，循环得到所有父节点为0的数据，将其放入treelist集合中，在这个过程中，顺带，把其子节点也构建好. 在getDFSTree(data, data[i].id) 这一行代码中，将data[i].id作为下一个pid，继续循环找到其节点的子节点，其作为chilldren的属性，挂载在上一个父节点上。 1234567891011121314151617181920212223242526272829303132function treeNode(id, pid, text, children) &#123; this.id = id; this.pid = pid; this.text = text; this.children = children;&#125;//测试数据var data = [ &#123; &apos;id&apos;: 1, &apos;pid&apos;: 0, &apos;text&apos;: &apos;主节点&apos; &#125;, &#123; &apos;id&apos;: 2, &apos;pid&apos;: 1, &apos;text&apos;: &apos;第二层,id2&apos; &#125;, &#123; &apos;id&apos;: 3, &apos;pid&apos;: 1, &apos;text&apos;: &apos;第二层,id3&apos; &#125;, &#123; &apos;id&apos;: 4, &apos;pid&apos;: 3, &apos;text&apos;: &apos;第三层,id4&apos; &#125;];function getDFSTree(data, pid) &#123; var treelist = []; for (var i = 0; i &lt; data.length; i++) &#123; if (data[i].pid == pid) &#123; var tree = new treeNode(data[i].id, data[i].pid, data[i].text, getDFSTree(data, data[i].id)); treelist.push(tree) &#125; &#125; return treelist;&#125;//exports.getDFSTree= getDFSTree;//调用 var tree = getDFSTree(data, 0);console.log(tree[0].children) 递归删除子节点 如何删除树形结构的数据时，我们如何删除节点和他的子节点呢。此demo，不太友好。说下思路。现在让我实现这样的功能，就是另一个思路。在这里说二个方法 得到所有节点数据，然后，在内存在找到所有的子节点，将其push到一个数组中，然后删除时使用 where id in(1,2,3,4) 第二种，直接写一个sql,得到所有子节点，然后删除。 第一种实现-递归具体实现：在内存中找到节点的所有子节点，其中results为数据中所有的节点数据。IsActive为是否启用，这边并不太大作用，仅是数据库用到的软删除。 数据格式为 12345678[ &#123;&apos;FunctionID&apos;:1,&apos;ParentID &apos;:0,&apos;IsActive&apos;:1&#125;, &#123;&apos;FunctionID&apos;:2,&apos;ParentID &apos;:1,&apos;IsActive&apos;:1&#125;, &#123;&apos;FunctionID&apos;:3,&apos;ParentID &apos;:1,&apos;IsActive&apos;:1&#125;, &#123;&apos;FunctionID&apos;:4,&apos;ParentID &apos;:2,&apos;IsActive&apos;:1&#125;, &#123;&apos;FunctionID&apos;:5,&apos;ParentID &apos;:2,&apos;IsActive&apos;:1&#125;, &#123;&apos;FunctionID&apos;:6,&apos;ParentID &apos;:3,&apos;IsActive&apos;:1&#125;] 递归代码实现 1234567891011121314151617181920212223242526272829var treeFuncID = [];treeFuncID.push(&#123; &apos;FunctionID&apos;: data.FunctionID &#125;); //得到子节点的所有functionid function getMultiTreeID(FunctionID) &#123; var querydata = &#123; &apos;ParentID&apos;: FunctionID, &apos;IsActive&apos;: 1 &#125; var data = []; for (var j in results) &#123; if (results[j].ParentID == FunctionID) &#123; data.push(&#123; &apos;FunctionID&apos;: results[j].FunctionID &#125;); &#125; &#125; if (data != undefined &amp;&amp; data.length &gt; 0) &#123; for (var i in data) &#123; getMultiTreeID(data[i].FunctionID); treeFuncID.push(&#123; &apos;FunctionID&apos;: data[i].FunctionID &#125;); &#125; &#125; &#125;//DFS查找功能点数据，将其push到treeFunctID数组中 getMultiTreeID(data.FunctionID);//同步 第二种实现-MsSQL版本Summaries 为表名 IsDeleted为软删除字段 123456789101112131415//可以根据父节点得到所有子节点数据string sql = @&quot; WITH TEMP AS ( SELECT Id,Name,PId FROM HbAssess.dbo.Summaries WHERE PId = @pId AND IsDeleted=&apos;false&apos; UNION ALL SELECT a.Id,a.Name,a.PId FROM TEMP JOIN HbAssess.dbo.Summaries a ON TEMP.Id= a.PId AND a.IsDeleted=&apos;false&apos; ) SELECT Id,Name as &apos;Text&apos;,PId as ParentId FROM TEMP &quot;; 第二种实现-MySQL 5.6+re_menu为表名 12345678select id from ( select t1.id, if(find_in_set(parentId, @pids) &gt; 0, @pids := concat(@pids, &apos;,&apos;, id), 0) as ischild from ( select id,parentId from re_menu t where t.status = 1 order by parentId, id ) t1, (select @pids := 要查询的菜单节点 id) t2 ) t3 where ischild != 0","categories":[{"name":"大后端","slug":"大后端","permalink":"https://luoyunchong.github.io/hexo-blog/categories/大后端/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://luoyunchong.github.io/hexo-blog/tags/Node-js/"}]}]}